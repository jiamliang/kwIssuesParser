<?xml version="1.0" encoding="UTF-8"?>
<errorList xmlns="http://www.klocwork.com/inForce/report/1.0" version="9.5.2">
<problem>
 <problemID>120</problemID>
 <file>cvs\diff\context.c</file>
 <method>mark_ignorable</method>
 <line>412</line>
 <column>7</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from bool to char may cause loss of data</message>
 <anchor>2005837016</anchor>
 <prefix>Ifthechangeisignorable,markit.*/</prefix>
 <postfix>/*Advancetothefollowingchange.*/</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=120</url>
</problem>
<problem>
 <problemID>121</problemID>
 <file>cvs\diff\context.c</file>
 <method>pr_context_hunk</method>
 <line>141</line>
 <column>3</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;hunk&apos; by passing argument 1 to function &apos;analyze_hunk&apos; at line 141 before NULL check at line 184</message>
 <anchor>1777321228</anchor>
 <prefix>linenumbersinvolvedineachfile.*/</prefix>
 <postfix>if(!show_from&amp;&amp;!show_to)return;/</postfix>
 <trace>
  <traceBlock file="cvs\diff\context.c" method="pr_context_hunk" id="0">
   <traceLine line="141" text="&apos;hunk&apos; is dereferenced by being passed as argument 1 to function &apos;analyze_hunk&apos;." type="E" refId="1"/>
   <traceLine line="184" text="&apos;hunk&apos; is checked for NULL." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="analyze_hunk" id="1">
   <traceLine line="748" text="&apos;hunk&apos; is passed to function &apos;analyze_hunk&apos;." type="E"/>
   <traceLine line="759" text="&apos;hunk&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=121</url>
</problem>
<problem>
 <problemID>122</problemID>
 <file>cvs\diff\context.c</file>
 <method>pr_unidiff_hunk</method>
 <line>272</line>
 <column>3</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;hunk&apos; by passing argument 1 to function &apos;analyze_hunk&apos; at line 272 before NULL check at line 317</message>
 <anchor>1777321228</anchor>
 <prefix>linenumbersinvolvedineachfile.*/</prefix>
 <postfix>if(!show_from&amp;&amp;!show_to)return;/</postfix>
 <trace>
  <traceBlock file="cvs\diff\context.c" method="pr_unidiff_hunk" id="0">
   <traceLine line="272" text="&apos;hunk&apos; is dereferenced by being passed as argument 1 to function &apos;analyze_hunk&apos;." type="E" refId="1"/>
   <traceLine line="317" text="&apos;hunk&apos; is checked for NULL." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="analyze_hunk" id="1">
   <traceLine line="748" text="&apos;hunk&apos; is passed to function &apos;analyze_hunk&apos;." type="E"/>
   <traceLine line="759" text="&apos;hunk&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=122</url>
</problem>
<problem>
 <problemID>131</problemID>
 <file>cvs\diff\diff.c</file>
 <method>diff_run</method>
 <line>706</line>
 <column>24</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 1 to function &apos;compare_files&apos; at line 706.</message>
 <anchor>-528638240</anchor>
 <prefix>file&quot;);return2;}opened_file=1;}}</prefix>
 <postfix>/*Printanymessagesthatweresavedu</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff.c" method="diff_run" id="0">
   <traceLine line="706" text="NULL constant is dereferenced by passing argument 1 to function &apos;compare_files&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\diff\diff.c" method="compare_files" id="1">
   <traceLine line="939" text="&apos;dir0&apos; is passed to function &apos;compare_files&apos;." type="E"/>
   <traceLine line="980" text="dir0==0 is true" type="C"/>
   <traceLine line="985" text="Entering loop, because i&lt;=1 is true" type="C"/>
   <traceLine line="1036" text="!failed&amp;&amp;depth==0&amp;&amp;inf[0] .dir_p!=inf[1] .dir_p is false" type="C"/>
   <traceLine line="1099" text="(inf[0] .dir_p|inf[1] .dir_p) || (depth&gt;0&amp;&amp; ( ! ( ( (inf[0] .stat.st_mode) &amp;61440) ==32768) || ! ( ( (inf[1] .stat.st_mode) &amp;61440) ==32768) ) ) is true" type="C"/>
   <traceLine line="1109" text="(inf[0] .dir_p|inf[1] .dir_p) &amp;&amp;recursive&amp;&amp; (entire_new_file_flag|| (unidirectional_new_file_flag&amp;&amp;inf[0] .desc== -1) ) is false" type="C"/>
   <traceLine line="1116" text="inf[0] .desc== -1 is false" type="C"/>
   <traceLine line="1116" text="dir0: copies &apos;dir0&apos;" type="E"/>
   <traceLine line="1116" text="dir = (inf[0] .desc== -1) ?dir1:dir0: copies &apos;...?dir1:dir0&apos; into &apos;dir&apos;" type="E"/>
   <traceLine line="1118" text="&apos;dir&apos; is dereferenced by passing argument 2 to function &apos;message&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="message" id="2">
   <traceLine line="122" text="&apos;arg1&apos; is passed to function &apos;message&apos;." type="E"/>
   <traceLine line="124" text="&apos;arg1&apos; is dereferenced by passing argument 2 to function &apos;message5&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="message5" id="3">
   <traceLine line="129" text="&apos;arg1&apos; is passed to function &apos;message5&apos;." type="E"/>
   <traceLine line="135" text="&apos;arg1&apos; is dereferenced by passing argument 1 to function &apos;concat&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="concat" id="4">
   <traceLine line="821" text="&apos;s1&apos; is passed to function &apos;concat&apos;." type="E"/>
   <traceLine line="823" text="&apos;s1&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=131</url>
</problem>
<problem>
 <problemID>132</problemID>
 <file>cvs\diff\diff.c</file>
 <method>compare_files</method>
 <line>960</line>
 <column>41</column>
 <code>NPD.CHECK.CALL.MIGHT</code>
 <message>Pointer &apos;name&apos; checked for NULL at line 955 may be passed to function and may be dereferenced there by passing argument 3 to function &apos;message&apos; at line 960.</message>
 <anchor>346558399</anchor>
 <prefix>harconst*dir=name0==0?dir1:dir0;</prefix>
 <postfix>/*Return1sothatdiff_dirswillretu</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff.c" method="compare_files" id="0">
   <traceLine line="955" text="unidirectional_new_file_flag is true" type="C"/>
   <traceLine line="955" text="&apos;name1&apos; is checked for NULL." type="E"/>
   <traceLine line="958" text="name0==0 is true" type="C"/>
   <traceLine line="958" text="name1: copies &apos;name1&apos;" type="E"/>
   <traceLine line="958" text="name = name0==0?name1:name0: copies &apos;...?name1:name0&apos; into &apos;name&apos;" type="E"/>
   <traceLine line="959" text="name0==0 is true" type="C"/>
   <traceLine line="960" text="&apos;name&apos; is dereferenced by passing argument 3 to function &apos;message&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="message" id="1">
   <traceLine line="122" text="&apos;arg2&apos; is passed to function &apos;message&apos;." type="E"/>
   <traceLine line="124" text="&apos;arg2&apos; is dereferenced by passing argument 3 to function &apos;message5&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="message5" id="2">
   <traceLine line="129" text="&apos;arg2&apos; is passed to function &apos;message5&apos;." type="E"/>
   <traceLine line="136" text="&apos;arg2&apos; is dereferenced by passing argument 1 to function &apos;concat&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="concat" id="3">
   <traceLine line="821" text="&apos;s1&apos; is passed to function &apos;concat&apos;." type="E"/>
   <traceLine line="823" text="&apos;s1&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=132</url>
</problem>
<problem>
 <problemID>133</problemID>
 <file>cvs\diff\diff.c</file>
 <method>compare_files</method>
 <line>1118</line>
 <column>49</column>
 <code>NPD.CHECK.CALL.MIGHT</code>
 <message>Pointer &apos;name0&apos; checked for NULL at line 955 may be passed to function and may be dereferenced there by passing argument 3 to function &apos;message&apos; at line 1118. Also there is one similar error on line 1118.</message>
 <anchor>-1720709447</anchor>
 <prefix>ection4.17.6.1.1forthisformat.*/</prefix>
 <postfix>val=1;}}else{/*Wehavetwofilestha</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff.c" method="compare_files" id="0">
   <traceLine line="955" text="unidirectional_new_file_flag is true" type="C"/>
   <traceLine line="955" text="&apos;name1&apos; is checked for NULL." type="E"/>
   <traceLine line="955" text="name1!=0 is false" type="C"/>
   <traceLine line="954" text="(name0!=0&amp;&amp;name1!=0) || (unidirectional_new_file_flag&amp;&amp;name1!=0) is false" type="C"/>
   <traceLine line="970" text="name0==0 is true" type="C"/>
   <traceLine line="971" text="name1==0 is true" type="C"/>
   <traceLine line="975" text="name0==0 is true" type="C"/>
   <traceLine line="976" text="name0 = name1: copies &apos;name1&apos; into &apos;name0&apos;" type="E"/>
   <traceLine line="977" text="name1==0 is true" type="C"/>
   <traceLine line="980" text="dir0==0 is true" type="C"/>
   <traceLine line="981" text="dir1==0 is true" type="C"/>
   <traceLine line="985" text="Entering loop, because i&lt;=1 is true" type="C"/>
   <traceLine line="1000" text="stat_result==0 is true" type="C"/>
   <traceLine line="1003" text="pos== -1 is false" type="C"/>
   <traceLine line="1019" text="stat_result!=0 is false" type="C"/>
   <traceLine line="1036" text="!failed is true" type="C"/>
   <traceLine line="1052" text="stat(filename,  &amp;inf[dir_arg] .stat) !=0 is false" type="C"/>
   <traceLine line="1036" text="!failed&amp;&amp;depth==0&amp;&amp;inf[0] .dir_p!=inf[1] .dir_p is false" type="C"/>
   <traceLine line="1099" text="(inf[0] .dir_p|inf[1] .dir_p) || (depth&gt;0&amp;&amp; ( ! ( ( (inf[0] .stat.st_mode) &amp;61440) ==32768) || ! ( ( (inf[1] .stat.st_mode) &amp;61440) ==32768) ) ) is true" type="C"/>
   <traceLine line="1110" text="recursive is false" type="C"/>
   <traceLine line="1109" text="(inf[0] .dir_p|inf[1] .dir_p) &amp;&amp;recursive&amp;&amp; (entire_new_file_flag|| (unidirectional_new_file_flag&amp;&amp;inf[0] .desc== -1) ) is false" type="C"/>
   <traceLine line="1118" text="&apos;name0&apos; is dereferenced by passing argument 3 to function &apos;message&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="message" id="1">
   <traceLine line="122" text="&apos;arg2&apos; is passed to function &apos;message&apos;." type="E"/>
   <traceLine line="124" text="&apos;arg2&apos; is dereferenced by passing argument 3 to function &apos;message5&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="message5" id="2">
   <traceLine line="129" text="&apos;arg2&apos; is passed to function &apos;message5&apos;." type="E"/>
   <traceLine line="136" text="&apos;arg2&apos; is dereferenced by passing argument 1 to function &apos;concat&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="concat" id="3">
   <traceLine line="821" text="&apos;s1&apos; is passed to function &apos;concat&apos;." type="E"/>
   <traceLine line="823" text="&apos;s1&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=133</url>
</problem>
<problem>
 <problemID>134</problemID>
 <file>cvs\diff\diff.c</file>
 <method>diff_run</method>
 <line>267</line>
 <column>9</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-90158050</anchor>
 <prefix>ptind=optind_old;if(opened_file)</prefix>
 <postfix>returnval;}/*Decodetheoptions.*/</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff.c" method="diff_run" id="0">
   <traceLine line="266" text="Infeasible condition: &apos;opened_file&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="267" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\diff\diff.c" method="diff_run" id="1">
   <traceLine line="266" text="Inferred value &apos;opened_file&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="266" text="Result of expression &apos;opened_file != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=134</url>
</problem>
<problem>
 <problemID>135</problemID>
 <file>cvs\diff\diff.c</file>
 <method>compare_files</method>
 <line>981</line>
 <column>71</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;name1&apos; checked for NULL at line 955 may be dereferenced at line 981. Also there is one similar error on line 981.</message>
 <anchor>1189236396</anchor>
 <prefix>=dir_file_pathname(dir0,name0));</prefix>
 <postfix>/*Statthefiles.Recordwhetherthey</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff.c" method="compare_files" id="0">
   <traceLine line="955" text="unidirectional_new_file_flag is true" type="C"/>
   <traceLine line="955" text="&apos;name1&apos; is checked for NULL." type="E"/>
   <traceLine line="955" text="name1!=0 is false" type="C"/>
   <traceLine line="954" text="(name0!=0&amp;&amp;name1!=0) || (unidirectional_new_file_flag&amp;&amp;name1!=0) is false" type="C"/>
   <traceLine line="970" text="name0==0 is true" type="C"/>
   <traceLine line="971" text="name1==0 is true" type="C"/>
   <traceLine line="975" text="name0==0 is true" type="C"/>
   <traceLine line="976" text="name0 = name1: copies &apos;name1&apos; into &apos;name0&apos;" type="E"/>
   <traceLine line="977" text="name1==0 is true" type="C"/>
   <traceLine line="978" text="name1 = name0: copies &apos;name0&apos; into &apos;name1&apos;" type="E"/>
   <traceLine line="980" text="dir0==0 is true" type="C"/>
   <traceLine line="981" text="&apos;name1&apos; is dereferenced by passing argument 2 to function &apos;dir_file_pathname&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="dir_file_pathname" id="1">
   <traceLine line="834" text="&apos;file&apos; is passed to function &apos;dir_file_pathname&apos;." type="E"/>
   <traceLine line="837" text="&apos;file&apos; is dereferenced by passing argument 3 to function &apos;concat&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="concat" id="2">
   <traceLine line="821" text="&apos;s3&apos; is passed to function &apos;concat&apos;." type="E"/>
   <traceLine line="823" text="&apos;s3&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=135</url>
</problem>
<problem>
 <problemID>136</problemID>
 <file>cvs\diff\diff.c</file>
 <method>compare_files</method>
 <line>1118</line>
 <column>44</column>
 <code>NPD.CHECK.CALL.MIGHT</code>
 <message>Pointer &apos;dir&apos; checked for NULL at line 980 may be passed to function and may be dereferenced there by passing argument 2 to function &apos;message&apos; at line 1118. Also there is one similar error on line 1118.</message>
 <anchor>-1714196927</anchor>
 <prefix>ection4.17.6.1.1forthisformat.*/</prefix>
 <postfix>val=1;}}else{/*Wehavetwofilestha</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff.c" method="compare_files" id="0">
   <traceLine line="980" text="&apos;dir0&apos; is checked for NULL." type="E"/>
   <traceLine line="980" text="dir0==0 is true" type="C"/>
   <traceLine line="985" text="Entering loop, because i&lt;=1 is true" type="C"/>
   <traceLine line="1000" text="stat_result==0 is true" type="C"/>
   <traceLine line="1003" text="pos== -1 is false" type="C"/>
   <traceLine line="1019" text="stat_result!=0 is false" type="C"/>
   <traceLine line="1036" text="!failed is true" type="C"/>
   <traceLine line="1052" text="stat(filename,  &amp;inf[dir_arg] .stat) !=0 is false" type="C"/>
   <traceLine line="1036" text="!failed&amp;&amp;depth==0&amp;&amp;inf[0] .dir_p!=inf[1] .dir_p is false" type="C"/>
   <traceLine line="1099" text="(inf[0] .dir_p|inf[1] .dir_p) || (depth&gt;0&amp;&amp; ( ! ( ( (inf[0] .stat.st_mode) &amp;61440) ==32768) || ! ( ( (inf[1] .stat.st_mode) &amp;61440) ==32768) ) ) is true" type="C"/>
   <traceLine line="1109" text="(inf[0] .dir_p|inf[1] .dir_p) &amp;&amp;recursive&amp;&amp; (entire_new_file_flag|| (unidirectional_new_file_flag&amp;&amp;inf[0] .desc== -1) ) is false" type="C"/>
   <traceLine line="1116" text="inf[0] .desc== -1 is false" type="C"/>
   <traceLine line="1116" text="dir0: copies &apos;dir0&apos;" type="E"/>
   <traceLine line="1116" text="dir = (inf[0] .desc== -1) ?dir1:dir0: copies &apos;...?dir1:dir0&apos; into &apos;dir&apos;" type="E"/>
   <traceLine line="1118" text="&apos;dir&apos; is dereferenced by passing argument 2 to function &apos;message&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="message" id="1">
   <traceLine line="122" text="&apos;arg1&apos; is passed to function &apos;message&apos;." type="E"/>
   <traceLine line="124" text="&apos;arg1&apos; is dereferenced by passing argument 2 to function &apos;message5&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="message5" id="2">
   <traceLine line="129" text="&apos;arg1&apos; is passed to function &apos;message5&apos;." type="E"/>
   <traceLine line="135" text="&apos;arg1&apos; is dereferenced by passing argument 1 to function &apos;concat&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="concat" id="3">
   <traceLine line="821" text="&apos;s1&apos; is passed to function &apos;concat&apos;." type="E"/>
   <traceLine line="823" text="&apos;s1&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=136</url>
</problem>
<problem>
 <problemID>137</problemID>
 <file>cvs\diff\diff.c</file>
 <method>compare_files</method>
 <line>980</line>
 <column>71</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;name0&apos; checked for NULL at line 955 may be dereferenced at line 980. Also there is one similar error on line 980.</message>
 <anchor>1188312875</anchor>
 <prefix>0=name1;if(name1==0)name1=name0;</prefix>
 <postfix>inf[1].name=dir1==0?name1:(free1</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff.c" method="compare_files" id="0">
   <traceLine line="955" text="unidirectional_new_file_flag is true" type="C"/>
   <traceLine line="955" text="&apos;name1&apos; is checked for NULL." type="E"/>
   <traceLine line="955" text="name1!=0 is false" type="C"/>
   <traceLine line="954" text="(name0!=0&amp;&amp;name1!=0) || (unidirectional_new_file_flag&amp;&amp;name1!=0) is false" type="C"/>
   <traceLine line="970" text="name0==0 is true" type="C"/>
   <traceLine line="971" text="name1==0 is true" type="C"/>
   <traceLine line="975" text="name0==0 is true" type="C"/>
   <traceLine line="976" text="name0 = name1: copies &apos;name1&apos; into &apos;name0&apos;" type="E"/>
   <traceLine line="977" text="name1==0 is true" type="C"/>
   <traceLine line="980" text="&apos;name0&apos; is dereferenced by passing argument 2 to function &apos;dir_file_pathname&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="dir_file_pathname" id="1">
   <traceLine line="834" text="&apos;file&apos; is passed to function &apos;dir_file_pathname&apos;." type="E"/>
   <traceLine line="837" text="&apos;file&apos; is dereferenced by passing argument 3 to function &apos;concat&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="concat" id="2">
   <traceLine line="821" text="&apos;s3&apos; is passed to function &apos;concat&apos;." type="E"/>
   <traceLine line="823" text="&apos;s3&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=137</url>
</problem>
<problem>
 <problemID>146</problemID>
 <file>cvs\diff\diff3.c</file>
 <method>output_diff3</method>
 <line>1467</line>
 <column>11</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>)ptr-&gt;correspond-(int)DIFF_1ST];</prefix>
 <postfix>x[1]=&apos;\0&apos;;dontprint=oddoneout==0</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=146</url>
</problem>
<problem>
 <problemID>147</problemID>
 <file>cvs\diff\diff3.c</file>
 <method>output_diff3_merge</method>
 <line>1758</line>
 <column>13</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data. Also there is one similar error on line 1820.</message>
 <anchor>517317363</anchor>
 <prefix>)diff3_fatal(&quot;inputfileshrank&quot;);</prefix>
 <postfix>write_output(&amp;cc,1);}while(c!=&apos;\</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=147</url>
</problem>
<problem>
 <problemID>148</problemID>
 <file>cvs\diff\diff3.c</file>
 <method>output_diff3_edscript</method>
 <line>1605</line>
 <column>16</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;rev_mapping&apos; may be out of bounds. Array &apos;rev_mapping&apos; of size 3 may use index value(s) -5..-2</message>
 <anchor>-992467662</anchor>
 <prefix>((enumdiff_type)(((int)DIFF_1ST)</prefix>
 <postfix>/*Ifwearen&apos;tsupposedtodothisoutp</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff3.c" method="output_diff3_edscript" id="0">
   <traceLine line="1590" text="Array &apos;rev_mapping&apos; size is 3." type="E"/>
   <traceLine line="1601" text="b-&gt;correspond==DIFF_ALL is false" type="C"/>
   <traceLine line="1601" text="False condition branch assumes that b-&gt;correspond may be [0, 3] [5, 7]" type="E"/>
   <traceLine line="1605" text="(int)b-&gt;correspond- (int)DIFF_1ST" type="E" refId="1"/>
   <traceLine line="1601" text="Possible attempt to access element -5..-2 of array &apos;rev_mapping&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\diff\diff3.c" method="output_diff3_edscript" id="1">
   <traceLine line="1605" text="Inferred value &apos;b-&gt;correspond&apos; is &apos;[0, 3] [5, 7]&apos;" type="E"/>
   <traceLine line="1605" text="Result of expression &apos;b-&gt;correspond - 5&apos; is &apos;[-5, -2] [0, 2]&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=148</url>
</problem>
<problem>
 <problemID>149</problemID>
 <file>cvs\diff\diff3.c</file>
 <method>output_diff3_merge</method>
 <line>1732</line>
 <column>16</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;rev_mapping&apos; may be out of bounds. Array &apos;rev_mapping&apos; of size 3 may use index value(s) -5..-2</message>
 <anchor>-992467662</anchor>
 <prefix>((enumdiff_type)(((int)DIFF_1ST)</prefix>
 <postfix>charconst*format_2nd=&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;%s\</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff3.c" method="output_diff3_merge" id="0">
   <traceLine line="1715" text="Array &apos;rev_mapping&apos; size is 3." type="E"/>
   <traceLine line="1732" text="(int)b-&gt;correspond- (int)DIFF_1ST" type="E" refId="1"/>
   <traceLine line="1736" text="default is true" type="C"/>
   <traceLine line="1728" text="Possible attempt to access element -5..-2 of array &apos;rev_mapping&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\diff\diff3.c" method="output_diff3_merge" id="1">
   <traceLine line="1732" text="Inferred value &apos;b-&gt;correspond&apos; is &apos;[0, 3] [5, 7]&apos;" type="E"/>
   <traceLine line="1732" text="Result of expression &apos;b-&gt;correspond - 5&apos; is &apos;[-5, -2] [0, 2]&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=149</url>
</problem>
<problem>
 <problemID>152</problemID>
 <file>cvs\diff\diff3.c</file>
 <method>make_3way_diff</method>
 <line>775</line>
 <column>15</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;high_water_diff&apos; is never used after assignment</message>
 <anchor>-239233814</anchor>
 <prefix>_diff,FC)){high_water_thread^=1;</prefix>
 <postfix>high_water_mark=D_HIGHLINE(other</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=152</url>
</problem>
<problem>
 <problemID>252</problemID>
 <file>cvs\diff\io.c</file>
 <method>slurp</method>
 <line>142</line>
 <column>7</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from long long int to ssize_t may cause loss of data</message>
 <anchor>91838124</anchor>
 <prefix>forappendednewlineandsentinel.*/</prefix>
 <postfix>if(current-&gt;bufsize&lt;cc){current-</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=252</url>
</problem>
<problem>
 <problemID>253</problemID>
 <file>cvs\diff\io.c</file>
 <method>slurp</method>
 <line>151</line>
 <column>16</column>
 <code>PRECISION.LOSS.CALL</code>
 <message>Passing argument 3 to function read converts long long int to size_t and may cause loss of data</message>
 <anchor>-2056980484</anchor>
 <prefix>ed_chars&lt;current-&gt;stat.st_size){</prefix>
 <postfix>current-&gt;buffer+current-&gt;buffere</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=253</url>
</problem>
<problem>
 <problemID>533</problemID>
 <file>cvs\diff\side.c</file>
 <method>print_1sdiff_line</method>
 <line>199</line>
 <column>7</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>=&apos;\n&apos;))sep=put_newline?&apos;/&apos;:&apos;\\&apos;;</prefix>
 <postfix>write_output(&amp;cc,1);}if(right){i</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=533</url>
</problem>
<problem>
 <problemID>580</problemID>
 <file>cvs\diff\util.c</file>
 <method>printf_output</method>
 <line>392</line>
 <column>15</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>eak;case&apos;c&apos;:ch=va_arg(args,int);</prefix>
 <postfix>(*callbacks-&gt;write_output)(buf,1</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=580</url>
</problem>
<problem>
 <problemID>581</problemID>
 <file>cvs\diff\util.c</file>
 <method>dir_file_pathname</method>
 <line>837</line>
 <column>36</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;p&apos; returned from call to function &apos;strrchr&apos; at line 836 may be NULL and will be dereferenced at line 837.</message>
 <anchor>-1250227690</anchor>
 <prefix>nst*p=filename_lastdirchar(dir);</prefix>
 <postfix>}voiddebug_script(sp)structchang</postfix>
 <trace>
  <traceBlock file="cvs\diff\util.c" method="dir_file_pathname" id="0">
   <traceLine line="836" text="&apos;p&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="837" text="&apos;p&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=581</url>
</problem>
<problem>
 <problemID>582</problemID>
 <file>cvs\diff\util.c</file>
 <method>line_cmp</method>
 <line>512</line>
 <column>17</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to unsigned char may cause loss of data. Also there is one similar error on line 514.</message>
 <anchor>-961782108</anchor>
 <prefix>gnore_case_flag){if(ISUPPER(c1))</prefix>
 <postfix>if(ISUPPER(c2))c2=tolower(c2);}i</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=582</url>
</problem>
<problem>
 <problemID>584</problemID>
 <file>cvs\diff\util.c</file>
 <method>begin_output</method>
 <line>238</line>
 <column>11</column>
 <code>SV.USAGERULES.PROCESS_VARIANTS</code>
 <message>Use CreateProcess instead of execl.  This function acts like CreateProcess(NULL,?) and should be avoided.</message>
 <anchor>96950779</anchor>
 <prefix>h_name(&quot;dup2&quot;);close(pipes[0]);}</prefix>
 <postfix>pfatal_with_name(PR_PROGRAM);}el</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="POS33-C"/>
  <taxonomy name="CWE" metaInf="242"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=584</url>
</problem>
<problem>
 <problemID>620</problemID>
 <file>cvs\src\buffer.c</file>
 <method>packetizing_buffer_output</method>
 <line>1626</line>
 <column>5</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from unsigned int to char may cause loss of data. Also there are 3 similar errors on line(s) 1627, 1662, 1663.</message>
 <anchor>-483188802</anchor>
 <prefix>/assert(have&lt;=BUFFER_DATA_SIZE);</prefix>
 <postfix>inbuf[1]=have&amp;0xff;memcpy(inbuf+</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=620</url>
</problem>
<problem>
 <problemID>638</problemID>
 <file>cvs\src\commit.c</file>
 <method>checkaddfile</method>
 <line>2103</line>
 <column>9</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;rcsname&apos; by passing argument 1 to function &apos;RCS_parsercsfile&apos; at line 2103 before NULL check at line 2105</message>
 <anchor>-1136840812</anchor>
 <prefix>me!=NULL)free(rcsname);gotoout;}</prefix>
 <postfix>newfile=1;if(rcsname!=NULL)free(</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="checkaddfile" id="0">
   <traceLine line="2103" text="&apos;rcsname&apos; is dereferenced by being passed as argument 1 to function &apos;RCS_parsercsfile&apos;." type="E" refId="1"/>
   <traceLine line="2105" text="&apos;rcsname&apos; is checked for NULL." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_parsercsfile" id="1">
   <traceLine line="302" text="&apos;rcsfile&apos; is passed to function &apos;RCS_parsercsfile&apos;." type="E"/>
   <traceLine line="312" text="&apos;rcsfile&apos; is dereferenced by passing argument 1 to function &apos;fopen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=638</url>
</problem>
<problem>
 <problemID>641</problemID>
 <file>cvs\zlib\crc32.c</file>
 <method>crc32</method>
 <line>213</line>
 <column>20</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>1182708591</anchor>
 <prefix>rncrc32_little(crc,buf,len);else</prefix>
 <postfix>}#endif/*BYFOUR*/crc=crc^0xfffff</postfix>
 <trace>
  <traceBlock file="cvs\zlib\crc32.c" method="crc32" id="0">
   <traceLine line="210" text="Infeasible condition: &apos;* ( (unsigned char* ) ( &amp;endian) )&apos; cannot be false." type="E" refId="1"/>
   <traceLine line="213" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\zlib\crc32.c" method="crc32" id="1">
   <traceLine line="210" text="Inferred value &apos;endian&apos; is &apos;== 1&apos;" type="E"/>
   <traceLine line="210" text="Result of expression &apos;endian != 0&apos; is &apos;== 1&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=641</url>
</problem>
<problem>
 <problemID>642</problemID>
 <file>cvs\zlib\crc32.c</file>
 <method>crc32</method>
 <line>216</line>
 <column>5</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>535203559</anchor>
 <prefix>g(crc,buf,len);}#endif/*BYFOUR*/</prefix>
 <postfix>while(len&gt;=8){DO8;len-=8;}if(len</postfix>
 <trace>
  <traceBlock file="cvs\zlib\crc32.c" method="crc32" id="0">
   <traceLine line="206" text="Infeasible condition: &apos;sizeof(void* ) ==sizeof(ptrdiff_t)&apos; cannot be false." type="E" refId="1"/>
   <traceLine line="216" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\zlib\crc32.c" method="crc32" id="1">
   <traceLine line="206" text="Constant expression &apos;sizeof(void*)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="206" text="Constant expression &apos;sizeof(int)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="206" text="Result of expression &apos;sizeof(void*) == sizeof(int)&apos; is &apos;== 1&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=642</url>
</problem>
<problem>
 <problemID>644</problemID>
 <file>cvs\zlib\deflate.c</file>
 <method>deflate</method>
 <line>559</line>
 <column>13</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to Bytef may cause loss of data</message>
 <anchor>-1172982719</anchor>
 <prefix>,0);put_byte(s,0);put_byte(s,0);</prefix>
 <postfix>(s-&gt;strategy&gt;=Z_HUFFMAN_ONLY||s-</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=644</url>
</problem>
<problem>
 <problemID>645</problemID>
 <file>cvs\zlib\deflate.c</file>
 <method>fill_window</method>
 <line>1107</line>
 <column>17</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1452964984</anchor>
 <prefix>$%64Klimit:*/if(sizeof(int)&lt;=2){</prefix>
 <postfix>more=wsize;}elseif(more==(unsign</postfix>
 <trace>
  <traceBlock file="cvs\zlib\deflate.c" method="fill_window" id="0">
   <traceLine line="1106" text="Infeasible condition: &apos;sizeof(int) &lt;=2&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="1107" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\zlib\deflate.c" method="fill_window" id="1">
   <traceLine line="1106" text="Constant expression &apos;sizeof(int)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="1106" text="Result of expression &apos;sizeof(int) &lt;= 2&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=645</url>
</problem>
<problem>
 <problemID>648</problemID>
 <file>cvs\src\edit.c</file>
 <method>edit_fileproc</method>
 <line>363</line>
 <column>9</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;vers-&gt;vn_rcs&apos; allocated through function &apos;Version_TS&apos; at line 358 is lost at line 363. Also there are 2 similar errors on line(s) 384, 431.</message>
 <anchor>-1633923524</anchor>
 <prefix>ile%s;ignored&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}#ifdefCLIENT_SUPPORTif(!current</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="edit_fileproc" id="0">
   <traceLine line="358" text="Dynamic memory stored in &apos;vers-&gt;vn_rcs&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="363" text="Dynamic memory stored in &apos;vers-&gt;vn_rcs&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="187" text="vers_ts-&gt;tag&amp;&amp;strcmp(vers_ts-&gt;tag, &quot;BASE&quot; ) ==0 is false" type="C"/>
   <traceLine line="196" text="&apos;vers_ts-&gt;vn_rcs&apos; is allocated by calling function &apos;RCS_getversion&apos;." type="E" refId="2"/>
   <traceLine line="199" text="vers_ts-&gt;vn_rcs== ( (void* )0) is false" type="C"/>
   <traceLine line="212" text="set_time&amp;&amp;vers_ts-&gt;vn_rcs!= ( (void* )0) is false" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getversion" id="2">
   <traceLine line="2142" text="&apos;RCS_gettag(rcs, tag, force_tag_match, simple_tag)&apos; is allocated by calling function &apos;RCS_gettag&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_gettag" id="3">
   <traceLine line="2284" text="&apos;version&apos; is allocated by calling function &apos;translate_symtag&apos;." type="E" refId="4"/>
   <traceLine line="2285" text="version!= ( (void* )0) is true" type="C"/>
   <traceLine line="2290" text="tag = version: copies &apos;version&apos; into &apos;tag&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="translate_symtag" id="4">
   <traceLine line="3230" text="&apos;r&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="5">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="6"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="6">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=648</url>
</problem>
<problem>
 <problemID>654</problemID>
 <file>cvs\src\edit.c</file>
 <method>edit_fileproc</method>
 <line>384</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;editors&apos; allocated through function &apos;fileattr_get0&apos; at line 370 can be lost at line 384</message>
 <anchor>103317580</anchor>
 <prefix>stingeditors.&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}free(editors);}}fp=open_file(CV</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="edit_fileproc" id="0">
   <traceLine line="370" text="Dynamic memory stored in &apos;editors&apos; is allocated by calling function &apos;fileattr_get0&apos;." type="E" refId="1"/>
   <traceLine line="371" text="editors is true" type="C"/>
   <traceLine line="378" text="!quiet is false" type="C"/>
   <traceLine line="384" text="Dynamic memory stored in &apos;editors&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\fileattr.c" method="fileattr_get0" id="1">
   <traceLine line="225" text="&apos;retval&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="2">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="3">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=654</url>
</problem>
<problem>
 <problemID>657</problemID>
 <file>cvs\src\edit.c</file>
 <method>notify_do</method>
 <line>915</line>
 <column>13</column>
 <code>UFM.USE.MIGHT</code>
 <message>Object &apos;filename&apos; was used at line 915 after being freed by calling &apos;free&apos; at line 900</message>
 <anchor>-734768633</anchor>
 <prefix>haracterineditorvalue&quot;);return;}</prefix>
 <postfix>break;case&apos;U&apos;:case&apos;C&apos;:editor_set</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="notify_do" id="0">
   <traceLine line="882" text="type== &apos;E&apos; &amp;&amp; !check_edited&amp;&amp; !quiet is true" type="C"/>
   <traceLine line="885" text="editors is true" type="C"/>
   <traceLine line="900" text="update_dir&amp;&amp; *update_dir is true" type="C"/>
   <traceLine line="900" text="&apos;tmp&apos; is freed by calling &apos;free&apos;." type="E"/>
   <traceLine line="915" text="Freed pointer &apos;filename&apos; is used by calling &apos;editor_set&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM30-C"/>
  <taxonomy name="CWE" metaInf="416"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=657</url>
</problem>
<problem>
 <problemID>660</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>cvs_temp_file</method>
 <line>771</line>
 <column>5</column>
 <code>UFM.USE.MIGHT</code>
 <message>Object &apos;fn&apos; was used at line 771 after being freed by calling &apos;free&apos; at line 755</message>
 <anchor>3272</anchor>
 <prefix>hechmodleftopentoexploitation.*/</prefix>
 <postfix>returnfp;}/*char**xresolvepath(c</postfix>
 <trace>
  <traceBlock file="cvs\src\filesubr.c" method="cvs_temp_file" id="0">
   <traceLine line="755" text="fp== ( (void* )0) is true" type="C"/>
   <traceLine line="755" text="&apos;fn&apos; is freed by calling &apos;free&apos;." type="E"/>
   <traceLine line="771" text="&apos;fn&apos; is used after having been freed." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM30-C"/>
  <taxonomy name="CWE" metaInf="416"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=660</url>
</problem>
<problem>
 <problemID>661</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>xcmp</method>
 <line>604</line>
 <column>16</column>
 <code>PRECISION.LOSS.CALL</code>
 <message>Passing argument 2 to function Xreadlink converts off_t to size_t and may cause loss of data. Also there is one similar error on line 605.</message>
 <anchor>-135192083</anchor>
 <prefix>S_ISLNK(sb2.st_mode)){intresult;</prefix>
 <postfix>buf2=Xreadlink(file2,sb2.st_size</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=661</url>
</problem>
<problem>
 <problemID>662</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>islink</method>
 <line>142</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from off_t to ssize_t may cause loss of data</message>
 <anchor>223902177</anchor>
 <prefix>e,&amp;sb)&gt;=0)&amp;&amp;S_ISLNK(sb.st_mode))</prefix>
 <postfix>#endifreturnretsize;}/**Returnst</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=662</url>
</problem>
<problem>
 <problemID>664</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>xcmp</method>
 <line>664</line>
 <column>32</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;buf2&apos; may be out of bounds. Array &apos;buf2&apos; of size 8192 may use index value(s) 0..INT_MAX-1</message>
 <anchor>3035167</anchor>
 <prefix>file2);/*assert(read1==read2);*/</prefix>
 <postfix>}while(ret==0&amp;&amp;read1==buf_size);</postfix>
 <trace>
  <traceBlock file="cvs\src\filesubr.c" method="xcmp" id="0">
   <traceLine line="584" text="Array &apos;buf2&apos; is defined." type="E"/>
   <traceLine line="650" text="Array &apos;buf2&apos; of size 8192 is retrieved from function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="664" text="&apos;buf2&apos; is passed as an argument to function &apos;memcmp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="xcmp" id="1">
   <traceLine line="650" text="Result of expression &apos;$1*1&apos; is == 8192." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="xcmp" id="2">
   <traceLine line="650" text="Function argument &apos;$1&apos; is == 8192." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=664</url>
</problem>
<problem>
 <problemID>665</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>xcmp</method>
 <line>664</line>
 <column>26</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;buf1&apos; may be out of bounds. Array &apos;buf1&apos; of size 8192 may use index value(s) 0..INT_MAX-1</message>
 <anchor>3035166</anchor>
 <prefix>file2);/*assert(read1==read2);*/</prefix>
 <postfix>}while(ret==0&amp;&amp;read1==buf_size);</postfix>
 <trace>
  <traceBlock file="cvs\src\filesubr.c" method="xcmp" id="0">
   <traceLine line="584" text="Array &apos;buf1&apos; is defined." type="E"/>
   <traceLine line="649" text="Array &apos;buf1&apos; of size 8192 is retrieved from function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="664" text="&apos;buf1&apos; is passed as an argument to function &apos;memcmp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="xcmp" id="1">
   <traceLine line="649" text="Result of expression &apos;$1*1&apos; is == 8192." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="xcmp" id="2">
   <traceLine line="649" text="Function argument &apos;$1&apos; is == 8192." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=665</url>
</problem>
<problem>
 <problemID>667</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>xresolvepath</method>
 <line>807</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;owd.desc&apos; at line 804 may be lost here. Also there are 3 similar errors on line(s) 809, 811, 812.</message>
 <anchor>1184602231</anchor>
 <prefix>irectory&quot;);if(CVS_CHDIR(path)&lt;0)</prefix>
 <postfix>if((hardpath=xgetcwd())==NULL)er</postfix>
 <trace>
  <traceBlock file="cvs\src\filesubr.c" method="xresolvepath" id="0">
   <traceLine line="804" text="Resource is acquired: &apos;owd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="807" text="Resource is lost: &apos;owd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=667</url>
</problem>
<problem>
 <problemID>677</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>570</line>
 <column>32</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>ockfile(stderr);free(buf);}#else</prefix>
 <postfix>argv[0],argv[d-&gt;optind]);#endif}</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=677</url>
</problem>
<problem>
 <problemID>678</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>607</line>
 <column>44</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>\n&quot;),argv[0],pfound-&gt;name);#else</prefix>
 <postfix>%s:option`--%s&apos;doesn&apos;tallowanarg</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=678</url>
</problem>
<problem>
 <problemID>679</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>621</line>
 <column>44</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>optind-1][0],pfound-&gt;name);#else</prefix>
 <postfix>%s:option`%c%s&apos;doesn&apos;tallowanarg</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=679</url>
</problem>
<problem>
 <problemID>680</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>689</line>
 <column>32</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>;free(buf);}#elsefprintf(stderr,</prefix>
 <postfix>argv[0],argv[d-&gt;optind-1]);#endi</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=680</url>
</problem>
<problem>
 <problemID>681</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>730</line>
 <column>36</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>n&quot;),argv[0],d-&gt;__nextchar);#else</prefix>
 <postfix>argv[0],d-&gt;__nextchar);#endif}el</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=681</url>
</problem>
<problem>
 <problemID>682</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>741</line>
 <column>36</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>&gt;optind][0],d-&gt;__nextchar);#else</prefix>
 <postfix>argv[0],argv[d-&gt;optind][0],d-&gt;__</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=682</url>
</problem>
<problem>
 <problemID>683</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>799</line>
 <column>34</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>loption--%c\n&quot;),argv[0],c);#else</prefix>
 <postfix>#endif}else{#ifdefined_LIBC&amp;&amp;def</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=683</url>
</problem>
<problem>
 <problemID>684</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>808</line>
 <column>34</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>doption--%c\n&quot;),argv[0],c);#else</prefix>
 <postfix>#endif}#ifdefined_LIBC&amp;&amp;definedU</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=684</url>
</problem>
<problem>
 <problemID>685</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>882</line>
 <column>34</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>ockfile(stderr);free(buf);}#else</prefix>
 <postfix>argv[0],c);#endif}d-&gt;optopt=c;if</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=685</url>
</problem>
<problem>
 <problemID>686</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>954</line>
 <column>34</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>ockfile(stderr);free(buf);}#else</prefix>
 <postfix>argv[0],argv[d-&gt;optind]);#endif}</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=686</url>
</problem>
<problem>
 <problemID>687</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>999</line>
 <column>42</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>ockfile(stderr);free(buf);}#else</prefix>
 <postfix>%s:option`-W%s&apos;doesn&apos;tallowanarg</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=687</url>
</problem>
<problem>
 <problemID>688</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>1042</line>
 <column>34</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>;free(buf);}#elsefprintf(stderr,</prefix>
 <postfix>argv[0],argv[d-&gt;optind-1]);#endi</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=688</url>
</problem>
<problem>
 <problemID>689</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>1116</line>
 <column>30</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>;free(buf);}#elsefprintf(stderr,</prefix>
 <postfix>argv[0],c);#endif}d-&gt;optopt=c;if</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=689</url>
</problem>
<problem>
 <problemID>690</problemID>
 <file>cvs\zlib\gzio.c</file>
 <method>gzread</method>
 <line>413</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to Byte may cause loss of data</message>
 <anchor>516351173</anchor>
 <prefix>stream.avail_out&amp;&amp;s-&gt;back!=EOF){</prefix>
 <postfix>s-&gt;stream.next_out++;s-&gt;stream.a</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=690</url>
</problem>
<problem>
 <problemID>692</problemID>
 <file>cvs\src\hardlink.c</file>
 <method>find_checkedout_proc</method>
 <line>301</line>
 <column>9</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;hlinfo&apos; returned from call to function &apos;lookup_file_by_inode&apos; at line 289 may be NULL and may be dereferenced at line 301.</message>
 <anchor>-1458875327</anchor>
 <prefix>ll.*/return0;}hlinfo=link-&gt;data;</prefix>
 <postfix>{/*Thisfilehasbeencheckedoutrece</postfix>
 <trace>
  <traceBlock file="cvs\src\hardlink.c" method="find_checkedout_proc" id="0">
   <traceLine line="289" text="&apos;link-&gt;data&apos; is assigned the return value from function &apos;lookup_file_by_inode&apos;." type="E" refId="1"/>
   <traceLine line="300" text="hlinfo = link-&gt;data: copies &apos;link-&gt;data&apos; into &apos;hlinfo&apos;" type="E"/>
   <traceLine line="301" text="&apos;hlinfo&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hardlink.c" method="lookup_file_by_inode" id="1">
   <traceLine line="111" text="p== ( (void* )0) is true" type="C"/>
   <traceLine line="116" text="&apos;p-&gt;data&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="120" text="&apos;p-&gt;data&apos; is returned by &apos;lookup_file_by_inode&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=692</url>
</problem>
<problem>
 <problemID>695</problemID>
 <file>cvs\src\history.c</file>
 <method>history_write</method>
 <line>785</line>
 <column>21</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;cwd.desc&apos; at line 778 may be lost here.</message>
 <anchor>-1990331761</anchor>
 <prefix>edir=pwdir;if(restore_cwd(&amp;cwd))</prefix>
 <postfix>&quot;Failedtorestorecurrentdirectory</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="history_write" id="0">
   <traceLine line="778" text="Resource is acquired: &apos;cwd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="785" text="Resource is lost: &apos;cwd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=695</url>
</problem>
<problem>
 <problemID>698</problemID>
 <file>cvs\src\history.c</file>
 <method>history_write</method>
 <line>779</line>
 <column>21</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fd&apos; at line 744 may be lost here. Also there are 5 similar errors on line(s) 785, 881, 884.</message>
 <anchor>-1513087983</anchor>
 <prefix>;char*homedir;if(save_cwd(&amp;cwd))</prefix>
 <postfix>if(CVS_CHDIR(pwdir)&lt;0||(homedir=</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="history_write" id="0">
   <traceLine line="744" text="Resource is acquired: &apos;fd&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="779" text="Resource is lost: &apos;fd&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=698</url>
</problem>
<problem>
 <problemID>703</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>84</line>
 <column>15</column>
 <code>RNPD.DEREF</code>
 <message>Suspicious dereference of pointer &apos;current_parsed_root&apos; before NULL check at line 210</message>
 <anchor>-283764291</anchor>
 <prefix>UPPORT)||defined(SERVER_SUPPORT)</prefix>
 <postfix>&amp;&amp;config-&gt;ImportNewFilesToVendor</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="84" text="&apos;current_parsed_root&apos; is dereferenced." type="E"/>
   <traceLine line="210" text="&apos;current_parsed_root&apos; is checked for NULL." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=703</url>
</problem>
<problem>
 <problemID>704</problemID>
 <file>cvs\src\import.c</file>
 <method>add_rcs_file</method>
 <line>1346</line>
 <column>13</column>
 <code>PRECISION.LOSS.CALL</code>
 <message>Passing argument 2 to function expand_at_signs converts off_t to size_t and may cause loss of data. Also there are 2 similar errors on line(s) 1392, 1419.</message>
 <anchor>-483145068</anchor>
 <prefix>ngwhichdefinitelyfitsinmemory.*/</prefix>
 <postfix>gotowrite_error;}if(fprintf(fprc</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=704</url>
</problem>
<problem>
 <problemID>705</problemID>
 <file>cvs\src\import.c</file>
 <method>import_descend_dir</method>
 <line>1778</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;cwd.desc&apos; at line 1702 may be lost here.</message>
 <anchor>-1990331761</anchor>
 <prefix>ry[0]=&apos;\0&apos;;if(restore_cwd(&amp;cwd))</prefix>
 <postfix>cwd.name);free_cwd(&amp;cwd);returne</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import_descend_dir" id="0">
   <traceLine line="1702" text="Resource is acquired: &apos;cwd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="1778" text="Resource is lost: &apos;cwd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=705</url>
</problem>
<problem>
 <problemID>706</problemID>
 <file>cvs\src\import.c</file>
 <method>add_rcs_file</method>
 <line>1464</line>
 <column>5</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;dead_revision&apos; allocated through function &apos;xmalloc&apos; at line 1093 can be lost at line 1464. Also there is one similar error on line 1492.</message>
 <anchor>830019760</anchor>
 <prefix>f(free_opt!=NULL)free(free_opt);</prefix>
 <postfix>write_error:ierrno=errno;if(fclo</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="add_rcs_file" id="0">
   <traceLine line="1093" text="Dynamic memory stored in &apos;dead_revision&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="1107" text="End of scope for &apos;last_place&apos;" type="E"/>
   <traceLine line="1186" text="add_vhead!= ( (void* )0) is true" type="C"/>
   <traceLine line="1189" text="do_killnew is true" type="C"/>
   <traceLine line="1188" text="fprintf(fprcs, &quot;head     %s;\012&quot;, do_killnew?dead_revision:add_vhead) &lt;0 is false" type="C"/>
   <traceLine line="1201" text="!do_killnew is false" type="C"/>
   <traceLine line="1201" text="add_vbranch!= ( (void* )0) &amp;&amp; !do_killnew is false" type="C"/>
   <traceLine line="1260" text="do_killnew is true" type="C"/>
   <traceLine line="1283" text="add_vhead!= ( (void* )0) is true" type="C"/>
   <traceLine line="1355" text="do_killnew is true" type="C"/>
   <traceLine line="1377" text="add_vhead!= ( (void* )0) is true" type="C"/>
   <traceLine line="1404" text="!do_killnew is false" type="C"/>
   <traceLine line="1464" text="Dynamic memory stored in &apos;dead_revision&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=706</url>
</problem>
<problem>
 <problemID>718</problemID>
 <file>cvs\zlib\inftrees.c</file>
 <method>inflate_table</method>
 <line>298</line>
 <column>13</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;curr&apos; is never used after assignment</message>
 <anchor>3065394</anchor>
 <prefix>ow){drop=0;len=root;next=*table;</prefix>
 <postfix>this.bits=(unsignedchar)len;}/*p</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=718</url>
</problem>
<problem>
 <problemID>719</problemID>
 <file>cvs\zlib\inftrees.c</file>
 <method>inflate_table</method>
 <line>135</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to unsigned short int may cause loss of data</message>
 <anchor>864690109</anchor>
 <prefix>]=0;for(len=1;len&lt;MAXBITS;len++)</prefix>
 <postfix>/*sortsymbolsbylength,bysymbolor</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=719</url>
</problem>
<problem>
 <problemID>720</problemID>
 <file>cvs\src\lock.c</file>
 <method>lock_name</method>
 <line>172</line>
 <column>21</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;repository&apos; checked for NULL at line 148 may be dereferenced at line 172.</message>
 <anchor>-209088272</anchor>
 <prefix>rrent_parsed_root-&gt;directory)+1;</prefix>
 <postfix>short_repos=&quot;.&quot;;elseassert(short</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="lock_name" id="0">
   <traceLine line="148" text="&apos;repository&apos; is checked for NULL." type="E"/>
   <traceLine line="148" text="repository is false" type="C"/>
   <traceLine line="168" text="strncmp(repository, current_parsed_root-&gt;directory, strlen(current_parsed_root-&gt;directory) ) ==0 is true" type="C"/>
   <traceLine line="172" text="&apos;repository&apos; is dereferenced by passing argument 1 to function &apos;strcmp&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=720</url>
</problem>
<problem>
 <problemID>721</problemID>
 <file>cvs\src\lock.c</file>
 <method>lock_exists</method>
 <line>576</line>
 <column>13</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;lockdir&apos; by passing argument 1 to function &apos;strlen&apos; at line 576 before NULL check at line 637</message>
 <anchor>741755643</anchor>
 <prefix>ockdir=lock_name(repository,&quot;&quot;);</prefix>
 <postfix>do{if((dirp=CVS_OPENDIR(lockdir)</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="lock_exists" id="0">
   <traceLine line="576" text="&apos;lockdir&apos; is dereferenced by being passed as argument 1 to function &apos;strlen&apos;." type="E"/>
   <traceLine line="637" text="&apos;lockdir&apos; is checked for NULL." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=721</url>
</problem>
<problem>
 <problemID>722</problemID>
 <file>cvs\src\lock.c</file>
 <method>set_promotable_lock</method>
 <line>725</line>
 <column>32</column>
 <code>NPD.CHECK.CALL.MIGHT</code>
 <message>Pointer &apos;lock-&gt;repository&apos; checked for NULL at line 706 may be passed to function and may be dereferenced there by passing argument 1 to function &apos;promotable_exists&apos; at line 725.</message>
 <anchor>2029693327</anchor>
 <prefix>elock-makesuretherearenoothers*/</prefix>
 <postfix>{/*cleanupthelockdir*/clear_lock</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="set_promotable_lock" id="0">
   <traceLine line="706" text="&apos;lock-&gt;repository&apos; is checked for NULL." type="E"/>
   <traceLine line="706" text="lock-&gt;repository is false" type="C"/>
   <traceLine line="725" text="&apos;lock-&gt;repository&apos; is dereferenced by passing argument 1 to function &apos;promotable_exists&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\lock.c" method="promotable_exists" id="1">
   <traceLine line="679" text="&apos;repository&apos; is passed to function &apos;promotable_exists&apos;." type="E"/>
   <traceLine line="682" text="&apos;repository&apos; is dereferenced by passing argument 1 to function &apos;lock_exists&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\lock.c" method="lock_exists" id="2">
   <traceLine line="559" text="&apos;repository&apos; is passed to function &apos;lock_exists&apos;." type="E"/>
   <traceLine line="575" text="&apos;repository&apos; is dereferenced by passing argument 1 to function &apos;lock_name&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\lock.c" method="lock_name" id="3">
   <traceLine line="138" text="&apos;repository&apos; is passed to function &apos;lock_name&apos;." type="E"/>
   <traceLine line="148" text="repository is false" type="C"/>
   <traceLine line="168" text="&apos;repository&apos; is dereferenced by passing argument 1 to function &apos;strncmp&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=722</url>
</problem>
<problem>
 <problemID>723</problemID>
 <file>cvs\src\lock.c</file>
 <method>lock_list_promotably</method>
 <line>938</line>
 <column>21</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1068523501</anchor>
 <prefix>elocksset*/if(wait_repos!=NULL){</prefix>
 <postfix>free(wait_repos);}return0;defaul</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="lock_list_promotably" id="0">
   <traceLine line="936" text="Infeasible condition: &apos;wait_repos!= ( (void* )0)&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="938" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\lock.c" method="lock_list_promotably" id="1">
   <traceLine line="936" text="Inferred value &apos;wait_repos&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="936" text="Result of expression &apos;wait_repos != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=723</url>
</problem>
<problem>
 <problemID>724</problemID>
 <file>cvs\src\lock.c</file>
 <method>lock_name</method>
 <line>179</line>
 <column>37</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;name&apos; checked for NULL at line 148 may be dereferenced at line 179.</message>
 <anchor>1839376305</anchor>
 <prefix>g-&gt;lock_dir)+strlen(short_repos)</prefix>
 <postfix>+10);strcpy(retval,config-&gt;lock_</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="lock_name" id="0">
   <traceLine line="148" text="&apos;name&apos; is checked for NULL." type="E"/>
   <traceLine line="148" text="name is false" type="C"/>
   <traceLine line="179" text="&apos;name&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=724</url>
</problem>
<problem>
 <problemID>725</problemID>
 <file>cvs\src\lock.c</file>
 <method>set_lock</method>
 <line>1090</line>
 <column>20</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;lock-&gt;repository&apos; checked for NULL at line 1002 may be dereferenced at line 1090.</message>
 <anchor>-35496948</anchor>
 <prefix>)nanosleep(&amp;ts,NULL);continue;}}</prefix>
 <postfix>waited=1;}}/**Clearmasterlock.We</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="set_lock" id="0">
   <traceLine line="1002" text="&apos;lock-&gt;repository&apos; is checked for NULL." type="E"/>
   <traceLine line="1002" text="lock-&gt;repository is false" type="C"/>
   <traceLine line="1016" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="1021" text="mkdir(masterlock, 511) ==0 is false" type="C"/>
   <traceLine line="1078" text="!waited is true" type="C"/>
   <traceLine line="1090" text="&apos;lock-&gt;repository&apos; is dereferenced by passing argument 1 to function &apos;lock_wait&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\lock.c" method="lock_wait" id="1">
   <traceLine line="835" text="&apos;repos&apos; is passed to function &apos;lock_wait&apos;." type="E"/>
   <traceLine line="843" text="&apos;repos&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=725</url>
</problem>
<problem>
 <problemID>726</problemID>
 <file>cvs\src\lock.c</file>
 <method>set_lock</method>
 <line>1006</line>
 <column>29</column>
 <code>NPD.CHECK.CALL.MUST</code>
 <message>Pointer &apos;lock-&gt;repository&apos; checked for NULL at line 1002 will be passed to function and may be dereferenced there by passing argument 1 to function &apos;lock_name&apos; at line 1006.</message>
 <anchor>-1300479630</anchor>
 <prefix>sterlock!=NULL)free(masterlock);</prefix>
 <postfix>/**Notethatitisuptothecallersofs</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="set_lock" id="0">
   <traceLine line="1002" text="&apos;lock-&gt;repository&apos; is checked for NULL." type="E"/>
   <traceLine line="1002" text="lock-&gt;repository is false" type="C"/>
   <traceLine line="1006" text="&apos;lock-&gt;repository&apos; is dereferenced by passing argument 1 to function &apos;lock_name&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\lock.c" method="lock_name" id="1">
   <traceLine line="138" text="&apos;repository&apos; is passed to function &apos;lock_name&apos;." type="E"/>
   <traceLine line="148" text="repository is false" type="C"/>
   <traceLine line="168" text="&apos;repository&apos; is dereferenced by passing argument 1 to function &apos;strncmp&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=726</url>
</problem>
<problem>
 <problemID>727</problemID>
 <file>cvs\src\lock.c</file>
 <method>remove_lock_files</method>
 <line>335</line>
 <column>13</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;lock-&gt;repository&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 341.</message>
 <anchor>119116902</anchor>
 <prefix>ect();if(lock-&gt;free_repository){</prefix>
 <postfix>lock-&gt;free_repository=0;}lock-&gt;r</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="remove_lock_files" id="0">
   <traceLine line="341" text="&apos;lock-&gt;repository&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="335" text="&apos;lock-&gt;repository&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\lock.c" method="remove_lock_files" id="1">
   <traceLine line="284" text="Tracking &apos;lock-&gt;repository&apos;." type="E"/>
   <traceLine line="335" text="&apos;lock-&gt;repository&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=727</url>
</problem>
<problem>
 <problemID>728</problemID>
 <file>cvs\src\lock.c</file>
 <method>lock_name</method>
 <line>168</line>
 <column>26</column>
 <code>NPD.CHECK.CALL.MIGHT</code>
 <message>Pointer &apos;repository&apos; checked for NULL at line 148 may be passed to function and may be dereferenced there by passing argument 1 to function &apos;strncmp&apos; at line 168.</message>
 <anchor>277122432</anchor>
 <prefix>t_parsed_root-&gt;directory!=NULL);</prefix>
 <postfix>strlen(current_parsed_root-&gt;dire</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="lock_name" id="0">
   <traceLine line="148" text="&apos;repository&apos; is checked for NULL." type="E"/>
   <traceLine line="148" text="repository is false" type="C"/>
   <traceLine line="168" text="&apos;repository&apos; is dereferenced by passing argument 1 to function &apos;strncmp&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=728</url>
</problem>
<problem>
 <problemID>729</problemID>
 <file>cvs\src\lock.c</file>
 <method>lock_list_promotably</method>
 <line>923</line>
 <column>21</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>45678</anchor>
 <prefix>error){caseL_ERROR:/*RealError*/</prefix>
 <postfix>free(wait_repos);Lock_Cleanup();</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="lock_list_promotably" id="0">
   <traceLine line="922" text="Infeasible condition: &apos;lock_error==1&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="923" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\lock.c" method="lock_list_promotably" id="1">
   <traceLine line="920" text="Inferred value &apos;lock_error&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=729</url>
</problem>
<problem>
 <problemID>730</problemID>
 <file>cvs\src\lock.c</file>
 <method>lock_list_promotably</method>
 <line>930</line>
 <column>17</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>45678</anchor>
 <prefix>OCKED:/*Someonealreadyhadalock*/</prefix>
 <postfix>lock_wait(lock_error_repos);/*sl</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="lock_list_promotably" id="0">
   <traceLine line="929" text="Infeasible condition: &apos;lock_error==2&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="930" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\lock.c" method="lock_list_promotably" id="1">
   <traceLine line="920" text="Inferred value &apos;lock_error&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=730</url>
</problem>
<problem>
 <problemID>734</problemID>
 <file>cvs\src\log.c</file>
 <method>log_version</method>
 <line>1616</line>
 <column>36</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;pdel&apos; returned from call to function &apos;findnode&apos; at line 1590 may be NULL and may be dereferenced at line 1616. Also there is one similar error on line 1616.</message>
 <anchor>1789941970</anchor>
 <prefix>);cvs_output_tagged(&quot;text&quot;,&quot;-&quot;);</prefix>
 <postfix>}cvs_output_tagged(&quot;newline&quot;,NUL</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_version" id="0">
   <traceLine line="1587" text="!trunk is true" type="C"/>
   <traceLine line="1590" text="&apos;pdel&apos; is assigned the return value from function &apos;findnode&apos;." type="E" refId="1"/>
   <traceLine line="1616" text="&apos;pdel&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hash.c" method="findnode" id="1">
   <traceLine line="313" text="findnode" type="E"/>
   <traceLine line="318" text="&apos;findnode&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=734</url>
</problem>
<problem>
 <problemID>739</problemID>
 <file>cvs\src\logmsg.c</file>
 <method>verifymsg_proc</method>
 <line>929</line>
 <column>9</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;verifymsg_script&apos; is never used after assignment</message>
 <anchor>455141506</anchor>
 <prefix>g_script)free(verifymsg_script);</prefix>
 <postfix>error(0,0,&quot;verifymsgprocresolved</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=739</url>
</problem>
<problem>
 <problemID>749</problemID>
 <file>cvs\src\modules.c</file>
 <method>my_module</method>
 <line>301</line>
 <column>17</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;cwd.desc&apos; at line 289 may be lost here. Also there are 2 similar errors on line(s) 567, 665.</message>
 <anchor>-1990331761</anchor>
 <prefix>estarted.*/if(restore_cwd(&amp;cwd))</prefix>
 <postfix>cwd.name);free_cwd(&amp;cwd);cwd_sav</postfix>
 <trace>
  <traceBlock file="cvs\src\modules.c" method="my_module" id="0">
   <traceLine line="289" text="Resource is acquired: &apos;cwd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="301" text="Resource is lost: &apos;cwd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=749</url>
</problem>
<problem>
 <problemID>754</problemID>
 <file>cvs\src\patch.c</file>
 <method>patch_cleanup</method>
 <line>847</line>
 <column>22</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;temp&apos; may be out of bounds. Array &apos;temp&apos; of size 10 may use index value(s) 0..10</message>
 <anchor>3556308</anchor>
 <prefix>tuallyestablishasignalhandler.*/</prefix>
 <postfix>name=temp;break;}error(0,0,&quot;rece</postfix>
 <trace>
  <traceBlock file="cvs\src\patch.c" method="patch_cleanup" id="0">
   <traceLine line="809" text="Array &apos;temp&apos; size is 10." type="E"/>
   <traceLine line="847" text="&apos;temp&apos; is passed as an argument to function &apos;sprintf&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\patch.c" method="patch_cleanup" id="1">
   <traceLine line="847" text="Length of format string &quot;%d&quot; is 10." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\patch.c" method="patch_cleanup" id="2">
   <traceLine line="847" text="Length of conversion specification &apos;%d&apos; for argument &apos;sig&apos; is 10." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=754</url>
</problem>
<problem>
 <problemID>755</problemID>
 <file>cvs\src\patch.c</file>
 <method>patch_cleanup</method>
 <line>847</line>
 <column>13</column>
 <code>SV.STRBO.UNBOUND_SPRINTF</code>
 <message>function &apos;sprintf&apos; does not check buffer boundaries but outputs to the buffer &apos;temp&apos; of fixed size (10)</message>
 <anchor>2103845876</anchor>
 <prefix>tuallyestablishasignalhandler.*/</prefix>
 <postfix>name=temp;break;}error(0,0,&quot;rece</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="STR31-C"/>
  <taxonomy name="CWE" metaInf="120, 242"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=755</url>
</problem>
<problem>
 <problemID>758</problemID>
 <file>cvs\src\rcs.c</file>
 <method>rcsbuf_cache_open</method>
 <line>1932</line>
 <column>13</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from off_t to unsigned long int may cause loss of data</message>
 <anchor>28450574</anchor>
 <prefix>hed_rcsbuf.ptrend=rcsbuf_buffer;</prefix>
 <postfix>}*pfp=cached_rcsbuf.fp;/*WhenRCS</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=758</url>
</problem>
<problem>
 <problemID>763</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkin</method>
 <line>5008</line>
 <column>21</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;delta-&gt;date&apos; may be out of bounds. Array &apos;delta-&gt;date&apos; of size 50 may use index value(s) 0..65</message>
 <anchor>-2066364777</anchor>
 <prefix>delta-&gt;date=xmalloc(MAXDATELEN);</prefix>
 <postfix>ftm-&gt;tm_year+(ftm-&gt;tm_year&lt;100?0</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="0">
   <traceLine line="5007" text="Array &apos;delta-&gt;date&apos; of size 50 is retrieved from function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="5008" text="Array &apos;delta-&gt;date&apos; is defined." type="E"/>
   <traceLine line="5008" text="&apos;delta-&gt;date&apos; is passed as an argument to function &apos;sprintf&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="1">
   <traceLine line="5007" text="Result of expression &apos;$1*1&apos; is == 50." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="2">
   <traceLine line="5007" text="Function argument &apos;$1&apos; is == 50." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="3">
   <traceLine line="5008" text="Length of format string &quot;%02d.%02d.%02d.%02d.%02d.%02d&quot; is 65." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="4">
   <traceLine line="5008" text="Length of non-format characters is 5." type="E"/>
   <traceLine line="5008" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_year+ (ftm-&gt;tm_year&lt;100?0:1900)&apos; is 10." type="E"/>
   <traceLine line="5008" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_mon+1&apos; is 10." type="E"/>
   <traceLine line="5008" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_mday&apos; is 10." type="E"/>
   <traceLine line="5008" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_hour&apos; is 10." type="E"/>
   <traceLine line="5008" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_min&apos; is 10." type="E"/>
   <traceLine line="5008" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_sec&apos; is 10." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=763</url>
</problem>
<problem>
 <problemID>765</problemID>
 <file>cvs\src\rcs.c</file>
 <method>expand_keywords</method>
 <line>3867</line>
 <column>21</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;sub&apos; allocated through function &apos;xmalloc&apos; at line 3770 can be lost at line 3867</message>
 <anchor>471345818</anchor>
 <prefix>dduetoexcessivecommentleader.&quot;);</prefix>
 <postfix>}}else/*leader_len&lt;=config-&gt;MaxC</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="expand_keywords" id="0">
   <traceLine line="3770" text="Dynamic memory stored in &apos;sub&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="3814" text="strncmp(log, &quot;checked in with -k by &quot;, sizeof&quot;checked in with -k by &quot;-1) !=0 is true" type="C"/>
   <traceLine line="3811" text="keyword-&gt;expandto==KEYWORD_LOG&amp;&amp; (sizeof&quot;checked in with -k by &quot;&lt;=loglen||log== ( (void* )0) ||strncmp(log, &quot;checked in with -k by &quot;, sizeof&quot;checked in with -k by &quot;-1) !=0) is true" type="C"/>
   <traceLine line="3839" text="start&gt;buf&amp;&amp;start[ -1] != &apos;\n&apos; &amp;&amp;leader_len&lt;=xsum(config-&gt;MaxCommentLeaderLength, expand!=KFLAG_V?1:0) is false" type="C"/>
   <traceLine line="3839" text="Entering loop, because start&gt;buf&amp;&amp;start[ -1] != &apos;\n&apos; &amp;&amp;leader_len&lt;=xsum(config-&gt;MaxCommentLeaderLength, expand!=KFLAG_V?1:0) is true" type="C"/>
   <traceLine line="3856" text="leader_len&gt;config-&gt;MaxCommentLeaderLength is true" type="C"/>
   <traceLine line="3858" text="rcs-&gt;comment is false" type="C"/>
   <traceLine line="3858" text="config-&gt;UseArchiveCommentLeader&amp;&amp;rcs-&gt;comment is false" type="C"/>
   <traceLine line="3867" text="End of scope for &apos;sub&apos;. Memory leak." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=765</url>
</problem>
<problem>
 <problemID>766</problemID>
 <file>cvs\src\rcs.c</file>
 <method>putrcsfield_proc</method>
 <line>7797</line>
 <column>13</column>
 <code>PRECISION.LOSS.CALL</code>
 <message>Passing argument 2 to function expand_at_signs converts off_t to size_t and may cause loss of data</message>
 <anchor>-483145068</anchor>
 <prefix>ode-&gt;data,fp);else{putc(&apos;@&apos;,fp);</prefix>
 <postfix>putc(&apos;@&apos;,fp);}}/*desc,logandtext</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=766</url>
</problem>
<problem>
 <problemID>767</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_putadmin</method>
 <line>7890</line>
 <column>9</column>
 <code>PRECISION.LOSS.CALL</code>
 <message>Passing argument 2 to function expand_at_signs converts off_t to size_t and may cause loss of data</message>
 <anchor>-483145068</anchor>
 <prefix>mment){fprintf(fp,&quot;comment\t@&quot;);</prefix>
 <postfix>fputs(&quot;@;\n&quot;,fp);}if(rcs-&gt;expand</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=767</url>
</problem>
<problem>
 <problemID>768</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_putdesc</method>
 <line>7986</line>
 <column>13</column>
 <code>PRECISION.LOSS.CALL</code>
 <message>Passing argument 2 to function expand_at_signs converts off_t to size_t and may cause loss of data</message>
 <anchor>-483145068</anchor>
 <prefix>f_t)strlen(rcs-&gt;desc);if(len&gt;0){</prefix>
 <postfix>if(rcs-&gt;desc[len-1]!=&apos;\n&apos;)putc(&apos;</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=768</url>
</problem>
<problem>
 <problemID>769</problemID>
 <file>cvs\src\rcs.c</file>
 <method>putdeltatext</method>
 <line>8003</line>
 <column>9</column>
 <code>PRECISION.LOSS.CALL</code>
 <message>Passing argument 2 to function expand_at_signs converts off_t to size_t and may cause loss of data. Also there is one similar error on line 8013.</message>
 <anchor>-483145068</anchor>
 <prefix>=NULL){intloglen=strlen(d-&gt;log);</prefix>
 <postfix>if(d-&gt;log[loglen-1]!=&apos;\n&apos;)putc(&apos;</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=769</url>
</problem>
<problem>
 <problemID>776</problemID>
 <file>cvs\src\rcs.c</file>
 <method>freercsnode</method>
 <line>876</line>
 <column>5</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rnodep-&gt;print_path&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 873.</message>
 <anchor>-1080908786</anchor>
 <prefix>L;return;}free((*rnodep)-&gt;path);</prefix>
 <postfix>if((*rnodep)-&gt;head!=NULL)free((*</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="0">
   <traceLine line="873" text="&apos;*rnodep-&gt;print_path&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="876" text="&apos;*rnodep-&gt;print_path&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="1">
   <traceLine line="864" text="Tracking &apos;( *rnodep) -&gt;print_path&apos;." type="E"/>
   <traceLine line="876" text="&apos;( *rnodep) -&gt;print_path&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=776</url>
</problem>
<problem>
 <problemID>783</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_cmp_file</method>
 <line>5634</line>
 <column>25</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;use_file1&apos; checked for NULL at line 5569 may be dereferenced at line 5634.</message>
 <anchor>-1962097245</anchor>
 <prefix>tmpfile;}elseuse_file1=filename;</prefix>
 <postfix>if(fp==NULL)/*FIXME-update-dir:s</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_cmp_file" id="0">
   <traceLine line="5569" text="&apos;filename&apos; is checked for NULL." type="E"/>
   <traceLine line="5569" text="filename is false" type="C"/>
   <traceLine line="5578" text="expand!= ( (void* )0) &amp;&amp; ( * (char* ) (expand) == * (char* ) (&quot;b&quot;) &amp;&amp;strcmp( (expand),  (&quot;b&quot;) ) ==0) is false" type="C"/>
   <traceLine line="5618" text="rev2!= ( (void* )0) is false" type="C"/>
   <traceLine line="5632" text="use_file1 = filename: copies &apos;filename&apos; into &apos;use_file1&apos;" type="E"/>
   <traceLine line="5634" text="&apos;use_file1&apos; is dereferenced by passing argument 1 to function &apos;fopen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=783</url>
</problem>
<problem>
 <problemID>784</problemID>
 <file>cvs\src\rcs.c</file>
 <method>freercsnode</method>
 <line>875</line>
 <column>5</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rnodep-&gt;path&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 873.</message>
 <anchor>-798247172</anchor>
 <prefix>fcount!=0){*rnodep=NULL;return;}</prefix>
 <postfix>free((*rnodep)-&gt;print_path);if((</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="0">
   <traceLine line="873" text="&apos;*rnodep-&gt;path&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="875" text="&apos;*rnodep-&gt;path&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="1">
   <traceLine line="864" text="Tracking &apos;( *rnodep) -&gt;path&apos;." type="E"/>
   <traceLine line="875" text="&apos;( *rnodep) -&gt;path&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=784</url>
</problem>
<problem>
 <problemID>785</problemID>
 <file>cvs\src\rcs.c</file>
 <method>rcsbuf_cache_open</method>
 <line>1975</line>
 <column>9</column>
 <code>PRECISION.LOSS.CALL</code>
 <message>Passing argument 4 to function rcsbuf_open converts off_t to unsigned long int and may cause loss of data</message>
 <anchor>1262211853</anchor>
 <prefix>path);}#endif/*ifndefHAVE_MMAP*/</prefix>
 <postfix>#ifndefHAVE_MMAP}#endif/*ifndefH</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=785</url>
</problem>
<problem>
 <problemID>789</problemID>
 <file>cvs\lib\regex.c</file>
 <method>re_compile_pattern</method>
 <line>7884</line>
 <column>10</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>ptions,bufp);if(!ret)returnNULL;</prefix>
 <postfix>}#ifdef_LIBCweak_alias(__re_comp</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=789</url>
</problem>
<problem>
 <problemID>790</problemID>
 <file>cvs\lib\regex.c</file>
 <method>re_comp</method>
 <line>7912</line>
 <column>25</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>t;if(!s){if(!re_comp_buf.buffer)</prefix>
 <postfix>return0;}if(!re_comp_buf.buffer)</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=790</url>
</problem>
<problem>
 <problemID>791</problemID>
 <file>cvs\lib\regex.c</file>
 <method>re_comp</method>
 <line>7920</line>
 <column>25</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>00);if(re_comp_buf.buffer==NULL)</prefix>
 <postfix>+re_error_msgid_idx[(int)REG_ESP</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=791</url>
</problem>
<problem>
 <problemID>792</problemID>
 <file>cvs\lib\regex.c</file>
 <method>re_comp</method>
 <line>7926</line>
 <column>25</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>H);if(re_comp_buf.fastmap==NULL)</prefix>
 <postfix>+re_error_msgid_idx[(int)REG_ESP</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=792</url>
</problem>
<problem>
 <problemID>793</problemID>
 <file>cvs\lib\regex.c</file>
 <method>re_comp</method>
 <line>7947</line>
 <column>19</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>ing`const&apos;hereif!HAVE_LIBINTL.*/</prefix>
 <postfix>}int#ifdef_LIBCweak_function#end</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=793</url>
</problem>
<problem>
 <problemID>794</problemID>
 <file>cvs\lib\regex.c</file>
 <method>regerror</method>
 <line>8173</line>
 <column>9</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>.Dumpcoresowecanfixit.*/abort();</prefix>
 <postfix>msg_size=strlen(msg)+1;/*Include</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=794</url>
</problem>
<problem>
 <problemID>795</problemID>
 <file>cvs\lib\regex.c</file>
 <method>byte_regex_compile</method>
 <line>3764</line>
 <column>21</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from unsigned int to unsigned char may cause loss of data</message>
 <anchor>-470346183</anchor>
 <prefix>LE_STACK_TOP.inner_group_offset;</prefix>
 <postfix>BUF_PUSH_3(stop_memory,this_grou</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=795</url>
</problem>
<problem>
 <problemID>796</problemID>
 <file>cvs\lib\regex.c</file>
 <method>byte_regex_compile</method>
 <line>4061</line>
 <column>15</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to unsigned char may cause loss of data</message>
 <anchor>-961782108</anchor>
 <prefix>x&amp;RE_NO_BK_REFS)gotonormal_char;</prefix>
 <postfix>if(c1&gt;regnum)FREE_STACK_RETURN(R</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=796</url>
</problem>
<problem>
 <problemID>797</problemID>
 <file>cvs\lib\regex.c</file>
 <method>byte_store_op1</method>
 <line>4230</line>
 <column>3</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to unsigned char may cause loss of data</message>
 <anchor>-961782108</anchor>
 <prefix>_T*loc,intarg){*loc=(UCHAR_T)op;</prefix>
 <postfix>}/*Like`store_op1&apos;,butfortwotwo-</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=797</url>
</problem>
<problem>
 <problemID>798</problemID>
 <file>cvs\lib\regex.c</file>
 <method>byte_store_op2</method>
 <line>4241</line>
 <column>3</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to unsigned char may cause loss of data. Also there is one similar error on line 4242.</message>
 <anchor>-961782108</anchor>
 <prefix>targ1,intarg2){*loc=(UCHAR_T)op;</prefix>
 <postfix>STORE_NUMBER(loc+1+OFFSET_ADDRES</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=798</url>
</problem>
<problem>
 <problemID>799</problemID>
 <file>cvs\lib\regex.c</file>
 <method>byte_re_match_2_internal</method>
 <line>7294</line>
 <column>16</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to unsigned char may cause loss of data. Also there are 2 similar errors on line(s) 7331, 7359.</message>
 <anchor>-961782108</anchor>
 <prefix>){mcnt--;p+=OFFSET_ADDRESS_SIZE;</prefix>
 <postfix>#ifdef_LIBCDEBUG_PRINT3(&quot;Setting</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=799</url>
</problem>
<problem>
 <problemID>800</problemID>
 <file>cvs\src\release.c</file>
 <method>release</method>
 <line>163</line>
 <column>21</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;cwd.desc&apos; at line 141 may be lost here. Also there are 14 similar errors on line(s) 163, 190, 212, 231, 247, 262, 301, 308.</message>
 <anchor>-1990331761</anchor>
 <prefix>&quot;,thisarg);if(restore_cwd(&amp;cwd))</prefix>
 <postfix>&quot;Failedtorestorecurrentdirectory</postfix>
 <trace>
  <traceBlock file="cvs\src\release.c" method="release" id="0">
   <traceLine line="141" text="Resource is acquired: &apos;cwd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="200" text="line_length&lt;0 is true" type="C"/>
   <traceLine line="163" text="Resource is lost: &apos;cwd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=800</url>
</problem>
<problem>
 <problemID>847</problemID>
 <file>cvs\src\tag.c</file>
 <method>tag_check_valid</method>
 <line>1570</line>
 <column>17</column>
 <code>UNINIT.STACK.MIGHT</code>
 <message>&apos;cwd.name&apos; might be used uninitialized in this function. Also there is one similar error on line 1572.</message>
 <anchor>1887057737</anchor>
 <prefix>[0]!=&apos;\0&apos;){if(restore_cwd(&amp;cwd))</prefix>
 <postfix>cwd.name);free_cwd(&amp;cwd);}if(!th</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="tag_check_valid" id="0">
   <traceLine line="1453" text="&apos;cwd.name&apos; is declared." type="E"/>
   <traceLine line="1461" text="repository is true" type="C"/>
   <traceLine line="1462" text="valid is false" type="C"/>
   <traceLine line="1553" text="repository== ( (void* )0) is false" type="C"/>
   <traceLine line="1553" text="repository[0] == &apos;\0&apos; is true" type="C"/>
   <traceLine line="1553" text="repository== ( (void* )0) ||repository[0] == &apos;\0&apos; is true" type="C"/>
   <traceLine line="1569" text="passing &apos;&amp;cwd&apos; to &apos;restore_cwd&apos; does not initialize &apos;cwd.name&apos;" type="E"/>
   <traceLine line="1570" text="&apos;cwd.name&apos; is used, but is uninitialized." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP33-C"/>
  <taxonomy name="CWE" metaInf="457"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=847</url>
</problem>
<problem>
 <problemID>848</problemID>
 <file>cvs\src\tag.c</file>
 <method>tag_check_valid</method>
 <line>1605</line>
 <column>19</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-258477750</anchor>
 <prefix>ore(db,mytag,val,DBM_REPLACE)&lt;0)</prefix>
 <postfix>valtags_filename);dbm_close(db);</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="tag_check_valid" id="0">
   <traceLine line="1604" text="Infeasible condition: &apos;mydbm_store(db, mytag, val, 1) &lt;0&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="1605" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\tag.c" method="tag_check_valid" id="1">
   <traceLine line="1604" text="Inferred value &apos;mydbm_store(db, mytag, val, 1)&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="1604" text="Result of expression &apos;mydbm_store(db, mytag, val, 1) &lt; 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=848</url>
</problem>
<problem>
 <problemID>850</problemID>
 <file>cvs\src\tag.c</file>
 <method>tag_check_valid</method>
 <line>1473</line>
 <column>34</column>
 <code>NPD.CHECK.MUST</code>
 <message>Pointer &apos;name&apos; checked for NULL at line 1460 will be dereferenced at line 1473.</message>
 <anchor>1839376305</anchor>
 <prefix>agsrequireonlyasyntacticcheck.*/</prefix>
 <postfix>{/*insertisnotpossiblefornumeric</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="tag_check_valid" id="0">
   <traceLine line="1460" text="&apos;name&apos; is checked for NULL." type="E"/>
   <traceLine line="1460" text="name is false" type="C"/>
   <traceLine line="1473" text="&apos;name&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=850</url>
</problem>
<problem>
 <problemID>851</problemID>
 <file>cvs\src\tag.c</file>
 <method>tag_check_valid</method>
 <line>1480</line>
 <column>77</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>ev(name))return;elseerror(1,0,&quot;\</prefix>
 <postfix>}/*Specialtagsarealwaysvalid.*/i</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="tag_check_valid" id="0">
   <traceLine line="1479" text="Call to &apos;error(1, 0, &quot;Numeric tag %s invalid.  Numeric tags should be of the form X[.X]...&quot;, name)&apos; never returns." type="E"/>
   <traceLine line="1480" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=851</url>
</problem>
<problem>
 <problemID>856</problemID>
 <file>cvs\src\watch.c</file>
 <method>watch_modify_watchers</method>
 <line>94</line>
 <column>5</column>
 <code>RNPD.DEREF</code>
 <message>Suspicious dereference of pointer &apos;mynewattr&apos; before NULL check at line 211</message>
 <anchor>-797332264</anchor>
 <prefix>newattr=xmalloc(mynewattr_size);</prefix>
 <postfix>add_edit_pending=what-&gt;adding&amp;&amp;w</postfix>
 <trace>
  <traceBlock file="cvs\src\watch.c" method="watch_modify_watchers" id="0">
   <traceLine line="94" text="&apos;mynewattr&apos; is dereferenced." type="E"/>
   <traceLine line="211" text="&apos;mynewattr&apos; is checked for NULL." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=856</url>
</problem>
<problem>
 <problemID>857</problemID>
 <file>cvs\lib\yesno.c</file>
 <method>yesno</method>
 <line>52</line>
 <column>7</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>len&lt;127)||(len==0&amp;&amp;!isspace(c)))</prefix>
 <postfix>buf[len]=&apos;\0&apos;;returnrpmatch(buf)</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=857</url>
</problem>
<problem>
 <problemID>858</problemID>
 <file>cvs\zlib\zutil.c</file>
 <method>zlibCompileFlags</method>
 <line>44</line>
 <column>17</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>45678</anchor>
 <prefix>ase2:break;case4:flags+=1;break;</prefix>
 <postfix>default:flags+=3;}switch(sizeof(</postfix>
 <trace>
  <traceBlock file="cvs\zlib\zutil.c" method="zlibCompileFlags" id="0">
   <traceLine line="44" text="Infeasible condition: &apos;sizeof(uInt)==8&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="44" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\zlib\zutil.c" method="zlibCompileFlags" id="1">
   <traceLine line="41" text="Constant expression &apos;sizeof(unsigned int)&apos; is &apos;== 4&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=858</url>
</problem>
<problem>
 <problemID>859</problemID>
 <file>cvs\zlib\zutil.c</file>
 <method>zlibCompileFlags</method>
 <line>50</line>
 <column>17</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>45678</anchor>
 <prefix>2:break;case4:flags+=1&lt;&lt;2;break;</prefix>
 <postfix>default:flags+=3&lt;&lt;2;}switch(size</postfix>
 <trace>
  <traceBlock file="cvs\zlib\zutil.c" method="zlibCompileFlags" id="0">
   <traceLine line="50" text="Infeasible condition: &apos;sizeof(uLong)==8&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="50" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\zlib\zutil.c" method="zlibCompileFlags" id="1">
   <traceLine line="47" text="Constant expression &apos;sizeof(unsigned long int)&apos; is &apos;== 4&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=859</url>
</problem>
<problem>
 <problemID>860</problemID>
 <file>cvs\zlib\zutil.c</file>
 <method>zlibCompileFlags</method>
 <line>56</line>
 <column>17</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>45678</anchor>
 <prefix>2:break;case4:flags+=1&lt;&lt;4;break;</prefix>
 <postfix>default:flags+=3&lt;&lt;4;}switch(size</postfix>
 <trace>
  <traceBlock file="cvs\zlib\zutil.c" method="zlibCompileFlags" id="0">
   <traceLine line="56" text="Infeasible condition: &apos;sizeof(voidpf)==8&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="56" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\zlib\zutil.c" method="zlibCompileFlags" id="1">
   <traceLine line="53" text="Constant expression &apos;sizeof(void*)&apos; is &apos;== 4&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=860</url>
</problem>
<problem>
 <problemID>861</problemID>
 <file>cvs\zlib\zutil.c</file>
 <method>zlibCompileFlags</method>
 <line>62</line>
 <column>17</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>45678</anchor>
 <prefix>2:break;case4:flags+=1&lt;&lt;6;break;</prefix>
 <postfix>default:flags+=3&lt;&lt;6;}#ifdefDEBUG</postfix>
 <trace>
  <traceBlock file="cvs\zlib\zutil.c" method="zlibCompileFlags" id="0">
   <traceLine line="62" text="Infeasible condition: &apos;sizeof(long)==8&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="62" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\zlib\zutil.c" method="zlibCompileFlags" id="1">
   <traceLine line="59" text="Constant expression &apos;sizeof(long int)&apos; is &apos;== 4&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=861</url>
</problem>
<problem>
 <problemID>862</problemID>
 <file>cvs\src\diff.c</file>
 <method>diff_fileproc</method>
 <line>699</line>
 <column>41</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;vers&apos; checked for NULL at line 661 may be dereferenced at line 699. Also there are 4 similar errors on line(s) 703, 730, 731, 745.</message>
 <anchor>-1986887722</anchor>
 <prefix>{intretcode;tmp=cvs_temp_name();</prefix>
 <postfix>use_rev2,(char*)NULL,(*options?o</postfix>
 <trace>
  <traceBlock file="cvs\src\diff.c" method="diff_fileproc" id="0">
   <traceLine line="657" text="empty_file==DIFF_REMOVED is false" type="C"/>
   <traceLine line="661" text="&apos;vers&apos; is checked for NULL." type="E"/>
   <traceLine line="661" text="vers is false" type="C"/>
   <traceLine line="664" text="empty_file==DIFF_ADDED is true" type="C"/>
   <traceLine line="672" text="empty_file==DIFF_ADDED||empty_file==DIFF_REMOVED is true" type="C"/>
   <traceLine line="701" text="*options is true" type="C"/>
   <traceLine line="699" text="&apos;vers&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=862</url>
</problem>
<problem>
 <problemID>865</problemID>
 <file>cvs\src\diff.c</file>
 <method>diff_fileproc</method>
 <line>717</line>
 <column>37</column>
 <code>NPD.CHECK.MUST</code>
 <message>Pointer &apos;vers&apos; checked for NULL at line 668 will be dereferenced at line 717. Also there are 3 similar errors on line(s) 719, 730, 731.</message>
 <anchor>-1986887722</anchor>
 <prefix>{intretcode;tmp=cvs_temp_name();</prefix>
 <postfix>use_rev1,(char*)NULL,*options?op</postfix>
 <trace>
  <traceBlock file="cvs\src\diff.c" method="diff_fileproc" id="0">
   <traceLine line="664" text="empty_file==DIFF_ADDED is false" type="C"/>
   <traceLine line="668" text="&apos;vers&apos; is checked for NULL." type="E"/>
   <traceLine line="668" text="vers is false" type="C"/>
   <traceLine line="672" text="empty_file==DIFF_ADDED is false" type="C"/>
   <traceLine line="719" text="*options is true" type="C"/>
   <traceLine line="717" text="&apos;vers&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=865</url>
</problem>
<problem>
 <problemID>867</problemID>
 <file>cvs\lib\getndelim2.c</file>
 <method>getndelim2</method>
 <line>136</line>
 <column>11</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>;elsebreak;}if(nbytes_avail&gt;=2){</prefix>
 <postfix>nbytes_avail--;}if(c==delim1||c=</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=867</url>
</problem>
<problem>
 <problemID>868</problemID>
 <file>cvs\lib\gettime.c</file>
 <method>gettime</method>
 <line>49</line>
 <column>12</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>544057659</anchor>
 <prefix>v.tv_usec*1000;return0;}}#endif{</prefix>
 <postfix>if(t!=(time_t)-1){ts-&gt;tv_sec=t;t</postfix>
 <trace>
  <traceBlock file="cvs\lib\gettime.c" method="gettime" id="0">
   <traceLine line="39" text="Infeasible condition: &apos;gettimeofday( &amp;tv, 0) ==0&apos; cannot be false." type="E" refId="1"/>
   <traceLine line="49" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\gettime.c" method="gettime" id="1">
   <traceLine line="39" text="Inferred value &apos;gettimeofday(&amp;tv, 0)&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="39" text="Result of expression &apos;gettimeofday(&amp;tv, 0) != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=868</url>
</problem>
<problem>
 <problemID>869</problemID>
 <file>cvs\src\log-buffer.c</file>
 <method>log_buffer_initialize</method>
 <line>203</line>
 <column>5</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;lb-&gt;log&apos; at line 179 may be lost here.</message>
 <anchor>1865464437</anchor>
 <prefix>}buf_append_buffer(retbuf,buf);}</prefix>
 <postfix>}/*Theinputfunctionforalogbuffer</postfix>
 <trace>
  <traceBlock file="cvs\src\log-buffer.c" method="log_buffer_initialize" id="0">
   <traceLine line="179" text="!lb-&gt;log is true" type="C"/>
   <traceLine line="179" text="Resource is acquired: &apos;lb-&gt;log&apos; is accessed via 1 argument of the call to function &apos;log_buffer_force_file&apos;." type="E" refId="1"/>
   <traceLine line="180" text="lb-&gt;log is true" type="C"/>
   <traceLine line="203" text="Resource is lost: &apos;lb-&gt;log&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\log-buffer.c" method="log_buffer_force_file" id="1">
   <traceLine line="86" text="Resource is acquired: &apos;lb-&gt;log&apos; is assigned to return value of the call to function &apos;cvs_temp_file&apos;." type="E" refId="2"/>
   <traceLine line="87" text="!lb-&gt;log is false" type="C"/>
   <traceLine line="89" text="Resource descriptor is returned: &apos;lb-&gt;log&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="cvs_temp_file" id="2">
   <traceLine line="741" text="fd== -1 is false" type="C"/>
   <traceLine line="742" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fdopen&apos;." type="E"/>
   <traceLine line="742" text="(fp=fdopen(fd, &quot;w+&quot; ) ) == ( (void* )0) is false" type="C"/>
   <traceLine line="755" text="fp== ( (void* )0) is false" type="C"/>
   <traceLine line="772" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=869</url>
</problem>
<problem>
 <problemID>870</problemID>
 <file>cvs\src\log-buffer.c</file>
 <method>setup_logfiles</method>
 <line>506</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 502 may be lost here.</message>
 <anchor>-332821330</anchor>
 <prefix>ingto-serverlogfile%s&quot;,buf);else</prefix>
 <postfix>#ifdefPROXY_SUPPORTfalse,0,#endi</postfix>
 <trace>
  <traceBlock file="cvs\src\log-buffer.c" method="setup_logfiles" id="0">
   <traceLine line="502" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;open_file&apos;." type="E" refId="1"/>
   <traceLine line="506" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="open_file" id="1">
   <traceLine line="275" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="277" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=870</url>
</problem>
<problem>
 <problemID>871</problemID>
 <file>cvs\src\log-buffer.c</file>
 <method>log_buffer_rewind</method>
 <line>398</line>
 <column>5</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fd&apos; at line 377 may be lost here.</message>
 <anchor>-1513087983</anchor>
 <prefix>b-&gt;back_buf=NULL;buf_free(tmp);}</prefix>
 <postfix>}#endif/*PROXY_SUPPORT*//*Disabl</postfix>
 <trace>
  <traceBlock file="cvs\src\log-buffer.c" method="log_buffer_rewind" id="0">
   <traceLine line="361" text="lb-&gt;log is false" type="C"/>
   <traceLine line="377" text="Resource is acquired: &apos;fd&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="398" text="Resource is lost: &apos;fd&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=871</url>
</problem>
<problem>
 <problemID>872</problemID>
 <file>cvs\src\log-buffer.c</file>
 <method>setup_logfiles</method>
 <line>504</line>
 <column>19</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1012791648</anchor>
 <prefix>open_file(buf,&quot;wb&quot;);if(fp==NULL)</prefix>
 <postfix>else*to_server_p=log_buffer_init</postfix>
 <trace>
  <traceBlock file="cvs\src\log-buffer.c" method="setup_logfiles" id="0">
   <traceLine line="503" text="Infeasible condition: &apos;fp== ( (void* )0)&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="504" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\log-buffer.c" method="setup_logfiles" id="1">
   <traceLine line="503" text="Inferred value &apos;fp&apos; is &apos;!= 0&apos;" type="E"/>
   <traceLine line="503" text="Result of expression &apos;fp != 0&apos; is &apos;== 1&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=872</url>
</problem>
<problem>
 <problemID>873</problemID>
 <file>cvs\src\ls.c</file>
 <method>ls_direntproc</method>
 <line>516</line>
 <column>13</column>
 <code>UNINIT.STACK.MIGHT</code>
 <message>&apos;nonbranch&apos; might be used uninitialized in this function.</message>
 <anchor>682017455</anchor>
 <prefix>update_dir);make_directory(dir);</prefix>
 <postfix>nonbranch,0,0);Subdir_Register(e</postfix>
 <trace>
  <traceBlock file="cvs\src\ls.c" method="ls_direntproc" id="0">
   <traceLine line="505" text="&apos;nonbranch&apos; is declared." type="E"/>
   <traceLine line="506" text="show_date== ( (void* )0) is false" type="C"/>
   <traceLine line="506" text="show_tag== ( (void* )0) &amp;&amp;show_date== ( (void* )0) is false" type="C"/>
   <traceLine line="516" text="&apos;nonbranch&apos; is used, but is uninitialized." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP33-C"/>
  <taxonomy name="CWE" metaInf="457"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=873</url>
</problem>
<problem>
 <problemID>877</problemID>
 <file>cvs\src\ls.c</file>
 <method>ls</method>
 <line>245</line>
 <column>62</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 8 to function &apos;ls_proc&apos; at line 245.</message>
 <anchor>188625681</anchor>
 <prefix>(topmod);}close_module(db);}else</prefix>
 <postfix>returnerr;}structlong_format_dat</postfix>
 <trace>
  <traceBlock file="cvs\src\ls.c" method="ls" id="0">
   <traceLine line="245" text="NULL constant is dereferenced by passing argument 8 to function &apos;ls_proc&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\ls.c" method="ls_proc" id="1">
   <traceLine line="564" text="&apos;mname&apos; is passed to function &apos;ls_proc&apos;." type="E"/>
   <traceLine line="578" text="&apos;mname&apos; is dereferenced by passing argument 1 to function &apos;strcmp&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=877</url>
</problem>
<problem>
 <problemID>878</problemID>
 <file>cvs\lib\printf-args.c</file>
 <method>printf_fetchargs</method>
 <line>38</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to signed char may cause loss of data. Also there are 3 similar errors on line(s) 41, 44, 47.</message>
 <anchor>952351645</anchor>
 <prefix>switch(ap-&gt;type){caseTYPE_SCHAR:</prefix>
 <postfix>break;caseTYPE_UCHAR:ap-&gt;a.a_uch</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=878</url>
</problem>
<problem>
 <problemID>879</problemID>
 <file>cvs\lib\printf-parse.c</file>
 <method>printf_parse</method>
 <line>339</line>
 <column>32</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>679732698</anchor>
 <prefix>/*intmax_t=longlong*/flags+=16;}</prefix>
 <postfix>{/*intmax_t=long*/flags+=8;}cp++</postfix>
 <trace>
  <traceBlock file="cvs\lib\printf-parse.c" method="printf_parse" id="0">
   <traceLine line="334" text="Infeasible condition: &apos;sizeof(intmax_t) &gt;sizeof(long)&apos; cannot be false." type="E" refId="1"/>
   <traceLine line="339" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\printf-parse.c" method="printf_parse" id="1">
   <traceLine line="334" text="Constant expression &apos;sizeof(long long int)&apos; is &apos;== 8&apos;" type="E"/>
   <traceLine line="334" text="Constant expression &apos;sizeof(long int)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="334" text="Result of expression &apos;sizeof(long long int) &gt; sizeof(long int)&apos; is &apos;== 1&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=879</url>
</problem>
<problem>
 <problemID>880</problemID>
 <file>cvs\lib\printf-parse.c</file>
 <method>printf_parse</method>
 <line>374</line>
 <column>27</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>1915336206</anchor>
 <prefix>&gt;sizeof(int)){/*ptrdiff_t=long*/</prefix>
 <postfix>}cp++;}elsebreak;}/*Readtheconve</postfix>
 <trace>
  <traceBlock file="cvs\lib\printf-parse.c" method="printf_parse" id="0">
   <traceLine line="371" text="Infeasible condition: &apos;sizeof(ptrdiff_t) &gt;sizeof(int)&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="374" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\printf-parse.c" method="printf_parse" id="1">
   <traceLine line="371" text="Constant expression &apos;sizeof(int)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="371" text="Constant expression &apos;sizeof(int)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="371" text="Result of expression &apos;sizeof(int) &gt; sizeof(int)&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=880</url>
</problem>
<problem>
 <problemID>881</problemID>
 <file>cvs\lib\printf-parse.c</file>
 <method>printf_parse</method>
 <line>369</line>
 <column>27</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>1559899138</anchor>
 <prefix>of(long)){/*ptrdiff_t=longlong*/</prefix>
 <postfix>}elseif(sizeof(ptrdiff_t)&gt;sizeof</postfix>
 <trace>
  <traceBlock file="cvs\lib\printf-parse.c" method="printf_parse" id="0">
   <traceLine line="366" text="Infeasible condition: &apos;sizeof(ptrdiff_t) &gt;sizeof(long)&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="369" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\printf-parse.c" method="printf_parse" id="1">
   <traceLine line="366" text="Constant expression &apos;sizeof(int)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="366" text="Constant expression &apos;sizeof(long int)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="366" text="Result of expression &apos;sizeof(int) &gt; sizeof(long int)&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=881</url>
</problem>
<problem>
 <problemID>882</problemID>
 <file>cvs\lib\printf-parse.c</file>
 <method>printf_parse</method>
 <line>360</line>
 <column>27</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1362127813</anchor>
 <prefix>_t)&gt;sizeof(int)){/*size_t=long*/</prefix>
 <postfix>}cp++;}elseif(*cp==&apos;t&apos;){if(sizeo</postfix>
 <trace>
  <traceBlock file="cvs\lib\printf-parse.c" method="printf_parse" id="0">
   <traceLine line="357" text="Infeasible condition: &apos;sizeof(size_t) &gt;sizeof(int)&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="360" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\printf-parse.c" method="printf_parse" id="1">
   <traceLine line="357" text="Constant expression &apos;sizeof(unsigned int)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="357" text="Constant expression &apos;sizeof(int)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="357" text="Result of expression &apos;sizeof(unsigned int) &gt; sizeof(int)&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=882</url>
</problem>
<problem>
 <problemID>883</problemID>
 <file>cvs\lib\printf-parse.c</file>
 <method>printf_parse</method>
 <line>355</line>
 <column>27</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>460475169</anchor>
 <prefix>izeof(long)){/*size_t=longlong*/</prefix>
 <postfix>}elseif(sizeof(size_t)&gt;sizeof(in</postfix>
 <trace>
  <traceBlock file="cvs\lib\printf-parse.c" method="printf_parse" id="0">
   <traceLine line="352" text="Infeasible condition: &apos;sizeof(size_t) &gt;sizeof(long)&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="355" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\printf-parse.c" method="printf_parse" id="1">
   <traceLine line="352" text="Constant expression &apos;sizeof(unsigned int)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="352" text="Constant expression &apos;sizeof(long int)&apos; is &apos;== 4&apos;" type="E"/>
   <traceLine line="352" text="Result of expression &apos;sizeof(unsigned int) &gt; sizeof(long int)&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=883</url>
</problem>
<problem>
 <problemID>884</problemID>
 <file>cvs\lib\rpmatch.c</file>
 <method>rpmatch</method>
 <line>70</line>
 <column>36</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>aticregex_tyesre,nore;intresult;</prefix>
 <postfix>&amp;yesexpr,&amp;yesre))?result:try(res</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=884</url>
</problem>
<problem>
 <problemID>885</problemID>
 <file>cvs\lib\rpmatch.c</file>
 <method>rpmatch</method>
 <line>73</line>
 <column>28</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>]&quot;),1,0,&amp;yesexpr,&amp;yesre))?result</prefix>
 <postfix>#else/*Testagainst&quot;^[yY]&quot;and&quot;^[n</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=885</url>
</problem>
<problem>
 <problemID>886</problemID>
 <file>cvs\lib\rpmatch.c</file>
 <method>try</method>
 <line>43</line>
 <column>11</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;re-&gt;fastmap&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 53.</message>
 <anchor>-1490142244</anchor>
 <prefix>){/*Freetheoldcompiledpattern.*/</prefix>
 <postfix>*lastp=NULL;}/*Compilethepattern</postfix>
 <trace>
  <traceBlock file="cvs\lib\rpmatch.c" method="try" id="0">
   <traceLine line="53" text="&apos;re-&gt;fastmap&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="43" text="&apos;re-&gt;fastmap&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\lib\rpmatch.c" method="try" id="1">
   <traceLine line="34" text="Tracking &apos;re-&gt;fastmap&apos;." type="E"/>
   <traceLine line="43" text="&apos;re-&gt;fastmap&apos; is freed by passing &apos;re&apos; to &apos;regfree&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\regex.c" method="regfree" id="2">
   <traceLine line="8202" text="Tracking &apos;preg-&gt;fastmap&apos;." type="E"/>
   <traceLine line="8212" text="&apos;preg-&gt;fastmap&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=886</url>
</problem>
<problem>
 <problemID>887</problemID>
 <file>cvs\lib\rpmatch.c</file>
 <method>try</method>
 <line>43</line>
 <column>11</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;re-&gt;buffer&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 53.</message>
 <anchor>132578404</anchor>
 <prefix>){/*Freetheoldcompiledpattern.*/</prefix>
 <postfix>*lastp=NULL;}/*Compilethepattern</postfix>
 <trace>
  <traceBlock file="cvs\lib\rpmatch.c" method="try" id="0">
   <traceLine line="53" text="&apos;re-&gt;buffer&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="43" text="&apos;re-&gt;buffer&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\lib\rpmatch.c" method="try" id="1">
   <traceLine line="34" text="Tracking &apos;re-&gt;buffer&apos;." type="E"/>
   <traceLine line="43" text="&apos;re-&gt;buffer&apos; is freed by passing &apos;re&apos; to &apos;regfree&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\regex.c" method="regfree" id="2">
   <traceLine line="8202" text="Tracking &apos;preg-&gt;buffer&apos;." type="E"/>
   <traceLine line="8205" text="&apos;preg-&gt;buffer&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=887</url>
</problem>
<problem>
 <problemID>888</problemID>
 <file>cvs\lib\rpmatch.c</file>
 <method>try</method>
 <line>43</line>
 <column>11</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;re-&gt;translate&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 53.</message>
 <anchor>-735254870</anchor>
 <prefix>){/*Freetheoldcompiledpattern.*/</prefix>
 <postfix>*lastp=NULL;}/*Compilethepattern</postfix>
 <trace>
  <traceBlock file="cvs\lib\rpmatch.c" method="try" id="0">
   <traceLine line="53" text="&apos;re-&gt;translate&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="43" text="&apos;re-&gt;translate&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\lib\rpmatch.c" method="try" id="1">
   <traceLine line="34" text="Tracking &apos;re-&gt;translate&apos;." type="E"/>
   <traceLine line="43" text="&apos;re-&gt;translate&apos; is freed by passing &apos;re&apos; to &apos;regfree&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\regex.c" method="regfree" id="2">
   <traceLine line="8202" text="Tracking &apos;preg-&gt;translate&apos;." type="E"/>
   <traceLine line="8217" text="&apos;preg-&gt;translate&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=888</url>
</problem>
<problem>
 <problemID>890</problemID>
 <file>cvs\lib\strftime.c</file>
 <method>nstrftime</method>
 <line>1081</line>
 <column>25</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>506889205</anchor>
 <prefix>inusinfinity.*/if(0&lt;-1%10&amp;&amp;d&lt;0){</prefix>
 <postfix>d+=10;}}*--bufp=d+L_(&apos;0&apos;);}while</postfix>
 <trace>
  <traceBlock file="cvs\lib\strftime.c" method="nstrftime" id="0">
   <traceLine line="1079" text="Infeasible condition: &apos;0&lt; -1%10&amp;&amp;d&lt;0&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="1081" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\strftime.c" method="nstrftime" id="1">
   <traceLine line="1079" text="Infeasible condition: &apos;0&lt; -1%10&apos; cannot be true." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\strftime.c" method="nstrftime" id="2">
   <traceLine line="1079" text="Result of expression &apos;false != false&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=890</url>
</problem>
<problem>
 <problemID>891</problemID>
 <file>cvs\lib\strftime.c</file>
 <method>nstrftime</method>
 <line>903</line>
 <column>39</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;buf+ (sizeof(buf) /sizeof(buf[0] ) ) -bufp&apos; may be out of bounds. Array &apos;buf+ (sizeof(buf) /sizeof(buf[0] ) ) -bufp&apos; of size 11 may use index value(s) -1</message>
 <anchor>-157190068</anchor>
 <prefix>--bufp=L_(&apos;-&apos;);if(pad!=L_(&apos;-&apos;)){</prefix>
 <postfix>-bufp);if(padding&gt;0){if(pad==L_(</postfix>
 <trace>
  <traceBlock file="cvs\lib\strftime.c" method="nstrftime" id="0">
   <traceLine line="455" text="ut is false" type="C"/>
   <traceLine line="470" text="hour12&gt;12 is true" type="C"/>
   <traceLine line="498" text="Break statement causes loop exit." type="E" refId="1"/>
   <traceLine line="583" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="605" text="Break statement causes loop exit." type="E" refId="2"/>
   <traceLine line="615" text="width==2147483647/10 is false" type="C"/>
   <traceLine line="614" text="width&gt;2147483647/10|| (width==2147483647/10&amp;&amp; *f- &apos;0&apos; &gt;2147483647%10) is false" type="C"/>
   <traceLine line="903" text="Array &apos;buf+ (sizeof(buf) /sizeof(buf[0] ) ) -bufp&apos; size is 11." type="E"/>
   <traceLine line="1055" text="format_char==&apos;s&apos; is true" type="C"/>
   <traceLine line="1074" text="negative_number is false" type="C"/>
   <traceLine line="1090" text="digits = 1" type="E"/>
   <traceLine line="898" text="negative_number is false" type="C"/>
   <traceLine line="940" text="p is false" type="C"/>
   <traceLine line="520" text="*f==&apos;~&apos; is true" type="C"/>
   <traceLine line="525" text="_delta&gt;0 is false" type="C"/>
   <traceLine line="525" text="p is false" type="C"/>
   <traceLine line="590" text="* ++f==&apos;0&apos; is true" type="C"/>
   <traceLine line="903" text="digits- (buf+ (sizeof(buf) /sizeof(buf[0] ) ) -bufp)" type="E" refId="3"/>
   <traceLine line="903" text="Possible attempt to access element -1 of array &apos;buf+ (sizeof(buf) /sizeof(buf[0] ) ) -bufp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\strftime.c" method="nstrftime" id="1">
   <traceLine line="476" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\strftime.c" method="nstrftime" id="2">
   <traceLine line="583" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\strftime.c" method="nstrftime" id="3">
   <traceLine line="903" text="Inferred value &apos;digits&apos; is &apos;== 1&apos;" type="E"/>
   <traceLine line="903" text="Result of expression &apos;0 - digits&apos; is &apos;== -1&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=891</url>
</problem>
<problem>
 <problemID>892</problemID>
 <file>cvs\lib\strftime.c</file>
 <method>nstrftime</method>
 <line>893</line>
 <column>15</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from unsigned int to char may cause loss of data</message>
 <anchor>-483188802</anchor>
 <prefix>lue&lt;0;if(negative_number)u=-u;do</prefix>
 <postfix>while((u/=10)!=0);}do_number_sig</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=892</url>
</problem>
<problem>
 <problemID>893</problemID>
 <file>cvs\lib\strftime.c</file>
 <method>nstrftime</method>
 <line>1322</line>
 <column>27</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1430718870</anchor>
 <prefix>-flen]!=L_(&apos;%&apos;);flen++)continue;</prefix>
 <postfix>}break;}}if(p&amp;&amp;maxsize!=0)*p=L_(</postfix>
 <trace>
  <traceBlock file="cvs\lib\strftime.c" method="nstrftime" id="0">
   <traceLine line="1322" text="Infeasible condition: &apos;to_lowcase&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="1322" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\strftime.c" method="nstrftime" id="1">
   <traceLine line="1322" text="Inferred value &apos;to_lowcase&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="1322" text="Result of expression &apos;to_lowcase != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=893</url>
</problem>
<problem>
 <problemID>894</problemID>
 <file>cvs\lib\strftime.c</file>
 <method>memcpy_lowcase</method>
 <line>273</line>
 <column>5</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>CALE_PARAM_PROTO){while(len--&gt;0)</prefix>
 <postfix>returndest;}staticCHAR_T*memcpy_</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=894</url>
</problem>
<problem>
 <problemID>895</problemID>
 <file>cvs\lib\strftime.c</file>
 <method>memcpy_uppcase</method>
 <line>282</line>
 <column>5</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>CALE_PARAM_PROTO){while(len--&gt;0)</prefix>
 <postfix>returndest;}#if!HAVE_TM_GMTOFF/*</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=895</url>
</problem>
<problem>
 <problemID>896</problemID>
 <file>cvs\lib\strftime.c</file>
 <method>nstrftime</method>
 <line>748</line>
 <column>19</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data. Also there are 3 similar errors on line(s) 773, 774, 1086.</message>
 <anchor>517317363</anchor>
 <prefix>f(to_uppcase)while(old_start&lt;p){</prefix>
 <postfix>++old_start;}}break;#ifHAVE_STRF</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=896</url>
</problem>
<problem>
 <problemID>897</problemID>
 <file>cvs\lib\vasnprintf.c</file>
 <method>vasnprintf</method>
 <line>213</line>
 <column>13</column>
 <code>NPD.GEN.MIGHT</code>
 <message>Null pointer &apos;result&apos; that comes from line 173 may be dereferenced at line 213. Also there are 5 similar errors on line(s) 228, 229, 825, 848, 849.</message>
 <anchor>-573055933</anchor>
 <prefix>augmented_length=xsum(length,n);</prefix>
 <postfix>memcpy(result+length,cp,n*sizeof</postfix>
 <trace>
  <traceBlock file="cvs\lib\vasnprintf.c" method="vasnprintf" id="0">
   <traceLine line="166" text="resultbuf!= ( (void* )0) is false" type="C"/>
   <traceLine line="173" text="&apos;result&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="206" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="221" text="dp-&gt;conversion== &apos;%&apos; is false" type="C"/>
   <traceLine line="483" text="tmp_length&lt;=sizeof(tmpbuf) /sizeof(char) is true" type="C"/>
   <traceLine line="542" text="type==TYPE_WIDE_STRING is true" type="C"/>
   <traceLine line="585" text="1 is true" type="C"/>
   <traceLine line="817" text="count&gt;=maxlen is true" type="C"/>
   <traceLine line="823" text="(allocated) &lt;= (4294967295) / (2) is true" type="C"/>
   <traceLine line="825" text="(n) &gt;allocated is false" type="C"/>
   <traceLine line="836" text="tmp!=tmpbuf is false" type="C"/>
   <traceLine line="213" text="allocated&gt;0 is false" type="C"/>
   <traceLine line="213" text="(allocated) &lt;= (4294967295) / (sizeof(char) ) is true" type="C"/>
   <traceLine line="213" text="result==resultbuf||result== ( (void* )0) is true" type="C"/>
   <traceLine line="213" text="result==resultbuf&amp;&amp;length&gt;0 is true" type="C"/>
   <traceLine line="213" text="&apos;result&apos; is dereferenced by passing argument 2 to function &apos;memcpy&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=897</url>
</problem>
<problem>
 <problemID>898</problemID>
 <file>cvs\lib\vasnprintf.c</file>
 <method>vasnprintf</method>
 <line>592</line>
 <column>21</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;count&apos; is never used after assignment</message>
 <anchor>94851343</anchor>
 <prefix>etcount;maxlen=allocated-length;</prefix>
 <postfix>retcount=0;#ifUSE_SNPRINTF#defin</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=898</url>
</problem>
<problem>
 <problemID>899</problemID>
 <file>cvs\lib\vasnprintf.c</file>
 <method>vasnprintf</method>
 <line>806</line>
 <column>25</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;tmp&apos; allocated through function &apos;malloc&apos; at line 492 can be lost at line 806. Also there are 2 similar errors on line(s) 825.</message>
 <anchor>-208287421</anchor>
 <prefix>alloced);CLEANUP();errno=EINVAL;</prefix>
 <postfix>}#if!USE_SNPRINTFif(count&gt;=tmp_l</postfix>
 <trace>
  <traceBlock file="cvs\lib\vasnprintf.c" method="vasnprintf" id="0">
   <traceLine line="492" text="Dynamic memory stored in &apos;tmp&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="493" text="tmp== ( (void* )0) is false" type="C"/>
   <traceLine line="542" text="type==TYPE_WIDE_STRING is true" type="C"/>
   <traceLine line="585" text="1 is true" type="C"/>
   <traceLine line="798" text="count&lt;0 is true" type="C"/>
   <traceLine line="806" text="Dynamic memory stored in &apos;tmp&apos; is lost." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=899</url>
</problem>
<problem>
 <problemID>900</problemID>
 <file>cvs\lib\vasnprintf.c</file>
 <method>vasnprintf</method>
 <line>639</line>
 <column>27</column>
 <code>SV.FMTSTR.GENERIC</code>
 <message>function &apos;sprintf&apos; possibly accepts format string that may be influenced by user, causing format string vulnerability. Undefined string lengths can lead to buffer overflows and potential exploitation by attackers. Use a defined value for string lengths. Also there are 16 similar errors on line(s) 645, 651, 657, 663, 669, 675, 681, 688, 694, 701, ...</message>
 <anchor>-1996275316</anchor>
 <prefix>=a.arg[dp-&gt;arg_index].a.a_schar;</prefix>
 <postfix>}break;caseTYPE_UCHAR:{unsignedi</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO30-C"/>
  <taxonomy name="CWE" metaInf="134"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=900</url>
</problem>
<problem>
 <problemID>901</problemID>
 <file>cvs\lib\vasnprintf.c</file>
 <method>vasnprintf</method>
 <line>593</line>
 <column>21</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;retcount&apos; is never used after assignment</message>
 <anchor>-323693298</anchor>
 <prefix>axlen=allocated-length;count=-1;</prefix>
 <postfix>#ifUSE_SNPRINTF#defineSNPRINTF_B</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=901</url>
</problem>
<problem>
 <problemID>902</problemID>
 <file>cvs\lib\vasnprintf.c</file>
 <method>vasnprintf</method>
 <line>242</line>
 <column>21</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from size_t to signed char may cause loss of data. Also there is one similar error on line 245.</message>
 <anchor>2014290148</anchor>
 <prefix>e){caseTYPE_COUNT_SCHAR_POINTER:</prefix>
 <postfix>break;caseTYPE_COUNT_SHORT_POINT</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=902</url>
</problem>
<problem>
 <problemID>903</problemID>
 <file>cvs\lib\xalloc-die.c</file>
 <method>xalloc_die</method>
 <line>38</line>
 <column>33</column>
 <code>SV.UNBOUND_STRING_INPUT.FUNC</code>
 <message>Do not use &apos;gettext&apos;, this function does not check buffer boundaries and is very likely to cause buffer overflow vulnerabilities</message>
 <anchor>-74172029</anchor>
 <prefix>msgid)msgidvoidxalloc_die(void){</prefix>
 <postfix>/*The`noreturn&apos;cannotbegiventoer</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=903</url>
</problem>
<problem>
 <problemID>12</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>405</line>
 <column>29</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-190307851</anchor>
 <prefix>s,message,entries,vers-&gt;tag)!=0)</prefix>
 <postfix>else{added_files++;if(!quiet){if</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="403" text="Infeasible condition: &apos;build_entry(repository, finfo.file, vers-&gt;options, message, entries, vers-&gt;tag) !=0&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="405" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\add.c" method="add" id="1">
   <traceLine line="403" text="Inferred value &apos;build_entry(repository, finfo.file, vers-&gt;options, message, entries, vers-&gt;tag)&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="403" text="Result of expression &apos;build_entry(repository, finfo.file, vers-&gt;options, message, entries, vers-&gt;tag) != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=12</url>
</problem>
<problem>
 <problemID>1</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>217</line>
 <column>25</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;cwd.desc&apos; at line 200 may be lost here. Also there are 7 similar errors on line(s) 233, 249, 311, 333, 375, 440, 692.</message>
 <anchor>-1990331761</anchor>
 <prefix>edir;if(CVS_CHDIR(update_dir)&lt;0)</prefix>
 <postfix>&quot;couldnotchdirto`%s&apos;&quot;,update_dir</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="188" text="isdir(argv[j] ) is true" type="C"/>
   <traceLine line="200" text="Resource is acquired: &apos;cwd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="208" text="p==filedir is false" type="C"/>
   <traceLine line="216" text="chdir(update_dir) &lt;0 is true" type="C"/>
   <traceLine line="217" text="Resource is lost: &apos;cwd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=1</url>
</problem>
<problem>
 <problemID>2</problemID>
 <file>cvs\src\add.c</file>
 <method>add_directory</method>
 <line>769</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;cwd.desc&apos; at line 761 may be lost here. Also there are 2 similar errors on line(s) 877, 893.</message>
 <anchor>-1990331761</anchor>
 <prefix>nnotchdirto%s&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}#ifdefSERVER_SUPPORTif(!server_</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add_directory" id="0">
   <traceLine line="761" text="Resource is acquired: &apos;cwd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="769" text="Resource is lost: &apos;cwd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=2</url>
</problem>
<problem>
 <problemID>6</problemID>
 <file>cvs\src\add.c</file>
 <method>build_entry</method>
 <line>927</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 925 may be lost here.</message>
 <anchor>-332821330</anchor>
 <prefix>message&amp;&amp;fputs(message,fp)==EOF)</prefix>
 <postfix>if(fclose(fp)==EOF)error(1,errno</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="build_entry" id="0">
   <traceLine line="925" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;open_file&apos;." type="E" refId="1"/>
   <traceLine line="927" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="open_file" id="1">
   <traceLine line="275" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="277" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=6</url>
</problem>
<problem>
 <problemID>4</problemID>
 <file>cvs\src\add.c</file>
 <method>add_directory</method>
 <line>898</line>
 <column>5</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;message&apos; allocated through function &apos;xmalloc&apos; at line 791 can be lost at line 898</message>
 <anchor>-335414815</anchor>
 <prefix>d);if(rcsdir!=NULL)free(rcsdir);</prefix>
 <postfix>}/**Buildsanentryforanewfileands</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add_directory" id="0">
   <traceLine line="791" text="Dynamic memory stored in &apos;message&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="898" text="Dynamic memory stored in &apos;message&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=4</url>
</problem>
<problem>
 <problemID>28</problemID>
 <file>cvs\src\admin.c</file>
 <method>admin</method>
 <line>496</line>
 <column>17</column>
 <code>NPD.GEN.MIGHT</code>
 <message>Null pointer &apos;admin_data.av&apos; that comes from line 225 may be dereferenced at line 496.</message>
 <anchor>1558960687</anchor>
 <prefix>P*/for(i=0;i&lt;admin_data.ac;++i){</prefix>
 <postfix>switch(admin_data.av[i][1]){case</postfix>
 <trace>
  <traceBlock file="cvs\src\admin.c" method="admin" id="0">
   <traceLine line="225" text="&apos;admin_data&apos; is assigned a constant NULL value within function &apos;memset&apos;." type="E"/>
   <traceLine line="225" text="&apos;admin_data.av&apos; is a field of &apos;admin_data.av&apos;." type="E"/>
   <traceLine line="237" text="!current_parsed_root-&gt;isremote&amp;&amp;c!= &apos;q&apos; &amp;&amp; !strchr(config-&gt;UserAdminOptions, c) is false" type="C"/>
   <traceLine line="254" text="admin_data.branch!= ( (void* )0) is false" type="C"/>
   <traceLine line="270" text="admin_data.comment!= ( (void* )0) is false" type="C"/>
   <traceLine line="364" text="admin_data.delete_revs!= ( (void* )0) is false" type="C"/>
   <traceLine line="380" text="admin_data.desc!= ( (void* )0) is false" type="C"/>
   <traceLine line="426" text="admin_data.kflag!= ( (void* )0) is false" type="C"/>
   <traceLine line="475" text="Entering loop, because i&lt;=n is true" type="C"/>
   <traceLine line="476" text="Break statement causes loop exit." type="E" refId="1"/>
   <traceLine line="457" text="!current_parsed_root-&gt;isremote&amp;&amp; !only_allowed_options&amp;&amp; (grp=getgrnam(&quot;cvsadmin&quot;) ) != ( (void* )0) is false" type="C"/>
   <traceLine line="496" text="&apos;admin_data.av&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\admin.c" method="admin" id="1">
   <traceLine line="475" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=28</url>
</problem>
<problem>
 <problemID>32</problemID>
 <file>cvs\src\admin.c</file>
 <method>arg_add</method>
 <line>118</line>
 <column>5</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>len(arg))+3);strcpy(newelt,&quot;-&quot;);</prefix>
 <postfix>if(arg==NULL)newelt[2]=&apos;\0&apos;;else</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=32</url>
</problem>
<problem>
 <problemID>29</problemID>
 <file>cvs\src\admin.c</file>
 <method>admin_fileproc</method>
 <line>976</line>
 <column>27</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 976.</message>
 <anchor>-1190332846</anchor>
 <prefix>;/*can&apos;thappen*/}}if(status==0){</prefix>
 <postfix>if(!really_quiet)cvs_output(&quot;don</postfix>
 <trace>
  <traceBlock file="cvs\src\admin.c" method="admin_fileproc" id="0">
   <traceLine line="976" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=29</url>
</problem>
<problem>
 <problemID>35</problemID>
 <file>cvs\src\annotate.c</file>
 <method>rannotate_proc</method>
 <line>214</line>
 <column>13</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;where&apos; allocated through function &apos;xmalloc&apos; at line 168 can be lost at line 214</message>
 <anchor>2051040961</anchor>
 <prefix>s&quot;,repository);free(repository);</prefix>
 <postfix>}/*Endsectionwhichisidenticaltop</postfix>
 <trace>
  <traceBlock file="cvs\src\annotate.c" method="rannotate_proc" id="0">
   <traceLine line="168" text="Dynamic memory stored in &apos;where&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="214" text="Dynamic memory stored in &apos;where&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=35</url>
</problem>
<problem>
 <problemID>37</problemID>
 <file>cvs\src\buffer.c</file>
 <method>buf_append_char</method>
 <line>260</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data. Also there is one similar error on line 267.</message>
 <anchor>517317363</anchor>
 <prefix>f-&gt;last-&gt;bufp+buf-&gt;last-&gt;size)){</prefix>
 <postfix>++buf-&gt;last-&gt;size;}else{charb;b=</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=37</url>
</problem>
<problem>
 <problemID>42</problemID>
 <file>cvs\src\checkin.c</file>
 <method>Checkin</method>
 <line>154</line>
 <column>34</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 154.</message>
 <anchor>-1190332846</anchor>
 <prefix>d)RCS_unlock(finfo-&gt;rcs,NULL,1);</prefix>
 <postfix>}#ifdefSERVER_SUPPORTif(server_a</postfix>
 <trace>
  <traceBlock file="cvs\src\checkin.c" method="Checkin" id="0">
   <traceLine line="154" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=42</url>
</problem>
<problem>
 <problemID>44</problemID>
 <file>cvs\src\checkin.c</file>
 <method>Checkin</method>
 <line>123</line>
 <column>17</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>45678</anchor>
 <prefix>ath);break;case-1:/*forkfailed*/</prefix>
 <postfix>if(unlink_file_dir(tocvsPath)&lt;0)</postfix>
 <trace>
  <traceBlock file="cvs\src\checkin.c" method="Checkin" id="0">
   <traceLine line="122" text="Infeasible condition: &apos;RCS_checkin(finfo-&gt;rcs, finfo-&gt;update_dir, finfo-&gt;file, message, rev, 0, 16)==-1&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="123" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\checkin.c" method="Checkin" id="1">
   <traceLine line="49" text="Inferred value &apos;RCS_checkin(finfo-&gt;rcs, finfo-&gt;update_dir, finfo-&gt;file, message, rev, 0, 16)&apos; is &apos;[0,1]&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=44</url>
</problem>
<problem>
 <problemID>43</problemID>
 <file>cvs\src\checkin.c</file>
 <method>Checkin</method>
 <line>63</line>
 <column>17</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;options&apos; by passing argument 1 to function &apos;strcmp&apos; at line 63 before NULL check at line 76</message>
 <anchor>1897051216</anchor>
 <prefix>xpandingRCSkeywords,wearedone.*/</prefix>
 <postfix>options[0]=&apos;\0&apos;;/*FIXME:IfPreser</postfix>
 <trace>
  <traceBlock file="cvs\src\checkin.c" method="Checkin" id="0">
   <traceLine line="63" text="&apos;options&apos; is dereferenced by being passed as argument 1 to function &apos;strcmp&apos;." type="E"/>
   <traceLine line="76" text="&apos;options&apos; is checked for NULL." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=43</url>
</problem>
<problem>
 <problemID>47</problemID>
 <file>cvs\src\classify.c</file>
 <method>Classify_File</method>
 <line>222</line>
 <column>37</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;vers-&gt;srcfile&apos; by passing argument 1 to function &apos;RCS_isdead&apos; at line 222 before NULL check at line 368</message>
 <anchor>381808101</anchor>
 <prefix>e{/*Anormalentry,TS_Rcsisvalid*/</prefix>
 <postfix>{/*ThereisnoRCSfile*/if(vers-&gt;ts</postfix>
 <trace>
  <traceBlock file="cvs\src\classify.c" method="Classify_File" id="0">
   <traceLine line="222" text="&apos;vers-&gt;srcfile&apos; is dereferenced by being passed as argument 1 to function &apos;RCS_isdead&apos;." type="E" refId="1"/>
   <traceLine line="368" text="&apos;vers-&gt;srcfile&apos; is checked for NULL." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_isdead" id="1">
   <traceLine line="3366" text="&apos;rcs&apos; is passed to function &apos;RCS_isdead&apos;." type="E"/>
   <traceLine line="3371" text="&apos;rcs&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=47</url>
</problem>
<problem>
 <problemID>117</problemID>
 <file>cvs\src\commit.c</file>
 <method>remove_file</method>
 <line>1740</line>
 <column>5</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;prev_rev&apos; is never used after assignment</message>
 <anchor>-1274070889</anchor>
 <prefix>ar*old_path;corev=NULL;rev=NULL;</prefix>
 <postfix>retcode=0;if(finfo-&gt;rcs==NULL)er</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=117</url>
</problem>
<problem>
 <problemID>113</problemID>
 <file>cvs\src\commit.c</file>
 <method>fixbranch</method>
 <line>1966</line>
 <column>20</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>246292130</anchor>
 <prefix>e=RCS_setbranch(rcs,branch))!=0)</prefix>
 <postfix>&quot;cannotrestorebranchto%sfor%s&quot;,b</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="fixbranch" id="0">
   <traceLine line="1965" text="Infeasible condition: &apos;(retcode=RCS_setbranch(rcs, branch) ) !=0&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="1966" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\commit.c" method="fixbranch" id="1">
   <traceLine line="1965" text="Inferred value &apos;retcode&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="1965" text="Result of expression &apos;retcode != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=113</url>
</problem>
<problem>
 <problemID>109</problemID>
 <file>cvs\src\commit.c</file>
 <method>remove_file</method>
 <line>1807</line>
 <column>13</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1467275425</anchor>
 <prefix>_setbranch(finfo-&gt;rcs,NULL)!=0){</prefix>
 <postfix>finfo-&gt;fullname);return1;}RCS_re</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="remove_file" id="0">
   <traceLine line="1805" text="Infeasible condition: &apos;RCS_setbranch(finfo-&gt;rcs,  ( (void* )0) ) !=0&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="1807" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\commit.c" method="remove_file" id="1">
   <traceLine line="1805" text="Inferred value &apos;RCS_setbranch(finfo-&gt;rcs, 0)&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="1805" text="Result of expression &apos;RCS_setbranch(finfo-&gt;rcs, 0) != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=109</url>
</problem>
<problem>
 <problemID>96</problemID>
 <file>cvs\src\commit.c</file>
 <method>classify_file_internal</method>
 <line>765</line>
 <column>18</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;cp&apos; returned from call to function &apos;strrchr&apos; at line 764 may be NULL and will be dereferenced at line 765.</message>
 <anchor>239075987</anchor>
 <prefix>ag)&amp;1)!=0){cp=strrchr(xtag,&apos;.&apos;);</prefix>
 <postfix>}status=Classify_File(finfo,xtag</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="classify_file_internal" id="0">
   <traceLine line="764" text="&apos;cp&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="765" text="&apos;cp&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=96</url>
</problem>
<problem>
 <problemID>110</problemID>
 <file>cvs\src\commit.c</file>
 <method>checkaddfile</method>
 <line>2214</line>
 <column>51</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;rcs&apos; returned from call to function &apos;RCS_parse&apos; at line 2211 may be NULL and will be dereferenced at line 2214. Also there is one similar error on line 2316.</message>
 <anchor>1078283346</anchor>
 <prefix>(file,repository);if(rcs==NULL){</prefix>
 <postfix>gotoout;}*rcsnode=rcs;/*andlocki</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="checkaddfile" id="0">
   <traceLine line="2211" text="&apos;rcs&apos; is assigned the return value from function &apos;RCS_parse&apos;." type="E" refId="1"/>
   <traceLine line="2212" text="rcs== ( (void* )0) is true" type="C"/>
   <traceLine line="2214" text="&apos;rcs&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_parse" id="1">
   <traceLine line="262" text="&apos;retval&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="274" text="(fp=fopen(rcsfile,  (&quot;rb&quot;) ) ) != ( (void* )0) is false" type="C"/>
   <traceLine line="293" text="&apos;retval&apos; is returned by &apos;RCS_parse&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=110</url>
</problem>
<problem>
 <problemID>111</problemID>
 <file>cvs\src\commit.c</file>
 <method>lock_RCS</method>
 <line>2398</line>
 <column>17</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1476119294</anchor>
 <prefix>{if(RCS_setbranch(rcs,NULL)!=0){</prefix>
 <postfix>rcs-&gt;path);if(branch)free(branch</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="lock_RCS" id="0">
   <traceLine line="2396" text="Infeasible condition: &apos;RCS_setbranch(rcs,  ( (void* )0) ) !=0&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="2398" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\commit.c" method="lock_RCS" id="1">
   <traceLine line="2396" text="Inferred value &apos;RCS_setbranch(rcs, 0)&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="2396" text="Result of expression &apos;RCS_setbranch(rcs, 0) != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=111</url>
</problem>
<problem>
 <problemID>99</problemID>
 <file>cvs\src\commit.c</file>
 <method>remove_file</method>
 <line>1759</line>
 <column>34</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 1759.</message>
 <anchor>-1190332846</anchor>
 <prefix>&quot;,tag,finfo-&gt;fullname);return1;}</prefix>
 <postfix>Scratch_Entry(finfo-&gt;entries,fin</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="remove_file" id="0">
   <traceLine line="1759" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=99</url>
</problem>
<problem>
 <problemID>100</problemID>
 <file>cvs\src\commit.c</file>
 <method>remove_file</method>
 <line>1811</line>
 <column>34</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 1811.</message>
 <anchor>-1190332846</anchor>
 <prefix>or%s&quot;,finfo-&gt;fullname);return1;}</prefix>
 <postfix>}/*checksomethingout.Generallyth</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="remove_file" id="0">
   <traceLine line="1811" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=100</url>
</problem>
<problem>
 <problemID>101</problemID>
 <file>cvs\src\commit.c</file>
 <method>remove_file</method>
 <line>1830</line>
 <column>38</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 1830.</message>
 <anchor>-1190332846</anchor>
 <prefix>finfo-&gt;rcs,rev?corev:NULL,1)==0)</prefix>
 <postfix>}if(corev!=NULL)free(corev);retc</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="remove_file" id="0">
   <traceLine line="1830" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=101</url>
</problem>
<problem>
 <problemID>102</problemID>
 <file>cvs\src\commit.c</file>
 <method>unlockrcs</method>
 <line>1923</line>
 <column>27</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 1923.</message>
 <anchor>-1190332846</anchor>
 <prefix>ouldnotunlock%s&quot;,rcs-&gt;path);else</prefix>
 <postfix>}/**removeapartiallyaddedfile.if</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="unlockrcs" id="0">
   <traceLine line="1923" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=102</url>
</problem>
<problem>
 <problemID>103</problemID>
 <file>cvs\src\commit.c</file>
 <method>fixbranch</method>
 <line>1968</line>
 <column>27</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 1968.</message>
 <anchor>-1190332846</anchor>
 <prefix>nchto%sfor%s&quot;,branch,rcs-&gt;path);</prefix>
 <postfix>}}/**dotheinitialpartofafileaddf</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="fixbranch" id="0">
   <traceLine line="1968" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=103</url>
</problem>
<problem>
 <problemID>104</problemID>
 <file>cvs\src\commit.c</file>
 <method>checkaddfile</method>
 <line>2252</line>
 <column>31</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 2252.</message>
 <anchor>-1190332846</anchor>
 <prefix>de=RCS_settag(rcs,tag,magicrev);</prefix>
 <postfix>free(head);free(magicrev);if(ret</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="checkaddfile" id="0">
   <traceLine line="2252" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=104</url>
</problem>
<problem>
 <problemID>107</problemID>
 <file>cvs\src\commit.c</file>
 <method>remove_file</method>
 <line>1742</line>
 <column>5</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;retcode&apos; is never used after assignment</message>
 <anchor>1097936398</anchor>
 <prefix>rev=NULL;rev=NULL;prev_rev=NULL;</prefix>
 <postfix>if(finfo-&gt;rcs==NULL)error(1,0,&quot;i</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=107</url>
</problem>
<problem>
 <problemID>118</problemID>
 <file>cvs\src\commit.c</file>
 <method>remove_file</method>
 <line>1739</line>
 <column>5</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;rev&apos; is never used after assignment</message>
 <anchor>112803</anchor>
 <prefix>ev_rev;char*old_path;corev=NULL;</prefix>
 <postfix>prev_rev=NULL;retcode=0;if(finfo</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=118</url>
</problem>
<problem>
 <problemID>93</problemID>
 <file>cvs\src\commit.c</file>
 <method>commit</method>
 <line>632</line>
 <column>17</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 627 may be lost here.</message>
 <anchor>-656696713</anchor>
 <prefix>age),fp)!=strlen(saved_message))</prefix>
 <postfix>if(fclose(fp)&lt;0)error(0,errno,&quot;c</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="commit" id="0">
   <traceLine line="627" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;cvs_temp_file&apos;." type="E" refId="1"/>
   <traceLine line="632" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="cvs_temp_file" id="1">
   <traceLine line="741" text="fd== -1 is false" type="C"/>
   <traceLine line="742" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fdopen&apos;." type="E"/>
   <traceLine line="742" text="(fp=fdopen(fd, &quot;w+&quot; ) ) == ( (void* )0) is false" type="C"/>
   <traceLine line="755" text="fp== ( (void* )0) is false" type="C"/>
   <traceLine line="772" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=93</url>
</problem>
<problem>
 <problemID>105</problemID>
 <file>cvs\src\commit.c</file>
 <method>checkaddfile</method>
 <line>2195</line>
 <column>36</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;rcs&apos; returned from call to function &apos;RCS_parsercsfile&apos; at line 2103 may be NULL and may be dereferenced at line 2195.</message>
 <anchor>-440558248</anchor>
 <prefix>allyaddedonbranch%s.&quot;,file,tag);</prefix>
 <postfix>RCS_FLAGS_DEAD|RCS_FLAGS_QUIET);</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="checkaddfile" id="0">
   <traceLine line="2103" text="&apos;rcs&apos; is assigned the return value from function &apos;RCS_parsercsfile&apos;." type="E" refId="1"/>
   <traceLine line="2195" text="&apos;rcs&apos; is dereferenced by passing argument 1 to function &apos;RCS_checkin&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_parsercsfile" id="1">
   <traceLine line="302" text="RCS_parsercsfile" type="E"/>
   <traceLine line="315" text="&apos;RCS_parsercsfile&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="2">
   <traceLine line="4934" text="&apos;rcs&apos; is passed to function &apos;RCS_checkin&apos;." type="E"/>
   <traceLine line="4954" text="&apos;rcs&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=105</url>
</problem>
<problem>
 <problemID>106</problemID>
 <file>cvs\src\commit.c</file>
 <method>checkaddfile</method>
 <line>2334</line>
 <column>13</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-572174162</anchor>
 <prefix>th);gotoout;}}if(*rcsnode!=rcs){</prefix>
 <postfix>*rcsnode=rcs;}}fileattr_newfile(</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="checkaddfile" id="0">
   <traceLine line="2332" text="Infeasible condition: &apos;*rcsnode!=rcs&apos; cannot be true." type="E"/>
   <traceLine line="2334" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=106</url>
</problem>
<problem>
 <problemID>114</problemID>
 <file>cvs\src\commit.c</file>
 <method>commit_fileproc</method>
 <line>1457</line>
 <column>17</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;finfo-&gt;rcs&apos; returned from call to function &apos;checkaddfile&apos; at line 1407 may be NULL and may be dereferenced at line 1457.</message>
 <anchor>1756376586</anchor>
 <prefix>finfo-&gt;entries,findmaxrev,NULL);</prefix>
 <postfix>/*resurrecting:includedeadrevisi</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="commit_fileproc" id="0">
   <traceLine line="1405" text="ci-&gt;status==T_ADDED is true" type="C"/>
   <traceLine line="1407" text="&apos;finfo-&gt;rcs&apos; is assigned the return value from function &apos;checkaddfile&apos;." type="E" refId="1"/>
   <traceLine line="1424" text="! ( (_ctype_+1) [ (unsigned) ( (unsigned char)ci-&gt;tag[0] ) ] &amp;4) is false" type="C"/>
   <traceLine line="1420" text="ci-&gt;tag&amp;&amp; ! ( (_ctype_+1) [ (unsigned) ( (unsigned char)ci-&gt;tag[0] ) ] &amp;4) is false" type="C"/>
   <traceLine line="1457" text="&apos;finfo-&gt;rcs&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\commit.c" method="checkaddfile" id="1">
   <traceLine line="2095" text="add_rcs_file( ( (void* )0), rcsname, file,  ( (void* )0), opt,  ( (void* )0),  ( (void* )0), 0,  ( (void* )0), desc, desclen,  ( (void* )0), 0) !=0 is false" type="C"/>
   <traceLine line="2103" text="&apos;rcs&apos; is assigned the return value from function &apos;RCS_parsercsfile&apos;." type="E" refId="2"/>
   <traceLine line="2109" text="*rcsnode = rcs: copies &apos;rcs&apos; into &apos;*rcsnode&apos;" type="E"/>
   <traceLine line="2171" text="newfile is true" type="C"/>
   <traceLine line="2198" text="retcode!=0 is false" type="C"/>
   <traceLine line="2212" text="rcs== ( (void* )0) is true" type="C"/>
   <traceLine line="2363" text="&apos;*rcsnode&apos; is returned by &apos;checkaddfile&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_parsercsfile" id="2">
   <traceLine line="302" text="RCS_parsercsfile" type="E"/>
   <traceLine line="315" text="&apos;RCS_parsercsfile&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=114</url>
</problem>
<problem>
 <problemID>116</problemID>
 <file>cvs\src\commit.c</file>
 <method>checkaddfile</method>
 <line>2214</line>
 <column>51</column>
 <code>NPD.CHECK.MUST</code>
 <message>Pointer &apos;rcs&apos; checked for NULL at line 2212 will be dereferenced at line 2214. Also there is one similar error on line 2316.</message>
 <anchor>1038098952</anchor>
 <prefix>(file,repository);if(rcs==NULL){</prefix>
 <postfix>gotoout;}*rcsnode=rcs;/*andlocki</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="checkaddfile" id="0">
   <traceLine line="2212" text="&apos;rcs&apos; is checked for NULL." type="E"/>
   <traceLine line="2214" text="&apos;rcs&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=116</url>
</problem>
<problem>
 <problemID>112</problemID>
 <file>cvs\src\commit.c</file>
 <method>checkaddfile</method>
 <line>2129</line>
 <column>13</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rcsnode-&gt;expand&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 2363.</message>
 <anchor>301155205</anchor>
 <prefix>wordexpansionmodeto%s&quot;,options);</prefix>
 <postfix>}if(!adding_on_branch){/*Wearead</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="checkaddfile" id="0">
   <traceLine line="2363" text="&apos;*rcsnode-&gt;expand&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="2129" text="&apos;*rcsnode-&gt;expand&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\commit.c" method="checkaddfile" id="1">
   <traceLine line="2003" text="Tracking &apos;*rcsnode-&gt;expand&apos;." type="E"/>
   <traceLine line="2117" text="rcs = *rcsnode: &apos;rcs-&gt;expand&apos; now references the same memory as &apos;(*rcsnode)-&gt;expand&apos;" type="E"/>
   <traceLine line="2120" text="oldexpand!= ( (void* )0) &amp;&amp;options!= ( (void* )0) &amp;&amp;strcmp(options+2, oldexpand) !=0 is true" type="C"/>
   <traceLine line="2120" text="(oldexpand!= ( (void* )0) &amp;&amp;options!= ( (void* )0) &amp;&amp;strcmp(options+2, oldexpand) !=0) || (oldexpand== ( (void* )0) &amp;&amp;options!= ( (void* )0) ) is true" type="C"/>
   <traceLine line="2129" text="&apos;rcs-&gt;expand&apos; is freed by passing &apos;rcs&apos; to &apos;RCS_setexpand&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_setexpand" id="2">
   <traceLine line="3402" text="Tracking &apos;rcs-&gt;expand&apos;." type="E"/>
   <traceLine line="3408" text="&apos;rcs-&gt;expand&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=112</url>
</problem>
<problem>
 <problemID>125</problemID>
 <file>cvs\src\create_adm.c</file>
 <method>Create_Admin</method>
 <line>70</line>
 <column>39</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>rno,&quot;cannotmakedirectory%sin%s&quot;,</prefix>
 <postfix>}/*recordthecurrentcvsrootforlat</postfix>
 <trace>
  <traceBlock file="cvs\src\create_adm.c" method="Create_Admin" id="0">
   <traceLine line="69" text="Call to &apos;error(1,  ( *__errno() ), &quot;cannot make directory %s in %s&quot;, &quot;CVS&quot;, update_dir)&apos; never returns." type="E"/>
   <traceLine line="70" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=125</url>
</problem>
<problem>
 <problemID>124</problemID>
 <file>cvs\src\create_adm.c</file>
 <method>Create_Admin</method>
 <line>43</line>
 <column>20</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;dir&apos; by passing argument 1 to function &apos;strlen&apos; at line 43 before NULL check at line 76</message>
 <anchor>-1952105520</anchor>
 <prefix>n,dotemplate);if(noexec)return0;</prefix>
 <postfix>(void)sprintf(tmp,&quot;%s/%s&quot;,dir,CV</postfix>
 <trace>
  <traceBlock file="cvs\src\create_adm.c" method="Create_Admin" id="0">
   <traceLine line="43" text="&apos;dir&apos; is dereferenced by being passed as argument 1 to function &apos;strlen&apos;." type="E"/>
   <traceLine line="76" text="&apos;dir&apos; is checked for NULL." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=124</url>
</problem>
<problem>
 <problemID>126</problemID>
 <file>cvs\src\create_adm.c</file>
 <method>Create_Admin</method>
 <line>121</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fout&apos; at line 80 may be lost here. Also there is one similar error on line 123.</message>
 <anchor>1782432367</anchor>
 <prefix>&quot;,cp)&lt;0){if(update_dir[0]==&apos;\0&apos;)</prefix>
 <postfix>elseerror(1,errno,&quot;writeto%s/%sf</postfix>
 <trace>
  <traceBlock file="cvs\src\create_adm.c" method="Create_Admin" id="0">
   <traceLine line="80" text="Resource is acquired: &apos;fout&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="121" text="Resource is lost: &apos;fout&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=126</url>
</problem>
<problem>
 <problemID>130</problemID>
 <file>cvs\zlib\deflate.c</file>
 <method>deflateSetDictionary</method>
 <line>353</line>
 <column>20</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;hash_head&apos; is never used after assignment</message>
 <anchor>309280369</anchor>
 <prefix>){INSERT_STRING(s,n,hash_head);}</prefix>
 <postfix>returnZ_OK;}/*==================</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=130</url>
</problem>
<problem>
 <problemID>153</problemID>
 <file>cvs\diff\diff3.c</file>
 <method>process_diff</method>
 <line>1173</line>
 <column>3</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;diff_limit&apos; allocated through function &apos;read_diff&apos; at line 1087 can be lost at line 1173</message>
 <anchor>1391911241</anchor>
 <prefix>ock_list_end=0;*last_block=bptr;</prefix>
 <postfix>}/**Thisroutinewillparseanormalf</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff3.c" method="process_diff" id="0">
   <traceLine line="1087" text="Dynamic memory stored in &apos;diff_limit&apos; is allocated by calling function &apos;read_diff&apos;." type="E" refId="1"/>
   <traceLine line="1173" text="Dynamic memory stored in &apos;diff_limit&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\diff\diff3.c" method="read_diff" id="1">
   <traceLine line="1336" text="&apos;diff_result&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="2"/>
   <traceLine line="1343" text="total==current_chunk_size is false" type="C"/>
   <traceLine line="1355" text="diff_result[total-1] != &apos;\n&apos; is false" type="C"/>
   <traceLine line="1355" text="total!=0&amp;&amp;diff_result[total-1] != &apos;\n&apos; is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="2">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="3">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=153</url>
</problem>
<problem>
 <problemID>160</problemID>
 <file>cvs\src\entries.c</file>
 <method>WriteTag</method>
 <line>656</line>
 <column>21</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fout&apos; at line 650 may be lost here. Also there are 2 similar errors on line(s) 661, 667.</message>
 <anchor>460164270</anchor>
 <prefix>{if(fprintf(fout,&quot;N%s\n&quot;,tag)&lt;0)</prefix>
 <postfix>}else{if(fprintf(fout,&quot;T%s\n&quot;,ta</postfix>
 <trace>
  <traceBlock file="cvs\src\entries.c" method="WriteTag" id="0">
   <traceLine line="648" text="tag||date is true" type="C"/>
   <traceLine line="650" text="Resource is acquired: &apos;fout&apos; is assigned to return value of the call to function &apos;open_file&apos;." type="E" refId="1"/>
   <traceLine line="656" text="Resource is lost: &apos;fout&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="open_file" id="1">
   <traceLine line="275" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="275" text="(fp=fopen(name, mode) ) == ( (void* )0) is false" type="C"/>
   <traceLine line="277" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=160</url>
</problem>
<problem>
 <problemID>161</problemID>
 <file>cvs\src\error.c</file>
 <method>error</method>
 <line>126</line>
 <column>17</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>eak;case&apos;c&apos;:ch=va_arg(args,int);</prefix>
 <postfix>cvs_outerr(buf,1);break;case&apos;%&apos;:</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=161</url>
</problem>
<problem>
 <problemID>162</problemID>
 <file>cvs\src\expand_path.c</file>
 <method>expand_path</method>
 <line>326</line>
 <column>9</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1331884963</anchor>
 <prefix>!=NULL)free(mybuf);if(buf!=NULL)</prefix>
 <postfix>returnNULL;}staticchar*expand_va</postfix>
 <trace>
  <traceBlock file="cvs\src\expand_path.c" method="expand_path" id="0">
   <traceLine line="325" text="Infeasible condition: &apos;buf!= ( (void* )0)&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="326" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\expand_path.c" method="expand_path" id="1">
   <traceLine line="325" text="Inferred value &apos;buf&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="325" text="Result of expression &apos;buf != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=162</url>
</problem>
<problem>
 <problemID>164</problemID>
 <file>cvs\src\expand_path.c</file>
 <method>expand_path</method>
 <line>184</line>
 <column>17</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;d&apos; is never used after assignment</message>
 <anchor>100</anchor>
 <prefix>ring(&amp;mybuf,&amp;mybuf_size,doff+1);</prefix>
 <postfix>for(d=&amp;p[-1];(*d++=*e++);){doff=</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=164</url>
</problem>
<problem>
 <problemID>168</problemID>
 <file>cvs\src\fileattr.c</file>
 <method>fileattr_read</method>
 <line>116</line>
 <column>17</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 93 may be lost here. Also there is one similar error on line 139.</message>
 <anchor>1303575983</anchor>
 <prefix>;p=strchr(line,&apos;\t&apos;);if(p==NULL)</prefix>
 <postfix>&quot;fileattributedatabasecorruption</postfix>
 <trace>
  <traceBlock file="cvs\src\fileattr.c" method="fileattr_read" id="0">
   <traceLine line="93" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="109" text="line[0] == &apos;F&apos; is true" type="C"/>
   <traceLine line="115" text="p== ( (void* )0) is true" type="C"/>
   <traceLine line="116" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=168</url>
</problem>
<problem>
 <problemID>170</problemID>
 <file>cvs\src\fileattr.c</file>
 <method>fileattr_modify</method>
 <line>301</line>
 <column>13</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data. Also there are 2 similar errors on line(s) 310, 317.</message>
 <anchor>517317363</anchor>
 <prefix>l+(preend-pre);if(attrval!=NULL)</prefix>
 <postfix>*rp=&apos;\0&apos;;}elseretval[0]=&apos;\0&apos;;if(</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=170</url>
</problem>
<problem>
 <problemID>169</problemID>
 <file>cvs\src\fileattr.c</file>
 <method>fileattr_modify</method>
 <line>308</line>
 <column>9</column>
 <code>NNTS.MIGHT</code>
 <message>Buffer overflow of &apos;retval&apos; due to non null terminated string &apos;retval&apos;. Also there is one similar error on line 315.</message>
 <anchor>834122540</anchor>
 <prefix>etval[0]=&apos;\0&apos;;if(attrval!=NULL){</prefix>
 <postfix>rp=retval+strlen(retval);*rp++=n</postfix>
 <trace>
  <traceBlock file="cvs\src\fileattr.c" method="fileattr_modify" id="0">
   <traceLine line="296" text="preend!=pre is true" type="C"/>
   <traceLine line="298" text="The size parameter may be less than length of source buffer." type="E"/>
   <traceLine line="298" text="&apos;retval&apos; may not be null-terminated after call to the function &apos;strncpy&apos;." type="E"/>
   <traceLine line="300" text="attrval!= ( (void* )0) is true" type="C"/>
   <traceLine line="308" text="String &apos;retval&apos; is not properly terminated string and passed as an argument to function &apos;strcat&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="STR03-C, STR31-C, STR32-C, STR35-C"/>
  <taxonomy name="CWE" metaInf="170"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=169</url>
</problem>
<problem>
 <problemID>166</problemID>
 <file>cvs\src\fileattr.c</file>
 <method>fileattr_write</method>
 <line>641</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;fname&apos; allocated through function &apos;xmalloc&apos; at line 576 can be lost at line 641</message>
 <anchor>-1751039285</anchor>
 <prefix>void)umask(omask);free(repname);</prefix>
 <postfix>}free(repname);fp=CVS_FOPEN(fnam</postfix>
 <trace>
  <traceBlock file="cvs\src\fileattr.c" method="fileattr_write" id="0">
   <traceLine line="576" text="Dynamic memory stored in &apos;fname&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="641" text="Dynamic memory stored in &apos;fname&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=166</url>
</problem>
<problem>
 <problemID>173</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>copy_file</method>
 <line>68</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fdin&apos; at line 65 may be lost here. Also there are 3 similar errors on line(s) 70, 85, 91.</message>
 <anchor>1658903195</anchor>
 <prefix>ing&quot;,from);if(fstat(fdin,&amp;sb)&lt;0)</prefix>
 <postfix>if((fdout=creat(to,(int)sb.st_mo</postfix>
 <trace>
  <traceBlock file="cvs\src\filesubr.c" method="copy_file" id="0">
   <traceLine line="65" text="Resource is acquired: &apos;fdin&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="68" text="Resource is lost: &apos;fdin&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=173</url>
</problem>
<problem>
 <problemID>177</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>xcmp</method>
 <line>631</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fd1&apos; at line 628 may be lost here. Also there are 2 similar errors on line(s) 656, 660.</message>
 <anchor>-1389901455</anchor>
 <prefix>if((fd2=open(file2,O_RDONLY))&lt;0)</prefix>
 <postfix>/*Agenericfilecompareroutinemigh</postfix>
 <trace>
  <traceBlock file="cvs\src\filesubr.c" method="xcmp" id="0">
   <traceLine line="628" text="Resource is acquired: &apos;fd1&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="631" text="Resource is lost: &apos;fd1&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=177</url>
</problem>
<problem>
 <problemID>175</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>xchmod</method>
 <line>382</line>
 <column>9</column>
 <code>SV.TOCTOU.FILE_ACCESS</code>
 <message>function &apos;chmod&apos; operates on file names and is vulnerable to race conditions. Files can be manipulated by attackers between creation and access time.</message>
 <anchor>94635133</anchor>
 <prefix>ignedint)mode);if(noexec)return;</prefix>
 <postfix>error(0,errno,&quot;cannotchangemodeo</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO01-C"/>
  <taxonomy name="CWE" metaInf="367"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=175</url>
</problem>
<problem>
 <problemID>178</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>xcmp</method>
 <line>656</line>
 <column>17</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fd2&apos; at line 630 may be lost here. Also there is one similar error on line 660.</message>
 <anchor>-1260817775</anchor>
 <prefix>,buf_size);if(read1==(size_t)-1)</prefix>
 <postfix>read2=block_read(fd2,buf2,buf_si</postfix>
 <trace>
  <traceBlock file="cvs\src\filesubr.c" method="xcmp" id="0">
   <traceLine line="630" text="Resource is acquired: &apos;fd2&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="655" text="read1== (size_t) -1 is true" type="C"/>
   <traceLine line="656" text="Resource is lost: &apos;fd2&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=178</url>
</problem>
<problem>
 <problemID>172</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>isaccessible</method>
 <line>261</line>
 <column>12</column>
 <code>SV.TOCTOU.FILE_ACCESS</code>
 <message>function &apos;access&apos; operates on file names and is vulnerable to race conditions. Files can be manipulated by attackers between creation and access time.</message>
 <anchor>-1423461020</anchor>
 <prefix>rnfalse;#else/*!SETXID_SUPPORT*/</prefix>
 <postfix>#endif/*SETXID_SUPPORT*/}/**Open</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO01-C"/>
  <taxonomy name="CWE" metaInf="367"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=172</url>
</problem>
<problem>
 <problemID>181</problemID>
 <file>cvs\src\find_names.c</file>
 <method>find_rcs</method>
 <line>263</line>
 <column>14</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;comma&apos; returned from call to function &apos;strrchr&apos; at line 262 may be NULL and will be dereferenced at line 263.</message>
 <anchor>697879803</anchor>
 <prefix>r(dp-&gt;d_name,&apos;,&apos;);/*stripthe,v*/</prefix>
 <postfix>p=getnode();p-&gt;type=FILES;p-&gt;key</postfix>
 <trace>
  <traceBlock file="cvs\src\find_names.c" method="find_rcs" id="0">
   <traceLine line="258" text="fnmatch(&quot;*,v&quot;, dp-&gt;d_name, 0) ==0 is true" type="C"/>
   <traceLine line="262" text="&apos;comma&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="263" text="&apos;comma&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=181</url>
</problem>
<problem>
 <problemID>201</problemID>
 <file>cvs\src\hardlink.c</file>
 <method>list_linked_files_on_disk</method>
 <line>209</line>
 <column>15</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;n&apos; returned from call to function &apos;findnode&apos; at line 208 may be NULL and will be dereferenced at line 209.</message>
 <anchor>1401894111</anchor>
 <prefix>*/n=findnode(hardlist,inodestr);</prefix>
 <postfix>free(inodestr);returnn-&gt;data;}/*</postfix>
 <trace>
  <traceBlock file="cvs\src\hardlink.c" method="list_linked_files_on_disk" id="0">
   <traceLine line="208" text="&apos;n&apos; is assigned the return value from function &apos;findnode&apos;." type="E" refId="1"/>
   <traceLine line="209" text="&apos;n&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hash.c" method="findnode" id="1">
   <traceLine line="313" text="findnode" type="E"/>
   <traceLine line="325" text="&apos;findnode&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=201</url>
</problem>
<problem>
 <problemID>221</problemID>
 <file>cvs\src\history.c</file>
 <method>save_file</method>
 <line>942</line>
 <column>32</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;dir&apos; by passing argument 1 to function &apos;strlen&apos; at line 942 before NULL check at line 945</message>
 <anchor>-1952105520</anchor>
 <prefix>));}fl=&amp;file_list[file_count++];</prefix>
 <postfix>fl-&gt;l_module=module;if(dir&amp;&amp;*dir</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="save_file" id="0">
   <traceLine line="942" text="&apos;dir&apos; is dereferenced by being passed as argument 1 to function &apos;strlen&apos;." type="E"/>
   <traceLine line="945" text="&apos;dir&apos; is checked for NULL." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=221</url>
</problem>
<problem>
 <problemID>210</problemID>
 <file>cvs\src\history.c</file>
 <method>history</method>
 <line>491</line>
 <column>17</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from bool to short int may cause loss of data</message>
 <anchor>-1948280311</anchor>
 <prefix>s=xstrdup(optarg);break;case&apos;z&apos;:</prefix>
 <postfix>(optarg[0]==&apos;l&apos;||optarg[0]==&apos;L&apos;)</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=210</url>
</problem>
<problem>
 <problemID>213</problemID>
 <file>cvs\src\history.c</file>
 <method>report_hrecs</method>
 <line>1521</line>
 <column>58</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;lr-&gt;mod&apos; checked for NULL at line 1502 may be dereferenced at line 1521. Also there are 3 similar errors on line(s) 1521, 1532.</message>
 <anchor>449309457</anchor>
 <prefix>sitoryisa&quot;tagtype&quot;,revisthetag*/</prefix>
 <postfix>repos);if(working)(void)printf(&quot;</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="report_hrecs" id="0">
   <traceLine line="1500" text="(cp=strrchr(workdir,  &apos;/&apos; ) ) != ( (void* )0) is true" type="C"/>
   <traceLine line="1502" text="&apos;lr-&gt;mod&apos; is checked for NULL." type="E"/>
   <traceLine line="1502" text="lr-&gt;mod&amp;&amp; !strcmp( ++cp, lr-&gt;mod) is false" type="C"/>
   <traceLine line="1511" text="lr-&gt;mod&amp;&amp; !strcmp( ++cp, lr-&gt;mod) is false" type="C"/>
   <traceLine line="1519" text="ty==&apos;T&apos; is true" type="C"/>
   <traceLine line="1521" text="&apos;lr-&gt;mod&apos; is dereferenced by formatted printing function &apos;printf&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=213</url>
</problem>
<problem>
 <problemID>214</problemID>
 <file>cvs\src\history.c</file>
 <method>report_hrecs</method>
 <line>1495</line>
 <column>19</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;tm&apos; returned from call to function &apos;localtime&apos; at line 1492 may be NULL and will be dereferenced at line 1495.</message>
 <anchor>1966096747</anchor>
 <prefix>4d-%02d-%02d%02d:%02d%s%-*s&quot;,ty,</prefix>
 <postfix>tm-&gt;tm_min,tz_name,user_len,lr-&gt;</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="report_hrecs" id="0">
   <traceLine line="1486" text="!tz_local is false" type="C"/>
   <traceLine line="1492" text="&apos;tm&apos; is assigned the return value from function &apos;localtime&apos;." type="E"/>
   <traceLine line="1495" text="&apos;tm&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=214</url>
</problem>
<problem>
 <problemID>224</problemID>
 <file>cvs\src\history.c</file>
 <method>read_hrecs</method>
 <line>1081</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fd&apos; at line 1077 may be lost here. Also there are 5 similar errors on line(s) 1084, 1103, 1118.</message>
 <anchor>-1513087983</anchor>
 <prefix>&quot;,fname);if(fstat(fd,&amp;st_buf)&lt;0)</prefix>
 <postfix>if(!(st_buf.st_size))error(1,0,&quot;</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="read_hrecs" id="0">
   <traceLine line="1077" text="Resource is acquired: &apos;fd&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="1081" text="Resource is lost: &apos;fd&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=224</url>
</problem>
<problem>
 <problemID>215</problemID>
 <file>cvs\src\history.c</file>
 <method>save_file</method>
 <line>942</line>
 <column>47</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;name&apos; by passing argument 1 to function &apos;strlen&apos; at line 942 before NULL check at line 961</message>
 <anchor>2132243090</anchor>
 <prefix>));}fl=&amp;file_list[file_count++];</prefix>
 <postfix>fl-&gt;l_module=module;if(dir&amp;&amp;*dir</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="save_file" id="0">
   <traceLine line="942" text="&apos;name&apos; is dereferenced by being passed as argument 1 to function &apos;strlen&apos;." type="E"/>
   <traceLine line="961" text="&apos;name&apos; is checked for NULL." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=215</url>
</problem>
<problem>
 <problemID>218</problemID>
 <file>cvs\src\history.c</file>
 <method>select_hrec</method>
 <line>1393</line>
 <column>13</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;cmpfile&apos; allocated through function &apos;xmalloc&apos; at line 1359 can be lost at line 1393. Also there is one similar error on line 1396.</message>
 <anchor>-642540260</anchor>
 <prefix>/*foundmodule*/break;}if(!count)</prefix>
 <postfix>}return1;/*Selectthisrecordunles</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="select_hrec" id="0">
   <traceLine line="1357" text="strchr(cp,  &apos;/&apos; ) is true" type="C"/>
   <traceLine line="1359" text="Dynamic memory stored in &apos;cmpfile&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="1364" text="cp2 = cmpfile: copies &apos;cmpfile&apos; into &apos;cp2&apos;" type="E"/>
   <traceLine line="1372" text="within(cp, cp2) is true" type="C"/>
   <traceLine line="1375" text="Break statement causes loop exit." type="E" refId="3"/>
   <traceLine line="1375" text="End of scope for &apos;cmpfile&apos;" type="E"/>
   <traceLine line="1389" text="!strcmp(hr-&gt;mod,  *cpp) is false" type="C"/>
   <traceLine line="1389" text="hr-&gt;mod&amp;&amp; !strcmp(hr-&gt;mod,  *cpp) is false" type="C"/>
   <traceLine line="1393" text="Dynamic memory stored in &apos;cp2&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\history.c" method="select_hrec" id="3">
   <traceLine line="1335" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=218</url>
</problem>
<problem>
 <problemID>220</problemID>
 <file>cvs\src\history.c</file>
 <method>fill_hrec</method>
 <line>1035</line>
 <column>9</column>
 <code>SV.TAINTED.INDEX_ACCESS</code>
 <message>Unvalidated integer value &apos;strtoul(cp,  ( (void* )0), 16)&apos; is received from an external function through a call to &apos;strtoul&apos; at line 1035 which can be used to access array at line 1035. Use of unvalidated user input for array index can lead to a buffer overflow and denial of service condition. Check integers for reasonable limits.</message>
 <anchor>-1460162677</anchor>
 <prefix>hr-&gt;dir,&apos;*&apos;))!=NULL){*cp++=&apos;\0&apos;;</prefix>
 <postfix>}elsehr-&gt;end=line-1;/*Ahandypoin</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="fill_hrec" id="0">
   <traceLine line="1035" text="Tainted data &apos;strtoul(cp,  ( (void* )0), 16)&apos; comes from call to &apos;strtoul&apos;." type="E"/>
   <traceLine line="1035" text="Tainted data &apos;strtoul(cp,  ( (void* )0), 16)&apos; is used in index expression." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="ARR30-C"/>
  <taxonomy name="CWE" metaInf="129"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=220</url>
</problem>
<problem>
 <problemID>226</problemID>
 <file>cvs\src\ignore.c</file>
 <method>ign_add</method>
 <line>236</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;s_ign_list&apos; allocated through function &apos;xmalloc&apos; at line 236 can be lost at line 236</message>
 <anchor>101137811</anchor>
 <prefix>)free(ign_list[i]);ign_hold=-1;}</prefix>
 <postfix>for(i=0;i&lt;ign_count;i++)s_ign_li</postfix>
 <trace>
  <traceBlock file="cvs\src\ignore.c" method="ign_add" id="0">
   <traceLine line="236" text="Dynamic memory stored in &apos;s_ign_list&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="206" text="!hold is false" type="C"/>
   <traceLine line="230" text="ign_hold&gt;=0 is false" type="C"/>
   <traceLine line="236" text="Dynamic memory stored in &apos;s_ign_list&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=226</url>
</problem>
<problem>
 <problemID>243</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>242</line>
 <column>6</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;cp&apos; returned from call to function &apos;strrchr&apos; at line 241 may be NULL and will be dereferenced at line 242.</message>
 <anchor>239075987</anchor>
 <prefix>(vbranch);cp=strrchr(vhead,&apos;.&apos;);</prefix>
 <postfix>#ifdefCLIENT_SUPPORTif(current_p</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="241" text="&apos;cp&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="242" text="&apos;cp&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=243</url>
</problem>
<problem>
 <problemID>235</problemID>
 <file>cvs\src\import.c</file>
 <method>get_comment</method>
 <line>996</line>
 <column>17</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>+)if(isupper((unsignedchar)*cp))</prefix>
 <postfix>suffix=suffix_path;}elsesuffix=&quot;</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=235</url>
</problem>
<problem>
 <problemID>236</problemID>
 <file>cvs\src\import.c</file>
 <method>add_log</method>
 <line>1658</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>)/*writetoterminal*/{charbuf[2];</prefix>
 <postfix>buf[1]=&apos;&apos;;cvs_output(buf,2);if(r</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=236</url>
</problem>
<problem>
 <problemID>238</problemID>
 <file>cvs\src\import.c</file>
 <method>add_rcs_file</method>
 <line>1254</line>
 <column>12</column>
 <code>SV.STRBO.UNBOUND_SPRINTF</code>
 <message>function &apos;sprintf&apos; does not check buffer boundaries but outputs to the buffer &apos;altdate1&apos; of fixed size (50)</message>
 <anchor>488046170</anchor>
 <prefix>oid)time(&amp;now);ftm=gmtime(&amp;now);</prefix>
 <postfix>ftm-&gt;tm_year+(ftm-&gt;tm_year&lt;100?0</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="STR31-C"/>
  <taxonomy name="CWE" metaInf="120, 242"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=238</url>
</problem>
<problem>
 <problemID>229</problemID>
 <file>cvs\src\import.c</file>
 <method>add_rcs_file</method>
 <line>1254</line>
 <column>21</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;altdate1&apos; may be out of bounds. Array &apos;altdate1&apos; of size 50 may use index value(s) 0..65</message>
 <anchor>2031365690</anchor>
 <prefix>oid)time(&amp;now);ftm=gmtime(&amp;now);</prefix>
 <postfix>ftm-&gt;tm_year+(ftm-&gt;tm_year&lt;100?0</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="add_rcs_file" id="0">
   <traceLine line="1068" text="Array &apos;altdate1&apos; size is 50." type="E"/>
   <traceLine line="1254" text="&apos;altdate1&apos; is passed as an argument to function &apos;sprintf&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\import.c" method="add_rcs_file" id="1">
   <traceLine line="1254" text="Length of format string &quot;%02d.%02d.%02d.%02d.%02d.%02d&quot; is 65." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\import.c" method="add_rcs_file" id="2">
   <traceLine line="1254" text="Length of non-format characters is 5." type="E"/>
   <traceLine line="1254" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_year+ (ftm-&gt;tm_year&lt;100?0:1900)&apos; is 10." type="E"/>
   <traceLine line="1254" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_mon+1&apos; is 10." type="E"/>
   <traceLine line="1254" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_mday&apos; is 10." type="E"/>
   <traceLine line="1254" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_hour&apos; is 10." type="E"/>
   <traceLine line="1254" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_min&apos; is 10." type="E"/>
   <traceLine line="1254" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_sec&apos; is 10." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=229</url>
</problem>
<problem>
 <problemID>227</problemID>
 <file>cvs\src\import.c</file>
 <method>add_rcs_file</method>
 <line>1471</line>
 <column>17</column>
 <code>NPD.GEN.MIGHT</code>
 <message>Null pointer &apos;fpuser&apos; that comes from line 1153 may be dereferenced at line 1471.</message>
 <anchor>591338427</anchor>
 <prefix>ose%s&quot;,rcs);write_error_noclose:</prefix>
 <postfix>error(0,errno,&quot;cannotclose%s&quot;,us</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="add_rcs_file" id="0">
   <traceLine line="1153" text="&apos;fpuser&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="1158" text="file_type==32768 is false" type="C"/>
   <traceLine line="1471" text="&apos;fpuser&apos; is dereferenced by passing argument 1 to function &apos;fclose&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=227</url>
</problem>
<problem>
 <problemID>231</problemID>
 <file>cvs\src\import.c</file>
 <method>add_rev</method>
 <line>783</line>
 <column>5</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;ierrno&apos; is never used after assignment</message>
 <anchor>-1192121571</anchor>
 <prefix>_modtime?RCS_FLAGS_MODTIME:0)));</prefix>
 <postfix>if((tocvsPath!=NULL)&amp;&amp;(unlink_fi</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=231</url>
</problem>
<problem>
 <problemID>232</problemID>
 <file>cvs\src\import.c</file>
 <method>add_tags</method>
 <line>826</line>
 <column>9</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;ierrno&apos; is never used after assignment. Also there is one similar error on line 850.</message>
 <anchor>-1192121571</anchor>
 <prefix>S_settag(rcs,vtag,vbranch))!=0){</prefix>
 <postfix>fperrmsg(logfp,0,retcode==-1?ier</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=232</url>
</problem>
<problem>
 <problemID>239</problemID>
 <file>cvs\src\import.c</file>
 <method>add_rev</method>
 <line>775</line>
 <column>27</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 775.</message>
 <anchor>-1190332846</anchor>
 <prefix>,vbranch,1)!=0)return1;locked=1;</prefix>
 <postfix>}tocvsPath=wrap_tocvs_process_fi</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="add_rev" id="0">
   <traceLine line="775" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=239</url>
</problem>
<problem>
 <problemID>240</problemID>
 <file>cvs\src\import.c</file>
 <method>add_rev</method>
 <line>800</line>
 <column>31</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 800.</message>
 <anchor>-1190332846</anchor>
 <prefix>(void)RCS_unlock(rcs,vbranch,0);</prefix>
 <postfix>}return(1);}return(0);}/**Addthe</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="add_rev" id="0">
   <traceLine line="800" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=240</url>
</problem>
<problem>
 <problemID>241</problemID>
 <file>cvs\src\import.c</file>
 <method>add_tags</method>
 <line>833</line>
 <column>23</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 833.</message>
 <anchor>-1190332846</anchor>
 <prefix>n%s&quot;,vtag,rcs-&gt;path);return(1);}</prefix>
 <postfix>memset(&amp;finfo,0,sizeoffinfo);fin</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="add_tags" id="0">
   <traceLine line="833" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=241</url>
</problem>
<problem>
 <problemID>242</problemID>
 <file>cvs\src\import.c</file>
 <method>add_tags</method>
 <line>847</line>
 <column>31</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 847.</message>
 <anchor>-1190332846</anchor>
 <prefix>(rcs,targv[i],vers-&gt;vn_rcs))==0)</prefix>
 <postfix>else{ierrno=errno;fperrmsg(logfp</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="add_tags" id="0">
   <traceLine line="846" text="(retcode=RCS_settag(rcs, targv[i], vers-&gt;vn_rcs) ) ==0 is true" type="C"/>
   <traceLine line="847" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=242</url>
</problem>
<problem>
 <problemID>234</problemID>
 <file>cvs\src\import.c</file>
 <method>add_rcs_file</method>
 <line>1450</line>
 <column>9</column>
 <code>SV.TOCTOU.FILE_ACCESS</code>
 <message>function &apos;chmod&apos; operates on file names and is vulnerable to race conditions. Files can be manipulated by attackers between creation and access time.</message>
 <anchor>94635133</anchor>
 <prefix>ask&amp;~(S_IWRITE|S_IWGRP|S_IWOTH);</prefix>
 <postfix>{ierrno=errno;if(add_logfp!=NULL</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO01-C"/>
  <taxonomy name="CWE" metaInf="367"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=234</url>
</problem>
<problem>
 <problemID>256</problemID>
 <file>cvs\src\lock.c</file>
 <method>lock_name</method>
 <line>201</line>
 <column>62</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>DIR(sb.st_mode))gotocreated;else</prefix>
 <postfix>}/*Nowaddthedirectoriesoneatatim</postfix>
 <trace>
  <traceBlock file="cvs\src\lock.c" method="lock_name" id="0">
   <traceLine line="201" text="Call to &apos;error(1, 0, &quot;%s is not a directory&quot;, retval)&apos; never returns." type="E"/>
   <traceLine line="201" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=256</url>
</problem>
<problem>
 <problemID>255</problemID>
 <file>cvs\src\lock.c</file>
 <method>lock_name</method>
 <line>267</line>
 <column>13</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;saved_umask&apos; is never used after assignment</message>
 <anchor>413226281</anchor>
 <prefix>assert(umask(save_umask)==0000);</prefix>
 <postfix>}}returnretval;}/*Removethelockf</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=255</url>
</problem>
<problem>
 <problemID>272</problemID>
 <file>cvs\src\log.c</file>
 <method>log_expand_revlist</method>
 <line>1047</line>
 <column>42</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;r-&gt;first&apos; checked for NULL at line 1034 may be dereferenced at line 1047.</message>
 <anchor>-889988333</anchor>
 <prefix>/*Printjusttheheadofthebranch.*/</prefix>
 <postfix>nr-&gt;first=RCS_getbranch(rcs,r-&gt;f</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_expand_revlist" id="0">
   <traceLine line="1034" text="&apos;r-&gt;first&apos; is checked for NULL." type="E"/>
   <traceLine line="1034" text="r-&gt;first== ( (void* )0) is true" type="C"/>
   <traceLine line="1034" text="r-&gt;last== ( (void* )0) is false" type="C"/>
   <traceLine line="1034" text="r-&gt;first== ( (void* )0) &amp;&amp;r-&gt;last== ( (void* )0) is false" type="C"/>
   <traceLine line="1042" text="r-&gt;branchhead is true" type="C"/>
   <traceLine line="1047" text="&apos;r-&gt;first&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=272</url>
</problem>
<problem>
 <problemID>264</problemID>
 <file>cvs\src\log.c</file>
 <method>log_expand_revlist</method>
 <line>1199</line>
 <column>41</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;p&apos; returned from call to function &apos;strchr&apos; at line 1199 may be NULL and will be dereferenced at line 1199. Also there is one similar error on line 1200.</message>
 <anchor>1344927806</anchor>
 <prefix>-&gt;last;for(i=0;i&lt;nr-&gt;fields;i++)</prefix>
 <postfix>p[-1]=&apos;\0&apos;;p=strchr(nr-&gt;first+(p</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_expand_revlist" id="0">
   <traceLine line="1198" text="Continue loop iteration, while i&lt;nr-&gt;fields is true" type="C"/>
   <traceLine line="1199" text="&apos;strchr(p,  &apos;.&apos; )&apos; is assigned the return value from function &apos;strchr&apos;." type="E"/>
   <traceLine line="1199" text="p = &amp;strchr(p,  &apos;.&apos; )[1]" type="E"/>
   <traceLine line="1199" text="&apos;p&apos; is dereferenced by passing argument 1 to function &apos;strchr&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=264</url>
</problem>
<problem>
 <problemID>279</problemID>
 <file>cvs\src\log.c</file>
 <method>log_expand_revlist</method>
 <line>1210</line>
 <column>25</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;nr-&gt;last&apos; allocated through function &apos;RCS_gettag&apos; at line 1100 can be lost at line 1210. Also there are 8 similar errors on line(s) 1210, 1219.</message>
 <anchor>1060251272</anchor>
 <prefix>nr-&gt;fields+=2;}else++nr-&gt;fields;</prefix>
 <postfix>}}}}nr-&gt;next=NULL;*pr=nr;pr=&amp;nr-</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_expand_revlist" id="0">
   <traceLine line="1097" text="RCS_nodeisbranch(rcs, r-&gt;last) is false" type="C"/>
   <traceLine line="1100" text="Dynamic memory stored in &apos;nr-&gt;last&apos; is allocated by calling function &apos;RCS_gettag&apos;." type="E" refId="1"/>
   <traceLine line="1101" text="nr-&gt;last== ( (void* )0) &amp;&amp; !really_quiet is false" type="C"/>
   <traceLine line="1112" text="r-&gt;first== ( (void* )0) &amp;&amp;nr-&gt;last!= ( (void* )0) is false" type="C"/>
   <traceLine line="1126" text="r-&gt;last== ( (void* )0) &amp;&amp;nr-&gt;first!= ( (void* )0) is false" type="C"/>
   <traceLine line="1140" text="nr-&gt;first== ( (void* )0) ||nr-&gt;last== ( (void* )0) is false" type="C"/>
   <traceLine line="1142" text="strcmp(nr-&gt;first, nr-&gt;last) ==0 is false" type="C"/>
   <traceLine line="1150" text="version_compare(nr-&gt;first, nr-&gt;last, dots1+1) &gt;0 is false" type="C"/>
   <traceLine line="1149" text="dots1&gt;dots2|| (dots1==dots2&amp;&amp;version_compare(nr-&gt;first, nr-&gt;last, dots1+1) &gt;0) is false" type="C"/>
   <traceLine line="1163" text="ord&lt;0 is false" type="C"/>
   <traceLine line="1163" text="ord&gt;0|| (nr-&gt;fields&gt;2&amp;&amp;ord&lt;0) is false" type="C"/>
   <traceLine line="1185" text="Entering loop, because nr-&gt;fields&lt;=dots2 is true" type="C"/>
   <traceLine line="1191" text="*pr = nr: &apos;(*pr)-&gt;last&apos; now references the same memory as &apos;nr-&gt;last&apos;" type="E"/>
   <traceLine line="1210" text="Dynamic memory stored in &apos;( *pr) -&gt;last&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_gettag" id="1">
   <traceLine line="2284" text="&apos;version&apos; is allocated by calling function &apos;translate_symtag&apos;." type="E" refId="2"/>
   <traceLine line="2285" text="version!= ( (void* )0) is true" type="C"/>
   <traceLine line="2290" text="tag = version: copies &apos;version&apos; into &apos;tag&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="translate_symtag" id="2">
   <traceLine line="3230" text="&apos;r&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=279</url>
</problem>
<problem>
 <problemID>276</problemID>
 <file>cvs\src\log.c</file>
 <method>log_expand_revlist</method>
 <line>1137</line>
 <column>22</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;cp&apos; returned from call to function &apos;strrchr&apos; at line 1136 may be NULL and will be dereferenced at line 1137. Also there is one similar error on line 1237.</message>
 <anchor>239075987</anchor>
 <prefix>har*cp;cp=strrchr(nr-&gt;last,&apos;.&apos;);</prefix>
 <postfix>}}elseif(nr-&gt;first==NULL||nr-&gt;la</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_expand_revlist" id="0">
   <traceLine line="1130" text="nr-&gt;fields&lt;2 is false" type="C"/>
   <traceLine line="1136" text="&apos;cp&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="1137" text="&apos;cp&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=276</url>
</problem>
<problem>
 <problemID>277</problemID>
 <file>cvs\src\log.c</file>
 <method>log_branch</method>
 <line>1665</line>
 <column>10</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;cp&apos; returned from call to function &apos;strrchr&apos; at line 1664 may be NULL and will be dereferenced at line 1665.</message>
 <anchor>239075987</anchor>
 <prefix>trdup(p-&gt;key);cp=strrchr(f,&apos;.&apos;);</prefix>
 <postfix>cvs_output(f,0);free(f);}cvs_out</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_branch" id="0">
   <traceLine line="1664" text="&apos;cp&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="1665" text="&apos;cp&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=277</url>
</problem>
<problem>
 <problemID>273</problemID>
 <file>cvs\src\log.c</file>
 <method>log_expand_revlist</method>
 <line>1210</line>
 <column>25</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;nr-&gt;first&apos; allocated through function &apos;RCS_gettag&apos; at line 1082 can be lost at line 1210. Also there are 6 similar errors on line(s) 1210, 1219.</message>
 <anchor>448482744</anchor>
 <prefix>nr-&gt;fields+=2;}else++nr-&gt;fields;</prefix>
 <postfix>}}}}nr-&gt;next=NULL;*pr=nr;pr=&amp;nr-</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_expand_revlist" id="0">
   <traceLine line="1079" text="RCS_nodeisbranch(rcs, r-&gt;first) is false" type="C"/>
   <traceLine line="1082" text="Dynamic memory stored in &apos;nr-&gt;first&apos; is allocated by calling function &apos;RCS_gettag&apos;." type="E" refId="1"/>
   <traceLine line="1083" text="nr-&gt;first== ( (void* )0) &amp;&amp; !really_quiet is false" type="C"/>
   <traceLine line="1090" text="r-&gt;last!= ( (void* )0) &amp;&amp;r-&gt;first!= ( (void* )0) is true" type="C"/>
   <traceLine line="1090" text="r-&gt;last==r-&gt;first|| (r-&gt;last!= ( (void* )0) &amp;&amp;r-&gt;first!= ( (void* )0) &amp;&amp;strcmp(r-&gt;last, r-&gt;first) ==0) is false" type="C"/>
   <traceLine line="1112" text="r-&gt;first== ( (void* )0) &amp;&amp;nr-&gt;last!= ( (void* )0) is false" type="C"/>
   <traceLine line="1126" text="r-&gt;last== ( (void* )0) &amp;&amp;nr-&gt;first!= ( (void* )0) is false" type="C"/>
   <traceLine line="1140" text="nr-&gt;first== ( (void* )0) ||nr-&gt;last== ( (void* )0) is false" type="C"/>
   <traceLine line="1142" text="strcmp(nr-&gt;first, nr-&gt;last) ==0 is false" type="C"/>
   <traceLine line="1150" text="version_compare(nr-&gt;first, nr-&gt;last, dots1+1) &gt;0 is false" type="C"/>
   <traceLine line="1149" text="dots1&gt;dots2|| (dots1==dots2&amp;&amp;version_compare(nr-&gt;first, nr-&gt;last, dots1+1) &gt;0) is false" type="C"/>
   <traceLine line="1163" text="ord&lt;0 is false" type="C"/>
   <traceLine line="1163" text="ord&gt;0|| (nr-&gt;fields&gt;2&amp;&amp;ord&lt;0) is false" type="C"/>
   <traceLine line="1176" text="nr-&gt;fields&amp;1 is false" type="C"/>
   <traceLine line="1176" text="nr-&gt;fields&lt;=dots2&amp;&amp; (nr-&gt;fields&amp;1) is false" type="C"/>
   <traceLine line="1185" text="Entering loop, because nr-&gt;fields&lt;=dots2 is true" type="C"/>
   <traceLine line="1191" text="*pr = nr: &apos;(*pr)-&gt;first&apos; now references the same memory as &apos;nr-&gt;first&apos;" type="E"/>
   <traceLine line="1210" text="Dynamic memory stored in &apos;*pr-&gt;first&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_gettag" id="1">
   <traceLine line="2284" text="&apos;version&apos; is allocated by calling function &apos;translate_symtag&apos;." type="E" refId="2"/>
   <traceLine line="2285" text="version!= ( (void* )0) is true" type="C"/>
   <traceLine line="2290" text="tag = version: copies &apos;version&apos; into &apos;tag&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="translate_symtag" id="2">
   <traceLine line="3230" text="&apos;r&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=273</url>
</problem>
<problem>
 <problemID>281</problemID>
 <file>cvs\src\login.c</file>
 <method>password_entry_parseline</method>
 <line>121</line>
 <column>13</column>
 <code>UNINIT.STACK.MIGHT</code>
 <message>&apos;q&apos; might be used uninitialized in this function.</message>
 <anchor>113</anchor>
 <prefix>ersion=strtoul(linebuf+1,&amp;q,10);</prefix>
 <postfix>/*novaliddigitsfoundbystrtoul*/e</postfix>
 <trace>
  <traceBlock file="cvs\src\login.c" method="password_entry_parseline" id="0">
   <traceLine line="112" text="&apos;q&apos; is declared." type="E"/>
   <traceLine line="115" text="( (_ctype_+1) [ (unsigned) ( * (linebuf+1) ) ] &amp;8) is true" type="C"/>
   <traceLine line="121" text="&apos;q&apos; is used, but is uninitialized." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP33-C"/>
  <taxonomy name="CWE" metaInf="457"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=281</url>
</problem>
<problem>
 <problemID>283</problemID>
 <file>cvs\src\login.c</file>
 <method>construct_cvspass_filename</method>
 <line>66</line>
 <column>9</column>
 <code>SV.TOCTOU.FILE_ACCESS</code>
 <message>function &apos;chmod&apos; operates on file names and is vulnerable to race conditions. Files can be manipulated by attackers between creation and access time.</message>
 <anchor>94635133</anchor>
 <prefix>ssfile))/*xchmod()istoopolite.*/</prefix>
 <postfix>returnpassfile;}/**staticchar**p</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO01-C"/>
  <taxonomy name="CWE" metaInf="367"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=283</url>
</problem>
<problem>
 <problemID>291</problemID>
 <file>cvs\src\logmsg.c</file>
 <method>do_verify</method>
 <line>471</line>
 <column>27</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1012791648</anchor>
 <prefix>pen_file(data.fname,&quot;r&quot;))==NULL)</prefix>
 <postfix>/*OnNT,wemightreadlessthanst_siz</postfix>
 <trace>
  <traceBlock file="cvs\src\logmsg.c" method="do_verify" id="0">
   <traceLine line="470" text="Infeasible condition: &apos;(fp=open_file(data.fname, &quot;r&quot; ) ) == ( (void* )0)&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="471" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\logmsg.c" method="do_verify" id="1">
   <traceLine line="470" text="Inferred value &apos;fp&apos; is &apos;!= 0&apos;" type="E"/>
   <traceLine line="470" text="Result of expression &apos;fp != 0&apos; is &apos;== 1&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=291</url>
</problem>
<problem>
 <problemID>293</problemID>
 <file>cvs\src\logmsg.c</file>
 <method>do_editor</method>
 <line>256</line>
 <column>21</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;tfp&apos; at line 236 may be lost here.</message>
 <anchor>551195763</anchor>
 <prefix>;nwrite-=n;p+=n;}if(ferror(tfp))</prefix>
 <postfix>}if(fclose(tfp)&lt;0)error(0,errno,</postfix>
 <trace>
  <traceBlock file="cvs\src\logmsg.c" method="do_editor" id="0">
   <traceLine line="224" text="repository!= ( (void* )0) is false" type="C"/>
   <traceLine line="236" text="Resource is acquired: &apos;tfp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="237" text="tfp== ( (void* )0) is false" type="C"/>
   <traceLine line="244" text="Entering loop, because ! ( ( (tfp) -&gt;_flags&amp;32) !=0) is true" type="C"/>
   <traceLine line="255" text="( ( (tfp) -&gt;_flags&amp;64) !=0) is true" type="C"/>
   <traceLine line="256" text="Resource is lost: &apos;tfp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=293</url>
</problem>
<problem>
 <problemID>288</problemID>
 <file>cvs\src\logmsg.c</file>
 <method>do_verify</method>
 <line>458</line>
 <column>24</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*messagep&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 406, 413, 436, 506.</message>
 <anchor>934229875</anchor>
 <prefix>gebackintothe*messagepvariable*/</prefix>
 <postfix>if(post_stbuf.st_size==0)*messag</postfix>
 <trace>
  <traceBlock file="cvs\src\logmsg.c" method="do_verify" id="0">
   <traceLine line="406" text="&apos;*messagep&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="413" text="&apos;*messagep&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="436" text="&apos;*messagep&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="506" text="&apos;*messagep&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="458" text="&apos;*messagep&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\logmsg.c" method="do_verify" id="1">
   <traceLine line="397" text="Tracking &apos;*messagep&apos;." type="E"/>
   <traceLine line="458" text="&apos;*messagep&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=288</url>
</problem>
<problem>
 <problemID>292</problemID>
 <file>cvs\src\logmsg.c</file>
 <method>do_verify</method>
 <line>489</line>
 <column>25</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 470 may be lost here. Also there is one similar error on line 489.</message>
 <anchor>-332821330</anchor>
 <prefix>herwisewewillhaveno*logmessage*/</prefix>
 <postfix>break;}if(strncmp(line,CVSEDITPR</postfix>
 <trace>
  <traceBlock file="cvs\src\logmsg.c" method="do_verify" id="0">
   <traceLine line="470" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;open_file&apos;." type="E" refId="1"/>
   <traceLine line="483" text="line_length== -1 is true" type="C"/>
   <traceLine line="489" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="open_file" id="1">
   <traceLine line="275" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="277" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=292</url>
</problem>
<problem>
 <problemID>289</problemID>
 <file>cvs\src\logmsg.c</file>
 <method>do_editor</method>
 <line>308</line>
 <column>30</column>
 <code>PRECISION.LOSS.CALL</code>
 <message>Passing argument 1 to function xmalloc converts long long int to size_t and may cause loss of data</message>
 <anchor>-1947753158</anchor>
 <prefix>utwewon&apos;treadmore.Sothisworks.*/</prefix>
 <postfix>(*messagep)[0]=&apos;\0&apos;;}line=NULL;l</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=289</url>
</problem>
<problem>
 <problemID>290</problemID>
 <file>cvs\src\logmsg.c</file>
 <method>do_verify</method>
 <line>475</line>
 <column>38</column>
 <code>PRECISION.LOSS.CALL</code>
 <message>Passing argument 1 to function xmalloc converts long long int to size_t and may cause loss of data</message>
 <anchor>-1947753158</anchor>
 <prefix>utwewon&apos;treadmore.Sothisworks.*/</prefix>
 <postfix>*messagep[0]=&apos;\0&apos;;for(;;){line_l</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=290</url>
</problem>
<problem>
 <problemID>317</problemID>
 <file>cvs\src\modules.c</file>
 <method>my_module</method>
 <line>291</line>
 <column>13</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;cwd_saved&apos; is never used after assignment</message>
 <anchor>-223297544</anchor>
 <prefix>Failedtosavecurrentdirectory.&quot;);</prefix>
 <postfix>err+=callback_proc(modargc,modar</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=317</url>
</problem>
<problem>
 <problemID>315</problemID>
 <file>cvs\src\modules.c</file>
 <method>my_module</method>
 <line>691</line>
 <column>46</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;real_where&apos; checked for NULL at line 542 may be dereferenced at line 691. Also there is one similar error on line 691.</message>
 <anchor>-691158356</anchor>
 <prefix>;if((*prog!=&apos;/&apos;)&amp;&amp;(*prog!=&apos;.&apos;)){</prefix>
 <postfix>+10);(void)sprintf(real_prog,&quot;%s</postfix>
 <trace>
  <traceBlock file="cvs\src\modules.c" method="my_module" id="0">
   <traceLine line="542" text="where is false" type="C"/>
   <traceLine line="542" text="&apos;mwhere&apos; is checked for NULL." type="E"/>
   <traceLine line="542" text="mwhere is false" type="C"/>
   <traceLine line="603" text="where is false" type="C"/>
   <traceLine line="603" text="mwhere is false" type="C"/>
   <traceLine line="674" text="m_type==CHECKOUT&amp;&amp;checkout_prog!= ( (void* )0) is true" type="C"/>
   <traceLine line="673" text="m_type==TAG&amp;&amp;tag_prog!= ( (void* )0) is true" type="C"/>
   <traceLine line="686" text="where!= ( (void* )0) is false" type="C"/>
   <traceLine line="686" text="mwhere: copies &apos;mwhere&apos;" type="E"/>
   <traceLine line="686" text="real_where = where!= ( (void* )0) ?where:mwhere: copies &apos;...?where:mwhere&apos; into &apos;real_where&apos;" type="E"/>
   <traceLine line="691" text="&apos;real_where&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=315</url>
</problem>
<problem>
 <problemID>316</problemID>
 <file>cvs\src\modules.c</file>
 <method>my_module</method>
 <line>743</line>
 <column>9</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>1091780305</anchor>
 <prefix>ULL)free(value);if(xvalue!=NULL)</prefix>
 <postfix>return(err);}/*Externalfaceofdo_</postfix>
 <trace>
  <traceBlock file="cvs\src\modules.c" method="my_module" id="0">
   <traceLine line="742" text="Infeasible condition: &apos;xvalue!= ( (void* )0)&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="743" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\modules.c" method="my_module" id="1">
   <traceLine line="742" text="Inferred value &apos;xvalue&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="742" text="Result of expression &apos;xvalue != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=316</url>
</problem>
<problem>
 <problemID>319</problemID>
 <file>cvs\src\no_diff.c</file>
 <method>No_Difference</method>
 <line>72</line>
 <column>25</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;p&apos; returned from call to function &apos;findnode&apos; at line 71 may be NULL and will be dereferenced at line 72.</message>
 <anchor>390776861</anchor>
 <prefix>ode(finfo-&gt;entries,finfo-&gt;file);</prefix>
 <postfix>ret=0;}elseret=1;/*fileswerereal</postfix>
 <trace>
  <traceBlock file="cvs\src\no_diff.c" method="No_Difference" id="0">
   <traceLine line="71" text="&apos;p&apos; is assigned the return value from function &apos;findnode&apos;." type="E" refId="1"/>
   <traceLine line="72" text="&apos;p&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hash.c" method="findnode" id="1">
   <traceLine line="313" text="findnode" type="E"/>
   <traceLine line="318" text="&apos;findnode&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=319</url>
</problem>
<problem>
 <problemID>324</problemID>
 <file>cvs\src\patch.c</file>
 <method>patch_proc</method>
 <line>338</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;where&apos; allocated through function &apos;xmalloc&apos; at line 291 can be lost at line 338</message>
 <anchor>2051040961</anchor>
 <prefix>s&quot;,repository);free(repository);</prefix>
 <postfix>}if(force_tag_match)which=W_REPO</postfix>
 <trace>
  <traceBlock file="cvs\src\patch.c" method="patch_proc" id="0">
   <traceLine line="291" text="Dynamic memory stored in &apos;where&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="338" text="Dynamic memory stored in &apos;where&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=324</url>
</problem>
<problem>
 <problemID>400</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkout</method>
 <line>4404</line>
 <column>34</column>
 <code>NPD.FUNC.CALL.MIGHT</code>
 <message>Pointer &apos;value&apos; returned from call to function &apos;rcsbuf_getkey&apos; at line 4155 may be NULL, may be passed to function and may be dereferenced there by passing argument 7 to function &apos;expand_keywords&apos; at line 4404. Also there are 5 similar errors on line(s) 4404, 4520, 4526.</message>
 <anchor>656207512</anchor>
 <prefix>rcs,vp-&gt;data,nametag,log,loglen,</prefix>
 <postfix>if(newvalue!=value){if(free_valu</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="0">
   <traceLine line="4155" text="&apos;value&apos; is assigned the return value from function &apos;rcsbuf_getkey&apos;." type="E" refId="1"/>
   <traceLine line="4155" text="Continue loop iteration, while rcsbuf_getkey( &amp;rcsbuf,  &amp;key,  &amp;value) is true" type="C"/>
   <traceLine line="4157" text="( * (char* ) (key) == * (char* ) (&quot;log&quot;) &amp;&amp;strcmp( (key),  (&quot;log&quot;) ) ==0) is false" type="C"/>
   <traceLine line="4159" text="( * (char* ) (key) == * (char* ) (&quot;text&quot;) &amp;&amp;strcmp( (key),  (&quot;text&quot;) ) ==0) is true" type="C"/>
   <traceLine line="4162" text="Break statement causes loop exit." type="E" refId="2"/>
   <traceLine line="4235" text="Break statement causes loop exit." type="E" refId="3"/>
   <traceLine line="4403" text="&apos;value&apos; is dereferenced by passing argument 7 to function &apos;expand_keywords&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_getkey" id="1">
   <traceLine line="1281" text="c!= &apos;@&apos; is true" type="C"/>
   <traceLine line="1282" text="&apos;*valp&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="1284" text="&apos;*valp&apos; is returned by &apos;rcsbuf_getkey&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="2">
   <traceLine line="4155" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="3">
   <traceLine line="4233" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="expand_keywords" id="4">
   <traceLine line="3580" text="&apos;buf&apos; is passed to function &apos;expand_keywords&apos;." type="E"/>
   <traceLine line="3619" text="srch = buf: copies &apos;buf&apos; into &apos;srch&apos;" type="E"/>
   <traceLine line="3621" text="&apos;srch&apos; is dereferenced by passing argument 1 to function &apos;memchr&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=400</url>
</problem>
<problem>
 <problemID>363</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_deltas</method>
 <line>7316</line>
 <column>18</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;cpversion&apos; returned from call to function &apos;strchr&apos; at line 7182 may be NULL and may be dereferenced at line 7316. Also there are 2 similar errors on line(s) 7316.</message>
 <anchor>477574659</anchor>
 <prefix>dbranchesin%s&quot;,rcs-&gt;print_path);</prefix>
 <postfix>++cpversion;cpversion=strchr(cpv</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_deltas" id="0">
   <traceLine line="7182" text="&apos;cpversion&apos; is assigned the return value from function &apos;strchr&apos;." type="E"/>
   <traceLine line="7183" text="cpversion!= ( (void* )0) is false" type="C"/>
   <traceLine line="7185" text="cpversion!= ( (void* )0) is false" type="C"/>
   <traceLine line="7224" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="7230" text="log!= ( (void* )0) &amp;&amp;isversion&amp;&amp; ( * (char* ) (key) == * (char* ) (&quot;log&quot;) &amp;&amp;strcmp( (key),  (&quot;log&quot;) ) ==0) &amp;&amp; ( * (char* ) (branchversion) == * (char* ) (version) &amp;&amp;strcmp( (branchversion),  (version) ) ==0) is false" type="C"/>
   <traceLine line="7252" text="onbranch is false" type="C"/>
   <traceLine line="7253" text="onbranch is false" type="C"/>
   <traceLine line="7316" text="&apos;cpversion&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=363</url>
</problem>
<problem>
 <problemID>368</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_gettag</method>
 <line>2279</line>
 <column>35</column>
 <code>NPD.CHECK.MUST</code>
 <message>Pointer &apos;symtag&apos; checked for NULL at line 2271 will be dereferenced at line 2279.</message>
 <anchor>-1345310567</anchor>
 <prefix>*/else#endifreturnRCS_head(rcs);</prefix>
 <postfix>{char*version;/*Ifwegotasymbolic</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_gettag" id="0">
   <traceLine line="2271" text="&apos;symtag&apos; is checked for NULL." type="E"/>
   <traceLine line="2271" text="symtag&amp;&amp; ( * (char* ) (symtag) == * (char* ) (&quot;HEAD&quot;) &amp;&amp;strcmp( (symtag),  (&quot;HEAD&quot;) ) ==0) is false" type="C"/>
   <traceLine line="2279" text="&apos;symtag&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=368</url>
</problem>
<problem>
 <problemID>410</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_deltas</method>
 <line>7235</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;*log&apos; allocated through function &apos;rcsbuf_valcopy&apos; at line 7235 can be lost at line 7235</message>
 <anchor>550751584</anchor>
 <prefix>&amp;&amp;STREQ(branchversion,version)){</prefix>
 <postfix>}if(STREQ(key,&quot;text&quot;)){rcsbuf_va</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_deltas" id="0">
   <traceLine line="7235" text="Dynamic memory stored in &apos;*log&apos; is allocated by calling function &apos;rcsbuf_valcopy&apos;." type="E" refId="1"/>
   <traceLine line="7224" text="Continue loop iteration, while 1 is true" type="C"/>
   <traceLine line="7230" text="log!= ( (void* )0) is true" type="C"/>
   <traceLine line="7233" text="* (char* ) (branchversion) == * (char* ) (version) is true" type="C"/>
   <traceLine line="7230" text="log!= ( (void* )0) &amp;&amp;isversion&amp;&amp; ( * (char* ) (key) == * (char* ) (&quot;log&quot;) &amp;&amp;strcmp( (key),  (&quot;log&quot;) ) ==0) &amp;&amp; ( * (char* ) (branchversion) == * (char* ) (version) &amp;&amp;strcmp( (branchversion),  (version) ) ==0) is false" type="C"/>
   <traceLine line="7235" text="Dynamic memory stored in &apos;*log&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_valcopy" id="1">
   <traceLine line="1592" text="&apos;ret&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="2">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="3">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=410</url>
</problem>
<problem>
 <problemID>358</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkout</method>
 <line>4403</line>
 <column>9</column>
 <code>UNINIT.STACK.MIGHT</code>
 <message>&apos;loglen&apos; might be used uninitialized in this function.</message>
 <anchor>-1097332655</anchor>
 <prefix>or%s&quot;,rev==NULL?rcs-&gt;head:rev);}</prefix>
 <postfix>expand,value,len,&amp;newvalue,&amp;len)</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="0">
   <traceLine line="4096" text="&apos;loglen&apos; is declared" type="E"/>
   <traceLine line="4141" text="* (char* ) (rev) == * (char* ) (rcs-&gt;head) &amp;&amp;strcmp( (rev),  (rcs-&gt;head) ) ==0 is true" type="C"/>
   <traceLine line="4141" text="rev== ( (void* )0) || ( * (char* ) (rev) == * (char* ) (rcs-&gt;head) &amp;&amp;strcmp( (rev),  (rcs-&gt;head) ) ==0) is true" type="C"/>
   <traceLine line="4155" text="Entering loop, because rcsbuf_getkey( &amp;rcsbuf,  &amp;key,  &amp;value) is true" type="C"/>
   <traceLine line="4157" text="( * (char* ) (key) == * (char* ) (&quot;log&quot;) &amp;&amp;strcmp( (key),  (&quot;log&quot;) ) ==0) is false" type="C"/>
   <traceLine line="4162" text="Break statement causes loop exit." type="E" refId="1"/>
   <traceLine line="4235" text="Break statement causes loop exit." type="E" refId="2"/>
   <traceLine line="4403" text="&apos;loglen&apos; is used, but is uninitialized." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="1">
   <traceLine line="4155" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="2">
   <traceLine line="4233" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP33-C"/>
  <taxonomy name="CWE" metaInf="457"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=358</url>
</problem>
<problem>
 <problemID>376</problemID>
 <file>cvs\src\rcs.c</file>
 <method>freercsnode</method>
 <line>882</line>
 <column>5</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rnodep&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 873.</message>
 <anchor>1989165606</anchor>
 <prefix>;free_rcsnode_contents(*rnodep);</prefix>
 <postfix>*rnodep=NULL;}/**free_rcsnode_co</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="0">
   <traceLine line="873" text="&apos;*rnodep&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="882" text="&apos;*rnodep&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="1">
   <traceLine line="864" text="Tracking &apos;*rnodep&apos;." type="E"/>
   <traceLine line="882" text="&apos;*rnodep&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=376</url>
</problem>
<problem>
 <problemID>380</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkout</method>
 <line>4553</line>
 <column>21</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;ofp&apos; at line 4484 may be lost here. Also there are 5 similar errors on line(s) 4553.</message>
 <anchor>1598753705</anchor>
 <prefix>t&quot;)));if(free_value)free(value);</prefix>
 <postfix>}p+=nstep;nleft-=nstep;if(nleft&lt;</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="0">
   <traceLine line="4484" text="Resource is acquired: &apos;ofp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="4517" text="workfile== ( (void* )0) is true" type="C"/>
   <traceLine line="4545" text="fwrite(p, 1, nstep, ofp) !=nstep is true" type="C"/>
   <traceLine line="4548" text="workfile!= ( (void* )0) is false" type="C"/>
   <traceLine line="4550" text="sout!= (char* )0 is true" type="C"/>
   <traceLine line="4553" text="Resource is lost: &apos;ofp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=380</url>
</problem>
<problem>
 <problemID>332</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_cmp_file</method>
 <line>5645</line>
 <column>17</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 5634 may be lost here.</message>
 <anchor>1303575983</anchor>
 <prefix>,RUN_TTY,cmp_file_buffer,&amp;data))</prefix>
 <postfix>&quot;cannotcheckoutrevision%sof%s&quot;,r</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_cmp_file" id="0">
   <traceLine line="5634" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="5640" text="&apos;data.fp&apos;" type="E"/>
   <traceLine line="5640" text="&apos;fp&apos; is copied to &apos;data.fp&apos;." type="E"/>
   <traceLine line="5643" text="&apos;data.fp&apos; might be changed." type="E"/>
   <traceLine line="5645" text="Resource is lost: &apos;data.fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=332</url>
</problem>
<problem>
 <problemID>381</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkin</method>
 <line>5307</line>
 <column>20</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;nodep&apos; returned from call to function &apos;findnode&apos; at line 5306 may be NULL and will be dereferenced at line 5307.</message>
 <anchor>405588639</anchor>
 <prefix>dep=findnode(rcs-&gt;versions,tip);</prefix>
 <postfix>free(branch);free(newrev);free(t</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="0">
   <traceLine line="5306" text="&apos;nodep&apos; is assigned the return value from function &apos;findnode&apos;." type="E" refId="1"/>
   <traceLine line="5307" text="&apos;nodep&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hash.c" method="findnode" id="1">
   <traceLine line="313" text="findnode" type="E"/>
   <traceLine line="318" text="&apos;findnode&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=381</url>
</problem>
<problem>
 <problemID>382</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_delete_revs</method>
 <line>6318</line>
 <column>16</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;nodep&apos; returned from call to function &apos;findnode&apos; at line 6317 may be NULL and will be dereferenced at line 6318. Also there are 7 similar errors on line(s) 6335, 6342, 6365, 6538, 6566, 6590, 6607.</message>
 <anchor>405588639</anchor>
 <prefix>node(rcs-&gt;versions,branchpoint);</prefix>
 <postfix>while(revp-&gt;next!=NULL&amp;&amp;!STREQ(r</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_delete_revs" id="0">
   <traceLine line="6314" text="! ( * (char* ) (rev1) == * (char* ) (branchpoint) &amp;&amp;strcmp( (rev1),  (branchpoint) ) ==0) is true" type="C"/>
   <traceLine line="6317" text="&apos;nodep&apos; is assigned the return value from function &apos;findnode&apos;." type="E" refId="1"/>
   <traceLine line="6318" text="&apos;nodep&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hash.c" method="findnode" id="1">
   <traceLine line="313" text="findnode" type="E"/>
   <traceLine line="318" text="&apos;findnode&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=382</url>
</problem>
<problem>
 <problemID>336</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_check_kflag</method>
 <line>3288</line>
 <column>12</column>
 <code>SV.STRBO.UNBOUND_SPRINTF</code>
 <message>function &apos;sprintf&apos; does not check buffer boundaries but outputs to the buffer &apos;karg&apos; of fixed size (10)</message>
 <anchor>2103574059</anchor>
 <prefix>pp==NULL){usage(keyword_usage);}</prefix>
 <postfix>returnxstrdup(karg);}/**Dosomeco</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="STR31-C"/>
  <taxonomy name="CWE" metaInf="120, 242"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=336</url>
</problem>
<problem>
 <problemID>351</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkin</method>
 <line>5246</line>
 <column>17</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;dots&apos; is never used after assignment</message>
 <anchor>3089482</anchor>
 <prefix>(newrev)+3);strcat(newrev,&quot;.1&quot;);</prefix>
 <postfix>}}elseif(dots==1)tip=xstrdup(rcs</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=351</url>
</problem>
<problem>
 <problemID>392</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkout</method>
 <line>4595</line>
 <column>15</column>
 <code>SV.TOCTOU.FILE_ACCESS</code>
 <message>function &apos;chmod&apos; operates on file names and is vulnerable to race conditions. Files can be manipulated by attackers between creation and access time.</message>
 <anchor>94635133</anchor>
 <prefix>nnotclose%s&quot;,workfile);return1;}</prefix>
 <postfix>sb.st_mode&amp;~(S_IWRITE|S_IWGRP|S_</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO01-C"/>
  <taxonomy name="CWE" metaInf="367"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=392</url>
</problem>
<problem>
 <problemID>390</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_copydeltas</method>
 <line>8073</line>
 <column>18</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;np&apos; returned from call to function &apos;findnode&apos; at line 8072 may be NULL and will be dereferenced at line 8073.</message>
 <anchor>-1282248693</anchor>
 <prefix>e(rcs-&gt;versions,dtext-&gt;version);</prefix>
 <postfix>/*Ifthisrevisionhasbeenoutdated,</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="0">
   <traceLine line="8072" text="&apos;np&apos; is assigned the return value from function &apos;findnode&apos;." type="E" refId="1"/>
   <traceLine line="8073" text="&apos;np&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hash.c" method="findnode" id="1">
   <traceLine line="313" text="findnode" type="E"/>
   <traceLine line="325" text="&apos;findnode&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=390</url>
</problem>
<problem>
 <problemID>338</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_rewrite</method>
 <line>8439</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fin&apos; at line 8430 may be lost here.</message>
 <anchor>-1425703822</anchor>
 <prefix>llo(fout);if(rcs-&gt;delta_pos==-1)</prefix>
 <postfix>RCS_copydeltas(rcs,fin,&amp;rcsbufin</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="0">
   <traceLine line="8430" text="Resource is acquired: &apos;fin&apos; is accessed via 3 argument of the call to function &apos;rcsbuf_cache_open&apos;." type="E" refId="1"/>
   <traceLine line="8439" text="Resource is lost: &apos;fin&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_cache_open" id="1">
   <traceLine line="1965" text="Resource is acquired: &apos;*pfp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="1979" text="Resource descriptor is returned: &apos;*pfp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=338</url>
</problem>
<problem>
 <problemID>375</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_reparsercsfile</method>
 <line>585</line>
 <column>13</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;rdata-&gt;desc&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 600.</message>
 <anchor>1444767198</anchor>
 <prefix>`%s&apos;inRCSfile`%s&apos;&quot;,key,rcsfile);</prefix>
 <postfix>}rdata-&gt;desc=rcsbuf_valcopy(&amp;rcs</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_reparsercsfile" id="0">
   <traceLine line="600" text="&apos;rdata-&gt;desc&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="585" text="&apos;rdata-&gt;desc&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_reparsercsfile" id="1">
   <traceLine line="425" text="Tracking &apos;rdata-&gt;desc&apos;." type="E"/>
   <traceLine line="585" text="&apos;rdata-&gt;desc&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=375</url>
</problem>
<problem>
 <problemID>354</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_delete_revs</method>
 <line>6224</line>
 <column>20</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;rev2&apos; allocated through function &apos;RCS_gettag&apos; at line 6198 can be lost at line 6224. Also there is one similar error on line 6224.</message>
 <anchor>-722970460</anchor>
 <prefix>nch(rcs,rev1)&amp;&amp;STREQ(rev1,rev2))</prefix>
 <postfix>else{/*MakesureREV1andREV2areord</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_delete_revs" id="0">
   <traceLine line="6196" text="tag2!= ( (void* )0) is true" type="C"/>
   <traceLine line="6198" text="Dynamic memory stored in &apos;rev2&apos; is allocated by calling function &apos;RCS_gettag&apos;." type="E" refId="1"/>
   <traceLine line="6210" text="rev2== ( (void* )0) &amp;&amp;numdots(rev1) ==1 is false" type="C"/>
   <traceLine line="6216" text="rev2== ( (void* )0) is false" type="C"/>
   <traceLine line="6219" text="rev1!= ( (void* )0) &amp;&amp;rev2!= ( (void* )0) is true" type="C"/>
   <traceLine line="6223" text="* (char* ) (rev1) == * (char* ) (rev2) is true" type="C"/>
   <traceLine line="6223" text="RCS_isbranch(rcs, rev1) &amp;&amp; ( * (char* ) (rev1) == * (char* ) (rev2) &amp;&amp;strcmp( (rev1),  (rev2) ) ==0) is true" type="C"/>
   <traceLine line="6224" text="Dynamic memory stored in &apos;rev2&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_gettag" id="1">
   <traceLine line="2284" text="&apos;version&apos; is allocated by calling function &apos;translate_symtag&apos;." type="E" refId="2"/>
   <traceLine line="2285" text="version!= ( (void* )0) is true" type="C"/>
   <traceLine line="2290" text="tag = version: copies &apos;version&apos; into &apos;tag&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="translate_symtag" id="2">
   <traceLine line="3230" text="&apos;r&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=354</url>
</problem>
<problem>
 <problemID>365</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_setbranch</method>
 <line>5821</line>
 <column>9</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;rcs-&gt;branch&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 5818.</message>
 <anchor>553818357</anchor>
 <prefix>h))return0;if(rcs-&gt;branch!=NULL)</prefix>
 <postfix>rcs-&gt;branch=xstrdup(rev);return0</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_setbranch" id="0">
   <traceLine line="5818" text="&apos;rcs-&gt;branch&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="5821" text="&apos;rcs-&gt;branch&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_setbranch" id="1">
   <traceLine line="5807" text="Tracking &apos;rcs-&gt;branch&apos;." type="E"/>
   <traceLine line="5821" text="&apos;rcs-&gt;branch&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=365</url>
</problem>
<problem>
 <problemID>394</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_tag2rev</method>
 <line>2175</line>
 <column>10</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;tag&apos; by passing argument 1 to function &apos;RCS_valid_rev&apos; at line 2175 before NULL check at line 2229</message>
 <anchor>144629418</anchor>
 <prefix>Ifavalidrevision,trytolookitup*/</prefix>
 <postfix>{/*Makeacopysowecanscribbleonit*</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_tag2rev" id="0">
   <traceLine line="2175" text="&apos;tag&apos; is dereferenced by being passed as argument 1 to function &apos;RCS_valid_rev&apos;." type="E" refId="1"/>
   <traceLine line="2229" text="&apos;tag&apos; is checked for NULL." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_valid_rev" id="1">
   <traceLine line="3337" text="&apos;rev&apos; is passed to function &apos;RCS_valid_rev&apos;." type="E"/>
   <traceLine line="3340" text="rev: copies &apos;rev&apos;" type="E"/>
   <traceLine line="3340" text="&apos;rev&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=394</url>
</problem>
<problem>
 <problemID>360</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkin</method>
 <line>5162</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fout&apos; at line 5156 may be lost here.</message>
 <anchor>-1186769709</anchor>
 <prefix>llo(fout);if(rcs-&gt;delta_pos==-1)</prefix>
 <postfix>putdeltatext(fout,dtext);rcs_int</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="0">
   <traceLine line="5156" text="Resource is acquired: &apos;fout&apos; is assigned to return value of the call to function &apos;rcs_internal_lockfile&apos;." type="E" refId="1"/>
   <traceLine line="5162" text="Resource is lost: &apos;fout&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcs_internal_lockfile" id="1">
   <traceLine line="8338" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fdopen&apos;." type="E"/>
   <traceLine line="8342" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=360</url>
</problem>
<problem>
 <problemID>361</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_rewrite</method>
 <line>8439</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fout&apos; at line 8423 may be lost here.</message>
 <anchor>-1186769709</anchor>
 <prefix>llo(fout);if(rcs-&gt;delta_pos==-1)</prefix>
 <postfix>RCS_copydeltas(rcs,fin,&amp;rcsbufin</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="0">
   <traceLine line="8423" text="Resource is acquired: &apos;fout&apos; is assigned to return value of the call to function &apos;rcs_internal_lockfile&apos;." type="E" refId="1"/>
   <traceLine line="8439" text="Resource is lost: &apos;fout&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcs_internal_lockfile" id="1">
   <traceLine line="8338" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fdopen&apos;." type="E"/>
   <traceLine line="8342" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=361</url>
</problem>
<problem>
 <problemID>401</problemID>
 <file>cvs\src\rcs.c</file>
 <method>freercsnode</method>
 <line>881</line>
 <column>5</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rnodep-&gt;comment&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 873.</message>
 <anchor>-1900603352</anchor>
 <prefix>h!=NULL)free((*rnodep)-&gt;branch);</prefix>
 <postfix>free(*rnodep);*rnodep=NULL;}/**f</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="0">
   <traceLine line="873" text="&apos;*rnodep-&gt;comment&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;comment&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="1">
   <traceLine line="864" text="Tracking &apos;*rnodep-&gt;comment&apos;." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;comment&apos; is freed by passing &apos;*rnodep&apos; to &apos;free_rcsnode_contents&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="free_rcsnode_contents" id="2">
   <traceLine line="895" text="Tracking &apos;rnode-&gt;comment&apos;." type="E"/>
   <traceLine line="913" text="&apos;rnode-&gt;comment&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=401</url>
</problem>
<problem>
 <problemID>353</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_parse</method>
 <line>293</line>
 <column>5</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;rcsfile&apos; allocated through function &apos;locate_rcs&apos; at line 270 can be lost at line 293</message>
 <anchor>-243342167</anchor>
 <prefix>,errno,&quot;cannotopen%s&quot;,rcsfile);}</prefix>
 <postfix>}/**Parseaspecificrcsfile.*/RCSN</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_parse" id="0">
   <traceLine line="270" text="Dynamic memory stored in &apos;rcsfile&apos; is allocated by calling function &apos;locate_rcs&apos;." type="E" refId="1"/>
   <traceLine line="270" text="(rcsfile=locate_rcs(repos, file,  &amp;inattic) ) == ( (void* )0) is false" type="C"/>
   <traceLine line="274" text="(fp=fopen(rcsfile,  (&quot;rb&quot;) ) ) != ( (void* )0) is false" type="C"/>
   <traceLine line="287" text="! ( ( ( *__errno() ) ) ==2) is false" type="C"/>
   <traceLine line="293" text="Dynamic memory stored in &apos;rcsfile&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="locate_rcs" id="1">
   <traceLine line="208" text="&apos;retval&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="2"/>
   <traceLine line="214" text="isreadable(retval) is true" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="2">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="3">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=353</url>
</problem>
<problem>
 <problemID>334</problemID>
 <file>cvs\src\rcs.c</file>
 <method>getdelta</method>
 <line>7482</line>
 <column>42</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;value&apos; returned from call to function &apos;rcsbuf_getkey&apos; at line 7469 may be NULL and may be dereferenced at line 7482. Also there is one similar error on line 7619.</message>
 <anchor>1061650466</anchor>
 <prefix>inceweknowexactlywhattoexpect.*/</prefix>
 <postfix>{*keyp=key;*valp=value;returnNUL</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="getdelta" id="0">
   <traceLine line="7462" text="*keyp!= ( (void* )0) is false" type="C"/>
   <traceLine line="7469" text="&apos;value&apos; is assigned the return value from function &apos;rcsbuf_getkey&apos;." type="E" refId="1"/>
   <traceLine line="7469" text="!rcsbuf_getkey(rcsbuf,  &amp;key,  &amp;value) is false" type="C"/>
   <traceLine line="7482" text="&apos;value&apos; is dereferenced by passing argument 2 to function &apos;strncmp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_getkey" id="1">
   <traceLine line="1281" text="c!= &apos;@&apos; is true" type="C"/>
   <traceLine line="1282" text="&apos;*valp&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="1284" text="&apos;*valp&apos; is returned by &apos;rcsbuf_getkey&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=334</url>
</problem>
<problem>
 <problemID>333</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_reparsercsfile</method>
 <line>525</line>
 <column>46</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;value&apos; returned from call to function &apos;rcsbuf_getkey&apos; at line 457 may be NULL and may be dereferenced at line 525. Also there is one similar error on line 525.</message>
 <anchor>1061650466</anchor>
 <prefix>inceweknowexactlywhattoexpect.*/</prefix>
 <postfix>break;if(STREQ(key,RCSDESC))brea</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_reparsercsfile" id="0">
   <traceLine line="455" text="!gotkey is true" type="C"/>
   <traceLine line="457" text="&apos;value&apos; is assigned the return value from function &apos;rcsbuf_getkey&apos;." type="E" refId="1"/>
   <traceLine line="457" text="!rcsbuf_getkey( &amp;rcsbuf,  &amp;key,  &amp;value) is false" type="C"/>
   <traceLine line="474" text="( * (char* ) (key) == * (char* ) (&quot;access&quot;) &amp;&amp;strcmp( (key),  (&quot;access&quot;) ) ==0) is false" type="C"/>
   <traceLine line="489" text="( * (char* ) (key) == * (char* ) (&quot;locks&quot;) &amp;&amp;strcmp( (key),  (&quot;locks&quot;) ) ==0) is false" type="C"/>
   <traceLine line="506" text="( * (char* ) (&quot;symbols&quot;) == * (char* ) (key) &amp;&amp;strcmp( (&quot;symbols&quot;),  (key) ) ==0) is false" type="C"/>
   <traceLine line="525" text="*cp== &apos;\0&apos; is true" type="C"/>
   <traceLine line="525" text="&apos;value&apos; is dereferenced by passing argument 2 to function &apos;strncmp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_getkey" id="1">
   <traceLine line="1281" text="c!= &apos;@&apos; is true" type="C"/>
   <traceLine line="1282" text="&apos;*valp&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="1284" text="&apos;*valp&apos; is returned by &apos;rcsbuf_getkey&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=333</url>
</problem>
<problem>
 <problemID>377</problemID>
 <file>cvs\src\rcs.c</file>
 <method>rcsbuf_getkey</method>
 <line>1321</line>
 <column>10</column>
 <code>NPD.GEN.MIGHT</code>
 <message>Null pointer &apos;*valp&apos; that comes from line 1263 may be dereferenced at line 1321.</message>
 <anchor>-20156737</anchor>
 <prefix>enifuserdefinedphrasesareused.*/</prefix>
 <postfix>}/*Herewehaveavaluewhichisnotasi</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_getkey" id="0">
   <traceLine line="1262" text="vlen==0 is true" type="C"/>
   <traceLine line="1263" text="&apos;*valp&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="1296" text="ptr&gt;=ptrend is false" type="C"/>
   <traceLine line="1313" text="Break statement causes loop exit." type="E" refId="1"/>
   <traceLine line="1321" text="*valp: copies &apos;*valp&apos;" type="E"/>
   <traceLine line="1321" text="&apos;*valp&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_getkey" id="1">
   <traceLine line="1292" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=377</url>
</problem>
<problem>
 <problemID>386</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkout</method>
 <line>4545</line>
 <column>29</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;p&apos; returned from call to function &apos;rcsbuf_getkey&apos; at line 4155 may be NULL and may be dereferenced at line 4545. Also there is one similar error on line 4545.</message>
 <anchor>-1131229855</anchor>
 <prefix>TE);char*p=value;while(nleft&gt;0){</prefix>
 <postfix>{error(0,errno,&quot;cannotwrite%s&quot;,(</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="0">
   <traceLine line="4155" text="&apos;value&apos; is assigned the return value from function &apos;rcsbuf_getkey&apos;." type="E" refId="1"/>
   <traceLine line="4155" text="Continue loop iteration, while rcsbuf_getkey( &amp;rcsbuf,  &amp;key,  &amp;value) is true" type="C"/>
   <traceLine line="4157" text="( * (char* ) (key) == * (char* ) (&quot;log&quot;) &amp;&amp;strcmp( (key),  (&quot;log&quot;) ) ==0) is false" type="C"/>
   <traceLine line="4159" text="( * (char* ) (key) == * (char* ) (&quot;text&quot;) &amp;&amp;strcmp( (key),  (&quot;text&quot;) ) ==0) is true" type="C"/>
   <traceLine line="4162" text="Break statement causes loop exit." type="E" refId="2"/>
   <traceLine line="4235" text="Break statement causes loop exit." type="E" refId="3"/>
   <traceLine line="4406" text="newvalue!=value is false" type="C"/>
   <traceLine line="4501" text="ofp== ( (void* )0) &amp;&amp; ( *__errno() ) ==13&amp;&amp;isfile(workfile) &amp;&amp; !iswritable(workfile) is true" type="C"/>
   <traceLine line="4501" text="ofp== ( (void* )0) &amp;&amp; ( *__errno() ) ==13&amp;&amp;isfile(workfile) &amp;&amp; !iswritable(workfile) is false" type="C"/>
   <traceLine line="4541" text="p = value: copies &apos;value&apos; into &apos;p&apos;" type="E"/>
   <traceLine line="4545" text="&apos;p&apos; is dereferenced by passing argument 1 to function &apos;fwrite&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_getkey" id="1">
   <traceLine line="1281" text="c!= &apos;@&apos; is true" type="C"/>
   <traceLine line="1282" text="&apos;*valp&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="1284" text="&apos;*valp&apos; is returned by &apos;rcsbuf_getkey&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="2">
   <traceLine line="4155" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="3">
   <traceLine line="4233" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=386</url>
</problem>
<problem>
 <problemID>350</problemID>
 <file>cvs\src\rcs.c</file>
 <method>freercsnode</method>
 <line>881</line>
 <column>5</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rnodep-&gt;expand&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 873.</message>
 <anchor>1389811633</anchor>
 <prefix>h!=NULL)free((*rnodep)-&gt;branch);</prefix>
 <postfix>free(*rnodep);*rnodep=NULL;}/**f</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="0">
   <traceLine line="873" text="&apos;*rnodep-&gt;expand&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;expand&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="1">
   <traceLine line="864" text="Tracking &apos;*rnodep-&gt;expand&apos;." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;expand&apos; is freed by passing &apos;*rnodep&apos; to &apos;free_rcsnode_contents&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="free_rcsnode_contents" id="2">
   <traceLine line="895" text="Tracking &apos;rnode-&gt;expand&apos;." type="E"/>
   <traceLine line="903" text="&apos;rnode-&gt;expand&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=350</url>
</problem>
<problem>
 <problemID>402</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkin</method>
 <line>5231</line>
 <column>14</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;p&apos; returned from call to function &apos;strrchr&apos; at line 5230 may be NULL and will be dereferenced at line 5231. Also there is one similar error on line 5279.</message>
 <anchor>-1250227690</anchor>
 <prefix>isrevnum){p=strrchr(branch,&apos;.&apos;);</prefix>
 <postfix>}/*Findthetipofthetargetbranch.I</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="0">
   <traceLine line="5230" text="&apos;p&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="5231" text="&apos;p&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=402</url>
</problem>
<problem>
 <problemID>369</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_findlock_or_tip</method>
 <line>4702</line>
 <column>12</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;p&apos; returned from call to function &apos;findnode&apos; at line 4701 may be NULL and will be dereferenced at line 4702.</message>
 <anchor>390776861</anchor>
 <prefix>S_getbranch(rcs,rcs-&gt;branch,0));</prefix>
 <postfix>}/*Revisionnumberstring,R,mustco</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_findlock_or_tip" id="0">
   <traceLine line="4701" text="&apos;p&apos; is assigned the return value from function &apos;findnode&apos;." type="E" refId="1"/>
   <traceLine line="4702" text="&apos;p&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hash.c" method="findnode" id="1">
   <traceLine line="313" text="findnode" type="E"/>
   <traceLine line="318" text="&apos;findnode&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=369</url>
</problem>
<problem>
 <problemID>374</problemID>
 <file>cvs\src\rcs.c</file>
 <method>freercsnode</method>
 <line>881</line>
 <column>5</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rnodep-&gt;locks_data&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 873.</message>
 <anchor>569083512</anchor>
 <prefix>h!=NULL)free((*rnodep)-&gt;branch);</prefix>
 <postfix>free(*rnodep);*rnodep=NULL;}/**f</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="0">
   <traceLine line="873" text="&apos;*rnodep-&gt;locks_data&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;locks_data&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="1">
   <traceLine line="864" text="Tracking &apos;*rnodep-&gt;locks_data&apos;." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;locks_data&apos; is freed by passing &apos;*rnodep&apos; to &apos;free_rcsnode_contents&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="free_rcsnode_contents" id="2">
   <traceLine line="895" text="Tracking &apos;rnode-&gt;locks_data&apos;." type="E"/>
   <traceLine line="909" text="&apos;rnode-&gt;locks_data&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=374</url>
</problem>
<problem>
 <problemID>403</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_parsercsfile_i</method>
 <line>371</line>
 <column>14</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;cp&apos; returned from call to function &apos;strrchr&apos; at line 370 may be NULL and will be dereferenced at line 371.</message>
 <anchor>239075987</anchor>
 <prefix>*/cp=strrchr(rdata-&gt;branch,&apos;.&apos;);</prefix>
 <postfix>}}/*Lookaheadforexpand,stoppingw</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_parsercsfile_i" id="0">
   <traceLine line="370" text="&apos;cp&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="371" text="&apos;cp&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=403</url>
</problem>
<problem>
 <problemID>404</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_gettag</method>
 <line>2302</line>
 <column>25</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;cp&apos; returned from call to function &apos;strrchr&apos; at line 2300 may be NULL and will be dereferenced at line 2302.</message>
 <anchor>239075987</anchor>
 <prefix>=strrchr(tag,&apos;.&apos;);cp=branch++-1;</prefix>
 <postfix>cp--;/*seeifwehave.magic-branch.</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_gettag" id="0">
   <traceLine line="2300" text="&apos;branch&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="2301" text="branch: copies &apos;branch&apos;" type="E"/>
   <traceLine line="2301" text="cp = &amp;branch++[1]" type="E"/>
   <traceLine line="2302" text="&apos;cp&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=404</url>
</problem>
<problem>
 <problemID>405</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_nodeisbranch</method>
 <line>2533</line>
 <column>17</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;cp&apos; returned from call to function &apos;strrchr&apos; at line 2531 may be NULL and will be dereferenced at line 2533.</message>
 <anchor>239075987</anchor>
 <prefix>r(version,&apos;.&apos;);char*cp=branch-1;</prefix>
 <postfix>cp--;/*seeifwehave.magic-branch.</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_nodeisbranch" id="0">
   <traceLine line="2531" text="&apos;branch&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="2532" text="cp = &amp;branch[1]" type="E"/>
   <traceLine line="2533" text="&apos;cp&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=405</url>
</problem>
<problem>
 <problemID>406</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_whatbranch</method>
 <line>2581</line>
 <column>17</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;cp&apos; returned from call to function &apos;strrchr&apos; at line 2579 may be NULL and will be dereferenced at line 2581.</message>
 <anchor>239075987</anchor>
 <prefix>version,&apos;.&apos;);char*cp=branch++-1;</prefix>
 <postfix>cp--;/*seeifwehave.magic-branch.</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_whatbranch" id="0">
   <traceLine line="2579" text="&apos;branch&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="2580" text="branch: copies &apos;branch&apos;" type="E"/>
   <traceLine line="2580" text="cp = &amp;branch++[1]" type="E"/>
   <traceLine line="2581" text="&apos;cp&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=406</url>
</problem>
<problem>
 <problemID>335</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_tag2rev</method>
 <line>2233</line>
 <column>34</column>
 <code>NPD.CHECK.CALL.MUST</code>
 <message>Pointer &apos;tag&apos; checked for NULL at line 2229 will be passed to function and may be dereferenced there by passing argument 2 to function &apos;translate_symtag&apos; at line 2233.</message>
 <anchor>-767755229</anchor>
 <prefix>ettranslate_symtagsayyeaornay.*/</prefix>
 <postfix>if(rev)returnrev;/*Trustthecalle</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_tag2rev" id="0">
   <traceLine line="2229" text="&apos;tag&apos; is checked for NULL." type="E"/>
   <traceLine line="2229" text="tag&amp;&amp; ( * (char* ) (tag) == * (char* ) (&quot;HEAD&quot;) &amp;&amp;strcmp( (tag),  (&quot;HEAD&quot;) ) ==0) is false" type="C"/>
   <traceLine line="2233" text="&apos;tag&apos; is dereferenced by passing argument 2 to function &apos;translate_symtag&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="translate_symtag" id="1">
   <traceLine line="3179" text="&apos;tag&apos; is passed to function &apos;translate_symtag&apos;." type="E"/>
   <traceLine line="3206" text="&apos;tag&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=335</url>
</problem>
<problem>
 <problemID>366</problemID>
 <file>cvs\src\rcs.c</file>
 <method>do_symbols</method>
 <line>2006</line>
 <column>10</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;cp&apos; returned from call to function &apos;strchr&apos; at line 2005 may be NULL and will be dereferenced at line 2006.</message>
 <anchor>-1932166111</anchor>
 <prefix>ndrev*/tag=cp;cp=strchr(cp,&apos;:&apos;);</prefix>
 <postfix>rev=cp;while(!whitespace(*cp)&amp;&amp;*</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="do_symbols" id="0">
   <traceLine line="2005" text="&apos;cp&apos; is assigned the return value from function &apos;strchr&apos;." type="E"/>
   <traceLine line="2006" text="cp: copies &apos;cp&apos;" type="E"/>
   <traceLine line="2006" text="&apos;cp&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=366</url>
</problem>
<problem>
 <problemID>367</problemID>
 <file>cvs\src\rcs.c</file>
 <method>do_locks</method>
 <line>2048</line>
 <column>10</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;cp&apos; returned from call to function &apos;strchr&apos; at line 2047 may be NULL and will be dereferenced at line 2048.</message>
 <anchor>-1932166111</anchor>
 <prefix>drev*/user=cp;cp=strchr(cp,&apos;:&apos;);</prefix>
 <postfix>rev=cp;while(!whitespace(*cp)&amp;&amp;*</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="do_locks" id="0">
   <traceLine line="2047" text="&apos;cp&apos; is assigned the return value from function &apos;strchr&apos;." type="E"/>
   <traceLine line="2048" text="cp: copies &apos;cp&apos;" type="E"/>
   <traceLine line="2048" text="&apos;cp&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=367</url>
</problem>
<problem>
 <problemID>337</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_tag2rev</method>
 <line>2189</line>
 <column>29</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;pa&apos; returned from call to function &apos;strrchr&apos; at line 2188 may be NULL and may be dereferenced at line 2189.</message>
 <anchor>-1932141033</anchor>
 <prefix>f((i&amp;1)==1){pa=strrchr(rev,&apos;.&apos;);</prefix>
 <postfix>{free(rev);error(1,0,&quot;revision`%</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_tag2rev" id="0">
   <traceLine line="2188" text="&apos;pa&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="2189" text="&apos;pa&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=337</url>
</problem>
<problem>
 <problemID>347</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_reparsercsfile</method>
 <line>459</line>
 <column>17</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 439 may be lost here. Also there are 4 similar errors on line(s) 495, 600.</message>
 <anchor>670851178</anchor>
 <prefix>uf_getkey(&amp;rcsbuf,&amp;key,&amp;value)){</prefix>
 <postfix>rcsfile);}}gotkey=0;/*Skiphead,b</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_reparsercsfile" id="0">
   <traceLine line="439" text="Resource is acquired: &apos;fp&apos; is accessed via 3 argument of the call to function &apos;rcsbuf_cache_open&apos;." type="E" refId="1"/>
   <traceLine line="455" text="!gotkey is true" type="C"/>
   <traceLine line="457" text="!rcsbuf_getkey( &amp;rcsbuf,  &amp;key,  &amp;value) is true" type="C"/>
   <traceLine line="459" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_cache_open" id="1">
   <traceLine line="1965" text="Resource is acquired: &apos;*pfp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="1979" text="Resource descriptor is returned: &apos;*pfp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=347</url>
</problem>
<problem>
 <problemID>348</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkout</method>
 <line>4154</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 4150 may be lost here. Also there are 12 similar errors on line(s) 4174, 4180, 4399, 4483, 4486, 4495, 4513, 4553, 4592, 4613, ...</message>
 <anchor>670851178</anchor>
 <prefix>!rcsbuf_getrevnum(&amp;rcsbuf,&amp;key))</prefix>
 <postfix>while(rcsbuf_getkey(&amp;rcsbuf,&amp;key</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="0">
   <traceLine line="4147" text="rcs-&gt;flags&amp;4 is false" type="C"/>
   <traceLine line="4150" text="Resource is acquired: &apos;fp&apos; is accessed via 3 argument of the call to function &apos;rcsbuf_cache_open&apos;." type="E" refId="1"/>
   <traceLine line="4154" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_cache_open" id="1">
   <traceLine line="1965" text="Resource is acquired: &apos;*pfp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="1979" text="Resource descriptor is returned: &apos;*pfp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=348</url>
</problem>
<problem>
 <problemID>349</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_deltas</method>
 <line>7190</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 7161 may be lost here. Also there are 19 similar errors on line(s) 7190, 7206, 7227, 7244, 7254, 7314, 7320, 7329, 7348, 7441, ...</message>
 <anchor>670851178</anchor>
 <prefix>(!rcsbuf_getrevnum(rcsbuf,&amp;key))</prefix>
 <postfix>if(next!=NULL&amp;&amp;!STREQ(next,key))</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_deltas" id="0">
   <traceLine line="7159" text="fp== ( (void* )0) is true" type="C"/>
   <traceLine line="7161" text="Resource is acquired: &apos;fp&apos; is accessed via 3 argument of the call to function &apos;rcsbuf_cache_open&apos;." type="E" refId="1"/>
   <traceLine line="7189" text="!rcsbuf_getrevnum(rcsbuf,  &amp;key) is true" type="C"/>
   <traceLine line="7190" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_cache_open" id="1">
   <traceLine line="1965" text="Resource is acquired: &apos;*pfp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="1979" text="Resource descriptor is returned: &apos;*pfp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=349</url>
</problem>
<problem>
 <problemID>383</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_setattic</method>
 <line>688</line>
 <column>5</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;rcs-&gt;path&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 629, 660, 667, 684.</message>
 <anchor>1180864568</anchor>
 <prefix>-&gt;path);free(newpath);return1;}}</prefix>
 <postfix>rcs-&gt;path=newpath;return0;}/**Fu</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_setattic" id="0">
   <traceLine line="629" text="&apos;rcs-&gt;path&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="660" text="&apos;rcs-&gt;path&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="667" text="&apos;rcs-&gt;path&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="684" text="&apos;rcs-&gt;path&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="688" text="&apos;rcs-&gt;path&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_setattic" id="1">
   <traceLine line="611" text="Tracking &apos;rcs-&gt;path&apos;." type="E"/>
   <traceLine line="688" text="&apos;rcs-&gt;path&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=383</url>
</problem>
<problem>
 <problemID>330</problemID>
 <file>cvs\src\rcs.c</file>
 <method>apply_rcs_changes</method>
 <line>7005</line>
 <column>30</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>atureendofchangein%s&quot;,name);else</prefix>
 <postfix>}/*Stashawayapointertothetextwea</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="apply_rcs_changes" id="0">
   <traceLine line="7003" text="Call to &apos;error(1, 0, &quot;premature end of change in %s&quot;, name)&apos; never returns." type="E"/>
   <traceLine line="7005" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=330</url>
</problem>
<problem>
 <problemID>329</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_fully_parse</method>
 <line>811</line>
 <column>46</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>&gt;print_path,vnode-&gt;version);else</prefix>
 <postfix>}++cp;}}}}sprintf(buf,&quot;%lu&quot;,add)</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_fully_parse" id="0">
   <traceLine line="807" text="Call to &apos;error(1, 0, &quot;premature end of value in %s revision %s&quot;, rcs-&gt;print_path, vnode-&gt;version)&apos; never returns." type="E"/>
   <traceLine line="811" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=329</url>
</problem>
<problem>
 <problemID>331</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_getdeltatext</method>
 <line>7682</line>
 <column>64</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>e.*/if(num==NULL)returnNULL;else</prefix>
 <postfix>}p=findnode(rcs-&gt;versions,num);i</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getdeltatext" id="0">
   <traceLine line="7682" text="Call to &apos;error(1, 0, &quot;%s: unexpected EOF&quot;, rcs-&gt;print_path)&apos; never returns." type="E"/>
   <traceLine line="7682" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=331</url>
</problem>
<problem>
 <problemID>356</problemID>
 <file>cvs\src\rcs.c</file>
 <method>freercsnode</method>
 <line>880</line>
 <column>9</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rnodep-&gt;branch&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 873.</message>
 <anchor>1297948345</anchor>
 <prefix>ead);if((*rnodep)-&gt;branch!=NULL)</prefix>
 <postfix>free_rcsnode_contents(*rnodep);f</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="0">
   <traceLine line="873" text="&apos;*rnodep-&gt;branch&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="880" text="&apos;*rnodep-&gt;branch&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="1">
   <traceLine line="864" text="Tracking &apos;( *rnodep) -&gt;branch&apos;." type="E"/>
   <traceLine line="880" text="&apos;( *rnodep) -&gt;branch&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=356</url>
</problem>
<problem>
 <problemID>385</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_getrevtime</method>
 <line>3106</line>
 <column>21</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;tdate&apos; may be out of bounds. Array &apos;tdate&apos; of size 50 may use index value(s) 0..69</message>
 <anchor>110204450</anchor>
 <prefix>utthedateinaformgetdatecangrok*/</prefix>
 <postfix>xtm.tm_year+1900,xtm.tm_mon,xtm.</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getrevtime" id="0">
   <traceLine line="3070" text="Array &apos;tdate&apos; size is 50." type="E"/>
   <traceLine line="3106" text="&apos;tdate&apos; is passed as an argument to function &apos;sprintf&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getrevtime" id="1">
   <traceLine line="3106" text="Length of format string &quot;%d-%d-%d GMT %d:%d:%d&quot; is 69." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getrevtime" id="2">
   <traceLine line="3106" text="Length of non-format characters is 9." type="E"/>
   <traceLine line="3106" text="Length of conversion specification &apos;%d&apos; for argument &apos;xtm.tm_year+1900&apos; is 10." type="E"/>
   <traceLine line="3106" text="Length of conversion specification &apos;%d&apos; for argument &apos;xtm.tm_mon&apos; is 10." type="E"/>
   <traceLine line="3106" text="Length of conversion specification &apos;%d&apos; for argument &apos;xtm.tm_mday&apos; is 10." type="E"/>
   <traceLine line="3106" text="Length of conversion specification &apos;%d&apos; for argument &apos;xtm.tm_hour&apos; is 10." type="E"/>
   <traceLine line="3106" text="Length of conversion specification &apos;%d&apos; for argument &apos;xtm.tm_min&apos; is 10." type="E"/>
   <traceLine line="3106" text="Length of conversion specification &apos;%d&apos; for argument &apos;xtm.tm_sec&apos; is 10." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=385</url>
</problem>
<problem>
 <problemID>325</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_getrevtime</method>
 <line>3106</line>
 <column>12</column>
 <code>SV.STRBO.UNBOUND_SPRINTF</code>
 <message>function &apos;sprintf&apos; does not check buffer boundaries but outputs to the buffer &apos;tdate&apos; of fixed size (50)</message>
 <anchor>794671618</anchor>
 <prefix>utthedateinaformgetdatecangrok*/</prefix>
 <postfix>xtm.tm_year+1900,xtm.tm_mon,xtm.</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="STR31-C"/>
  <taxonomy name="CWE" metaInf="120, 242"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=325</url>
</problem>
<problem>
 <problemID>384</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkout</method>
 <line>4158</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;log&apos; allocated through function &apos;rcsbuf_valcopy&apos; at line 4158 can be lost at line 4158. Also there is one similar error on line 4174.</message>
 <anchor>-189749066</anchor>
 <prefix>ey,&amp;value)){if(STREQ(key,&quot;log&quot;))</prefix>
 <postfix>elseif(STREQ(key,&quot;text&quot;)){gothea</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="0">
   <traceLine line="4158" text="Dynamic memory stored in &apos;log&apos; is allocated by calling function &apos;rcsbuf_valcopy&apos;." type="E" refId="1"/>
   <traceLine line="4155" text="Continue loop iteration, while rcsbuf_getkey( &amp;rcsbuf,  &amp;key,  &amp;value) is true" type="C"/>
   <traceLine line="4158" text="Dynamic memory stored in &apos;log&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_valcopy" id="1">
   <traceLine line="1592" text="&apos;ret&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="2">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="3">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=384</url>
</problem>
<problem>
 <problemID>327</problemID>
 <file>cvs\src\rcs.c</file>
 <method>freercsnode</method>
 <line>881</line>
 <column>5</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rnodep-&gt;access&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 873.</message>
 <anchor>1255517819</anchor>
 <prefix>h!=NULL)free((*rnodep)-&gt;branch);</prefix>
 <postfix>free(*rnodep);*rnodep=NULL;}/**f</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="0">
   <traceLine line="873" text="&apos;*rnodep-&gt;access&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;access&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="1">
   <traceLine line="864" text="Tracking &apos;*rnodep-&gt;access&apos;." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;access&apos; is freed by passing &apos;*rnodep&apos; to &apos;free_rcsnode_contents&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="free_rcsnode_contents" id="2">
   <traceLine line="895" text="Tracking &apos;rnode-&gt;access&apos;." type="E"/>
   <traceLine line="907" text="&apos;rnode-&gt;access&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=327</url>
</problem>
<problem>
 <problemID>399</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_unlock</method>
 <line>6022</line>
 <column>10</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;workfile&apos; returned from call to function &apos;strrchr&apos; at line 6021 may be NULL and will be dereferenced at line 6022.</message>
 <anchor>-1818668493</anchor>
 <prefix>th);workfile=strrchr(repos,&apos;/&apos;);</prefix>
 <postfix>notify_do(&apos;C&apos;,workfile,NULL,user</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_unlock" id="0">
   <traceLine line="6021" text="&apos;workfile&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="6022" text="workfile: copies &apos;workfile&apos;" type="E"/>
   <traceLine line="6022" text="&apos;workfile&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=399</url>
</problem>
<problem>
 <problemID>343</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkout</method>
 <line>4154</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 4148 may be lost here. Also there are 23 similar errors on line(s) 4174, 4180, 4206, 4399, 4483, 4486, 4495, 4513, 4553, 4592, ...</message>
 <anchor>2096283512</anchor>
 <prefix>!rcsbuf_getrevnum(&amp;rcsbuf,&amp;key))</prefix>
 <postfix>while(rcsbuf_getkey(&amp;rcsbuf,&amp;key</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="0">
   <traceLine line="4147" text="rcs-&gt;flags&amp;4 is true" type="C"/>
   <traceLine line="4148" text="Resource is acquired: &apos;fp&apos; is accessed via 2 argument of the call to function &apos;RCS_reparsercsfile&apos;." type="E" refId="1"/>
   <traceLine line="4154" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_reparsercsfile" id="1">
   <traceLine line="439" text="Resource is acquired: &apos;fp&apos; is accessed via 3 argument of the call to function &apos;rcsbuf_cache_open&apos;." type="E" refId="2"/>
   <traceLine line="455" text="!gotkey is true" type="C"/>
   <traceLine line="474" text="( * (char* ) (key) == * (char* ) (&quot;access&quot;) &amp;&amp;strcmp( (key),  (&quot;access&quot;) ) ==0) is false" type="C"/>
   <traceLine line="489" text="( * (char* ) (key) == * (char* ) (&quot;locks&quot;) &amp;&amp;strcmp( (key),  (&quot;locks&quot;) ) ==0) is false" type="C"/>
   <traceLine line="506" text="( * (char* ) (&quot;symbols&quot;) == * (char* ) (key) &amp;&amp;strcmp( (&quot;symbols&quot;),  (key) ) ==0) is false" type="C"/>
   <traceLine line="519" text="Not entering loop, because *cp!= &apos;\0&apos; is false" type="C"/>
   <traceLine line="528" text="( * (char* ) (key) == * (char* ) (&quot;desc&quot;) &amp;&amp;strcmp( (key),  (&quot;desc&quot;) ) ==0) is true" type="C"/>
   <traceLine line="592" text="pfp== ( (void* )0) is false" type="C"/>
   <traceLine line="596" text="&apos;*pfp&apos;" type="E"/>
   <traceLine line="596" text="&apos;fp&apos; is copied to &apos;*pfp&apos;." type="E"/>
   <traceLine line="600" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
   <traceLine line="600" text="Resource descriptor is returned: &apos;*pfp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_cache_open" id="2">
   <traceLine line="1965" text="Resource is acquired: &apos;*pfp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="1979" text="Resource descriptor is returned: &apos;*pfp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=343</url>
</problem>
<problem>
 <problemID>342</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_fully_parse</method>
 <line>728</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 713 may be lost here. Also there are 9 similar errors on line(s) 783, 788, 792, 807, 856.</message>
 <anchor>2096283512</anchor>
 <prefix>cs-&gt;versions,key);if(vers==NULL)</prefix>
 <postfix>&quot;mismatchinrcsfile%sbetweendelta</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_fully_parse" id="0">
   <traceLine line="713" text="Resource is acquired: &apos;fp&apos; is accessed via 2 argument of the call to function &apos;RCS_reparsercsfile&apos;." type="E" refId="1"/>
   <traceLine line="715" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="727" text="vers== ( (void* )0) is true" type="C"/>
   <traceLine line="728" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_reparsercsfile" id="1">
   <traceLine line="439" text="Resource is acquired: &apos;fp&apos; is accessed via 3 argument of the call to function &apos;rcsbuf_cache_open&apos;." type="E" refId="2"/>
   <traceLine line="455" text="!gotkey is true" type="C"/>
   <traceLine line="474" text="( * (char* ) (key) == * (char* ) (&quot;access&quot;) &amp;&amp;strcmp( (key),  (&quot;access&quot;) ) ==0) is false" type="C"/>
   <traceLine line="489" text="( * (char* ) (key) == * (char* ) (&quot;locks&quot;) &amp;&amp;strcmp( (key),  (&quot;locks&quot;) ) ==0) is false" type="C"/>
   <traceLine line="506" text="( * (char* ) (&quot;symbols&quot;) == * (char* ) (key) &amp;&amp;strcmp( (&quot;symbols&quot;),  (key) ) ==0) is false" type="C"/>
   <traceLine line="519" text="Not entering loop, because *cp!= &apos;\0&apos; is false" type="C"/>
   <traceLine line="528" text="( * (char* ) (key) == * (char* ) (&quot;desc&quot;) &amp;&amp;strcmp( (key),  (&quot;desc&quot;) ) ==0) is true" type="C"/>
   <traceLine line="592" text="pfp== ( (void* )0) is false" type="C"/>
   <traceLine line="596" text="&apos;*pfp&apos;" type="E"/>
   <traceLine line="596" text="&apos;fp&apos; is copied to &apos;*pfp&apos;." type="E"/>
   <traceLine line="600" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
   <traceLine line="600" text="Resource descriptor is returned: &apos;*pfp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_cache_open" id="2">
   <traceLine line="1965" text="Resource is acquired: &apos;*pfp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="1979" text="Resource descriptor is returned: &apos;*pfp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=342</url>
</problem>
<problem>
 <problemID>326</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_parse</method>
 <line>290</line>
 <column>9</column>
 <code>UFM.USE.MUST</code>
 <message>Object &apos;rcsfile&apos; was used at line 290 after being freed by calling &apos;free&apos; at line 289</message>
 <anchor>1039838430</anchor>
 <prefix>nce_error(errno)){free(rcsfile);</prefix>
 <postfix>}returnretval;}/**Parseaspecific</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_parse" id="0">
   <traceLine line="270" text="(rcsfile=locate_rcs(repos, file,  &amp;inattic) ) == ( (void* )0) is false" type="C"/>
   <traceLine line="274" text="(fp=fopen(rcsfile,  (&quot;rb&quot;) ) ) != ( (void* )0) is false" type="C"/>
   <traceLine line="287" text="! ( ( ( *__errno() ) ) ==2) is true" type="C"/>
   <traceLine line="289" text="&apos;rcsfile&apos; is freed by calling &apos;free&apos;." type="E"/>
   <traceLine line="290" text="Freed pointer &apos;rcsfile&apos; is used by calling &apos;error&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM30-C"/>
  <taxonomy name="CWE" metaInf="416"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=326</url>
</problem>
<problem>
 <problemID>341</problemID>
 <file>cvs\src\rcs.c</file>
 <method>freercsnode</method>
 <line>881</line>
 <column>5</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rnodep-&gt;symbols_data&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 873.</message>
 <anchor>-637114523</anchor>
 <prefix>h!=NULL)free((*rnodep)-&gt;branch);</prefix>
 <postfix>free(*rnodep);*rnodep=NULL;}/**f</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="0">
   <traceLine line="873" text="&apos;*rnodep-&gt;symbols_data&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;symbols_data&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="1">
   <traceLine line="864" text="Tracking &apos;*rnodep-&gt;symbols_data&apos;." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;symbols_data&apos; is freed by passing &apos;*rnodep&apos; to &apos;free_rcsnode_contents&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="free_rcsnode_contents" id="2">
   <traceLine line="895" text="Tracking &apos;rnode-&gt;symbols_data&apos;." type="E"/>
   <traceLine line="901" text="&apos;rnode-&gt;symbols_data&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=341</url>
</problem>
<problem>
 <problemID>340</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_getversion</method>
 <line>2137</line>
 <column>45</column>
 <code>NPD.FUNC.CALL.MUST</code>
 <message>Pointer &apos;branch&apos; returned from call to function &apos;RCS_whatbranch&apos; at line 2132 may be NULL, will be passed to function and may be dereferenced there by passing argument 3 to function &apos;RCS_getdatebranch&apos; at line 2137.</message>
 <anchor>-1385913181</anchor>
 <prefix>chtherevisionofbranchasofdate.*/</prefix>
 <postfix>free(branch);returnrev;}elseif(t</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getversion" id="0">
   <traceLine line="2131" text="! ( (_ctype_+1) [ (unsigned) ( (unsigned char)tag[0] ) ] &amp;4) is true" type="C"/>
   <traceLine line="2132" text="&apos;branch&apos; is assigned the return value from function &apos;RCS_whatbranch&apos;." type="E" refId="1"/>
   <traceLine line="2137" text="&apos;branch&apos; is dereferenced by passing argument 3 to function &apos;RCS_getdatebranch&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_whatbranch" id="1">
   <traceLine line="2558" text="RCS_whatbranch" type="E"/>
   <traceLine line="2570" text="&apos;RCS_whatbranch&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getdatebranch" id="2">
   <traceLine line="2963" text="&apos;branch&apos; is passed to function &apos;RCS_getdatebranch&apos;." type="E"/>
   <traceLine line="3002" text="&apos;branch&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=340</url>
</problem>
<problem>
 <problemID>393</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_deltas</method>
 <line>7316</line>
 <column>18</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;cpversion&apos; checked for NULL at line 7183 may be dereferenced at line 7316. Also there are 2 similar errors on line(s) 7316.</message>
 <anchor>-1016841999</anchor>
 <prefix>dbranchesin%s&quot;,rcs-&gt;print_path);</prefix>
 <postfix>++cpversion;cpversion=strchr(cpv</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_deltas" id="0">
   <traceLine line="7183" text="&apos;cpversion&apos; is checked for NULL." type="E"/>
   <traceLine line="7183" text="cpversion!= ( (void* )0) is false" type="C"/>
   <traceLine line="7185" text="cpversion!= ( (void* )0) is false" type="C"/>
   <traceLine line="7224" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="7230" text="log!= ( (void* )0) &amp;&amp;isversion&amp;&amp; ( * (char* ) (key) == * (char* ) (&quot;log&quot;) &amp;&amp;strcmp( (key),  (&quot;log&quot;) ) ==0) &amp;&amp; ( * (char* ) (branchversion) == * (char* ) (version) &amp;&amp;strcmp( (branchversion),  (version) ) ==0) is false" type="C"/>
   <traceLine line="7252" text="onbranch is false" type="C"/>
   <traceLine line="7253" text="onbranch is false" type="C"/>
   <traceLine line="7316" text="&apos;cpversion&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=393</url>
</problem>
<problem>
 <problemID>370</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_tag2rev</method>
 <line>2216</line>
 <column>10</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;pa&apos; returned from call to function &apos;strrchr&apos; at line 2214 may be NULL and will be dereferenced at line 2216.</message>
 <anchor>-1932141033</anchor>
 <prefix>,&apos;.&apos;);pb=xmalloc(strlen(rev)+3);</prefix>
 <postfix>(void)sprintf(pb,&quot;%s.%d.%s&quot;,rev,</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_tag2rev" id="0">
   <traceLine line="2214" text="&apos;pa&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="2216" text="pa: copies &apos;pa&apos;" type="E"/>
   <traceLine line="2216" text="&apos;pa&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=370</url>
</problem>
<problem>
 <problemID>359</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_deltas</method>
 <line>7243</line>
 <column>54</column>
 <code>NPD.FUNC.CALL.MIGHT</code>
 <message>Pointer &apos;value&apos; returned from call to function &apos;rcsbuf_getkey&apos; at line 7226 may be NULL, may be passed to function and may be dereferenced there by passing argument 2 to function &apos;linevector_add&apos; at line 7243.</message>
 <anchor>-1626213802</anchor>
 <prefix>buf,value,0,&amp;vallen);if(ishead){</prefix>
 <postfix>error(1,0,&quot;invalidrcsfile%s&quot;,rcs</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_deltas" id="0">
   <traceLine line="7224" text="Continue loop iteration, while 1 is true" type="C"/>
   <traceLine line="7226" text="&apos;value&apos; is assigned the return value from function &apos;rcsbuf_getkey&apos;." type="E" refId="1"/>
   <traceLine line="7226" text="!rcsbuf_getkey(rcsbuf,  &amp;key,  &amp;value) is false" type="C"/>
   <traceLine line="7230" text="log!= ( (void* )0) &amp;&amp;isversion&amp;&amp; ( * (char* ) (key) == * (char* ) (&quot;log&quot;) &amp;&amp;strcmp( (key),  (&quot;log&quot;) ) ==0) &amp;&amp; ( * (char* ) (branchversion) == * (char* ) (version) &amp;&amp;strcmp( (branchversion),  (version) ) ==0) is false" type="C"/>
   <traceLine line="7238" text="( * (char* ) (key) == * (char* ) (&quot;text&quot;) &amp;&amp;strcmp( (key),  (&quot;text&quot;) ) ==0) is true" type="C"/>
   <traceLine line="7241" text="ishead is true" type="C"/>
   <traceLine line="7243" text="&apos;value&apos; is dereferenced by passing argument 2 to function &apos;linevector_add&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcsbuf_getkey" id="1">
   <traceLine line="1281" text="c!= &apos;@&apos; is true" type="C"/>
   <traceLine line="1282" text="&apos;*valp&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="1284" text="&apos;*valp&apos; is returned by &apos;rcsbuf_getkey&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="linevector_add" id="2">
   <traceLine line="6753" text="&apos;text&apos; is passed to function &apos;linevector_add&apos;." type="E"/>
   <traceLine line="6772" text="p = text: copies &apos;text&apos; into &apos;p&apos;" type="E"/>
   <traceLine line="6772" text="Entering loop, because p&lt;textend is true" type="C"/>
   <traceLine line="6773" text="&apos;p&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=359</url>
</problem>
<problem>
 <problemID>362</problemID>
 <file>cvs\src\rcs.c</file>
 <method>freercsnode</method>
 <line>878</line>
 <column>9</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rnodep-&gt;head&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 873.</message>
 <anchor>-798482249</anchor>
 <prefix>_path);if((*rnodep)-&gt;head!=NULL)</prefix>
 <postfix>if((*rnodep)-&gt;branch!=NULL)free(</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="0">
   <traceLine line="873" text="&apos;*rnodep-&gt;head&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="878" text="&apos;*rnodep-&gt;head&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="1">
   <traceLine line="864" text="Tracking &apos;( *rnodep) -&gt;head&apos;." type="E"/>
   <traceLine line="878" text="&apos;( *rnodep) -&gt;head&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=362</url>
</problem>
<problem>
 <problemID>371</problemID>
 <file>cvs\src\rcs.c</file>
 <method>make_file_label</method>
 <line>8509</line>
 <column>35</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;datebuf&apos; may be out of bounds. Array &apos;datebuf&apos; of size 51 may use index value(s) 0..65</message>
 <anchor>1443317765</anchor>
 <prefix>.*/assert(strcmp(DEVNULL,path));</prefix>
 <postfix>(void)date_to_internet(date,date</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="make_file_label" id="0">
   <traceLine line="8496" text="Array &apos;datebuf&apos; size is 51." type="E"/>
   <traceLine line="8509" text="Parameter &apos;rev&apos; can be != 0, parameter &apos;rcs&apos; can be != 0, parameter &apos;rcs-&gt;versions&apos; can be != 0." type="E"/>
   <traceLine line="8509" text="&apos;datebuf&apos; is passed as an argument to function &apos;RCS_getrevtime&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getrevtime" id="1">
   <traceLine line="3123" text="&apos;sprintf&apos; is called." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=371</url>
</problem>
<problem>
 <problemID>408</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_delete_revs</method>
 <line>6224</line>
 <column>13</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;rev1&apos; allocated through function &apos;RCS_gettag&apos; at line 6189 can be lost at line 6224</message>
 <anchor>-212436283</anchor>
 <prefix>nch(rcs,rev1)&amp;&amp;STREQ(rev1,rev2))</prefix>
 <postfix>else{/*MakesureREV1andREV2areord</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_delete_revs" id="0">
   <traceLine line="6187" text="tag1!= ( (void* )0) is true" type="C"/>
   <traceLine line="6189" text="Dynamic memory stored in &apos;rev1&apos; is allocated by calling function &apos;RCS_gettag&apos;." type="E" refId="1"/>
   <traceLine line="6210" text="rev2== ( (void* )0) &amp;&amp;numdots(rev1) ==1 is true" type="C"/>
   <traceLine line="6216" text="rev2== ( (void* )0) is false" type="C"/>
   <traceLine line="6223" text="* (char* ) (rev1) == * (char* ) (rev2) is true" type="C"/>
   <traceLine line="6223" text="RCS_isbranch(rcs, rev1) &amp;&amp; ( * (char* ) (rev1) == * (char* ) (rev2) &amp;&amp;strcmp( (rev1),  (rev2) ) ==0) is true" type="C"/>
   <traceLine line="6224" text="Dynamic memory stored in &apos;rev1&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_gettag" id="1">
   <traceLine line="2284" text="&apos;version&apos; is allocated by calling function &apos;translate_symtag&apos;." type="E" refId="2"/>
   <traceLine line="2285" text="version!= ( (void* )0) is true" type="C"/>
   <traceLine line="2290" text="tag = version: copies &apos;version&apos; into &apos;tag&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="translate_symtag" id="2">
   <traceLine line="3230" text="&apos;r&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=408</url>
</problem>
<problem>
 <problemID>378</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_deltas</method>
 <line>7371</line>
 <column>21</column>
 <code>SV.STRBO.UNBOUND_SPRINTF</code>
 <message>function &apos;sprintf&apos; does not check buffer boundaries but outputs to the buffer &apos;buf&apos; of fixed size (80)</message>
 <anchor>-347792813</anchor>
 <prefix>ers;if(prvers==NULL)prvers=vers;</prefix>
 <postfix>prvers-&gt;version,prvers-&gt;author);</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="STR31-C"/>
  <taxonomy name="CWE" metaInf="120, 242"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=378</url>
</problem>
<problem>
 <problemID>344</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_getdate</method>
 <line>2951</line>
 <column>25</column>
 <code>NPD.GEN.MIGHT</code>
 <message>Null pointer &apos;vers&apos; that comes from line 2866 may be dereferenced at line 2951.</message>
 <anchor>-1986887722</anchor>
 <prefix>CS_datecmp(vers-&gt;date,date)&lt;=0))</prefix>
 <postfix>elsereturnNULL;}/**Lookupthelast</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getdate" id="0">
   <traceLine line="2866" text="&apos;vers&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="2886" text="p== ( (void* )0) is true" type="C"/>
   <traceLine line="2891" text="Not entering loop, because p!= ( (void* )0) is false" type="C"/>
   <traceLine line="2918" text="cur_rev!= ( (void* )0) is false" type="C"/>
   <traceLine line="2949" text="!force_tag_match|| (vers!= ( (void* )0) &amp;&amp;RCS_datecmp(vers-&gt;date, date) &lt;=0) is true" type="C"/>
   <traceLine line="2951" text="&apos;vers&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=344</url>
</problem>
<problem>
 <problemID>345</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_deltas</method>
 <line>7277</line>
 <column>28</column>
 <code>NPD.GEN.MIGHT</code>
 <message>Null pointer &apos;vers&apos; that comes from line 7168 may be dereferenced at line 7277.</message>
 <anchor>-1986887722</anchor>
 <prefix>nk.*/onbranch=0;vers=trunk_vers;</prefix>
 <postfix>linevector_copy(&amp;curlines,&amp;trunk</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_deltas" id="0">
   <traceLine line="7168" text="&apos;trunk_vers&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="7224" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="7233" text="* (char* ) (branchversion) == * (char* ) (version) is true" type="C"/>
   <traceLine line="7230" text="log!= ( (void* )0) &amp;&amp;isversion&amp;&amp; ( * (char* ) (key) == * (char* ) (&quot;log&quot;) &amp;&amp;strcmp( (key),  (&quot;log&quot;) ) ==0) &amp;&amp; ( * (char* ) (branchversion) == * (char* ) (version) &amp;&amp;strcmp( (branchversion),  (version) ) ==0) is false" type="C"/>
   <traceLine line="7264" text="* (char* ) (branchversion) == * (char* ) (version) is true" type="C"/>
   <traceLine line="7276" text="vers = trunk_vers: copies &apos;trunk_vers&apos; into &apos;vers&apos;" type="E"/>
   <traceLine line="7277" text="&apos;vers&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=345</url>
</problem>
<problem>
 <problemID>409</problemID>
 <file>cvs\src\rcs.c</file>
 <method>freercsnode</method>
 <line>881</line>
 <column>5</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*rnodep-&gt;desc&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 873.</message>
 <anchor>-798600856</anchor>
 <prefix>h!=NULL)free((*rnodep)-&gt;branch);</prefix>
 <postfix>free(*rnodep);*rnodep=NULL;}/**f</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="0">
   <traceLine line="873" text="&apos;*rnodep-&gt;desc&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;desc&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="freercsnode" id="1">
   <traceLine line="864" text="Tracking &apos;*rnodep-&gt;desc&apos;." type="E"/>
   <traceLine line="881" text="&apos;*rnodep-&gt;desc&apos; is freed by passing &apos;*rnodep&apos; to &apos;free_rcsnode_contents&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="free_rcsnode_contents" id="2">
   <traceLine line="895" text="Tracking &apos;rnode-&gt;desc&apos;." type="E"/>
   <traceLine line="915" text="&apos;rnode-&gt;desc&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=409</url>
</problem>
<problem>
 <problemID>364</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_copydeltas</method>
 <line>8108</line>
 <column>33</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;newdtext&apos; checked for NULL at line 8050 may be dereferenced at line 8108.</message>
 <anchor>1233770519</anchor>
 <prefix>dtext);if(found&amp;&amp;!insertbefore){</prefix>
 <postfix>newdtext=NULL;insertpt=NULL;}}/*</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="0">
   <traceLine line="8050" text="&apos;newdtext&apos; is checked for NULL." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="1">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=364</url>
</problem>
<problem>
 <problemID>388</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_delete_revs</method>
 <line>6321</line>
 <column>20</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;nodep&apos; returned from call to function &apos;findnode&apos; at line 6322 may be NULL and may be dereferenced at line 6321.</message>
 <anchor>405588639</anchor>
 <prefix>=NULL&amp;&amp;!STREQ(revp-&gt;next,rev1)){</prefix>
 <postfix>nodep=findnode(rcs-&gt;versions,rev</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_delete_revs" id="0">
   <traceLine line="6319" text="revp-&gt;next!= ( (void* )0) &amp;&amp; ! ( * (char* ) (revp-&gt;next) == * (char* ) (rev1) &amp;&amp;strcmp( (revp-&gt;next),  (rev1) ) ==0) is true" type="C"/>
   <traceLine line="6322" text="&apos;nodep&apos; is assigned the return value from function &apos;findnode&apos;." type="E" refId="1"/>
   <traceLine line="6321" text="&apos;nodep&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hash.c" method="findnode" id="1">
   <traceLine line="313" text="findnode" type="E"/>
   <traceLine line="318" text="&apos;findnode&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=388</url>
</problem>
<problem>
 <problemID>412</problemID>
 <file>cvs\src\rcscmds.c</file>
 <method>RCS_exec_rcsdiff</method>
 <line>438</line>
 <column>23</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>892209656</anchor>
 <prefix>oerror_return;}elseif(status&lt;0){</prefix>
 <postfix>&quot;cannotcheckoutrevision%sof%s&quot;,r</postfix>
 <trace>
  <traceBlock file="cvs\src\rcscmds.c" method="RCS_exec_rcsdiff" id="0">
   <traceLine line="436" text="Infeasible condition: &apos;status&lt;0&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="438" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcscmds.c" method="RCS_exec_rcsdiff" id="1">
   <traceLine line="436" text="Inferred value &apos;status&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="436" text="Result of expression &apos;status &lt; 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=412</url>
</problem>
<problem>
 <problemID>411</problemID>
 <file>cvs\src\rcscmds.c</file>
 <method>RCS_exec_rcsdiff</method>
 <line>410</line>
 <column>23</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>892209656</anchor>
 <prefix>oerror_return;}elseif(status&lt;0){</prefix>
 <postfix>&quot;cannotcheckoutrevision%sof%s&quot;,r</postfix>
 <trace>
  <traceBlock file="cvs\src\rcscmds.c" method="RCS_exec_rcsdiff" id="0">
   <traceLine line="408" text="Infeasible condition: &apos;status&lt;0&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="410" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcscmds.c" method="RCS_exec_rcsdiff" id="1">
   <traceLine line="408" text="Inferred value &apos;status&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="408" text="Result of expression &apos;status &lt; 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=411</url>
</problem>
<problem>
 <problemID>428</problemID>
 <file>cvs\lib\regex.c</file>
 <method>regcomp</method>
 <line>8030</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from unsigned int to char may cause loss of data</message>
 <anchor>-483188802</anchor>
 <prefix>s.*/for(i=0;i&lt;CHAR_SET_SIZE;i++)</prefix>
 <postfix>}elsepreg-&gt;translate=NULL;/*IfRE</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=428</url>
</problem>
<problem>
 <problemID>437</problemID>
 <file>cvs\lib\regex.c</file>
 <method>byte_common_op_match_null_string_p</method>
 <line>7806</line>
 <column>7</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;p1&apos; is never used after assignment</message>
 <anchor>3521</anchor>
 <prefix>rnfalse;break;caseset_number_at:</prefix>
 <postfix>default:/*Allotheropcodesmeanwec</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=437</url>
</problem>
<problem>
 <problemID>434</problemID>
 <file>cvs\lib\regex.c</file>
 <method>byte_re_match_2_internal</method>
 <line>6023</line>
 <column>17</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from bool to boolean may cause loss of data. Also there are 6 similar errors on line(s) 6025, 6624, 7393, 7394, 7410, 7411.</message>
 <anchor>-663694490</anchor>
 <prefix>iousdeclaration.*/if(same_str_p)</prefix>
 <postfix>elsebest_match_p=!MATCHING_IN_FI</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=434</url>
</problem>
<problem>
 <problemID>448</problemID>
 <file>cvs\lib\regex.c</file>
 <method>byte_re_compile_fastmap</method>
 <line>4688</line>
 <column>15</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>(!(bufp-&gt;syntax&amp;RE_DOT_NEWLINE))</prefix>
 <postfix>/*Returnifwehavealreadyset`can_b</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=448</url>
</problem>
<problem>
 <problemID>453</problemID>
 <file>cvs\src\repos.c</file>
 <method>Name_Repository</method>
 <line>93</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fpin&apos; at line 50 may be lost here.</message>
 <anchor>-899909617</anchor>
 <prefix>&quot;indirectory`%s&apos;:&quot;,xupdate_dir);</prefix>
 <postfix>}if(fclose(fpin)&lt;0)error(0,errno</postfix>
 <trace>
  <traceBlock file="cvs\src\repos.c" method="Name_Repository" id="0">
   <traceLine line="50" text="Resource is acquired: &apos;fpin&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="93" text="Resource is lost: &apos;fpin&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=453</url>
</problem>
<problem>
 <problemID>464</problemID>
 <file>cvs\src\run.c</file>
 <method>run_popen</method>
 <line>439</line>
 <column>13</column>
 <code>SV.CODE_INJECTION.SHELL_EXEC</code>
 <message>function &apos;popen&apos; possibly accepts command line that may be influenced by user, causing execution of arbitrary code. Arbitrary commands can be executed by an attacker. Check the length and content of strings used for command execution.</message>
 <anchor>106852026</anchor>
 <prefix>md,mode);if(noexec)return(NULL);</prefix>
 <postfix>}intpiped_child(char*const*comma</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="ENV04-C"/>
  <taxonomy name="CWE" metaInf="77"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=464</url>
</problem>
<problem>
 <problemID>466</problemID>
 <file>cvs\src\run.c</file>
 <method>run_exec</method>
 <line>335</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;sherr&apos; at line 208 may be lost here.</message>
 <anchor>807756433</anchor>
 <prefix>)){if(WTERMSIG(status)==SIGPIPE)</prefix>
 <postfix>rc=2;}elserc=1;#else/*VMS*/rc=WE</postfix>
 <trace>
  <traceBlock file="cvs\src\run.c" method="run_exec" id="0">
   <traceLine line="206" text="sterr&amp;&amp; (flags&amp;1) ==0 is true" type="C"/>
   <traceLine line="208" text="Resource is acquired: &apos;sherr&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="314" text="Not entering loop, because ( *__errno() ) ==4 is false" type="C"/>
   <traceLine line="335" text="Resource is lost: &apos;sherr&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=466</url>
</problem>
<problem>
 <problemID>468</problemID>
 <file>cvs\src\run.c</file>
 <method>run_exec</method>
 <line>268</line>
 <column>16</column>
 <code>SV.FIU.PROCESS_VARIANTS</code>
 <message>It is easy to run arbitrary commands through environment variables.  Use fork, execve, and pipes instead.</message>
 <anchor>-1289492725</anchor>
 <prefix>f/*dup&apos;ingisdone.trytorunitnow*/</prefix>
 <postfix>error(0,errno,&quot;cannotexec%s&quot;,run</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="242"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=468</url>
</problem>
<problem>
 <problemID>469</problemID>
 <file>cvs\src\run.c</file>
 <method>piped_child</method>
 <line>482</line>
 <column>9</column>
 <code>SV.FIU.PROCESS_VARIANTS</code>
 <message>It is easy to run arbitrary commands through environment variables.  Use fork, execve, and pipes instead.</message>
 <anchor>-1289492725</anchor>
 <prefix>below-execvpdon&apos;treturnanyhow.*/</prefix>
 <postfix>error(1,errno,&quot;cannotexec%s&quot;,com</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="242"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=469</url>
</problem>
<problem>
 <problemID>465</problemID>
 <file>cvs\src\run.c</file>
 <method>run_print</method>
 <line>413</line>
 <column>9</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>henkludgeswouldn&apos;tbenecessary.*/</prefix>
 <postfix>}for(i=0;i&lt;run_argc;i++){(*outfn</postfix>
 <trace>
  <traceBlock file="cvs\src\run.c" method="run_print" id="0">
   <traceLine line="409" text="Call to &apos;error(1, 0, &quot;internal error: bad argument to run_print&quot; )&apos; never returns." type="E"/>
   <traceLine line="413" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=465</url>
</problem>
<problem>
 <problemID>463</problemID>
 <file>cvs\src\run.c</file>
 <method>run_exec</method>
 <line>335</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;shin&apos; at line 192 may be lost here.</message>
 <anchor>1428039177</anchor>
 <prefix>)){if(WTERMSIG(status)==SIGPIPE)</prefix>
 <postfix>rc=2;}elserc=1;#else/*VMS*/rc=WE</postfix>
 <trace>
  <traceBlock file="cvs\src\run.c" method="run_exec" id="0">
   <traceLine line="192" text="stin is true" type="C"/>
   <traceLine line="192" text="Resource is acquired: &apos;shin&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="314" text="Not entering loop, because ( *__errno() ) ==4 is false" type="C"/>
   <traceLine line="335" text="Resource is lost: &apos;shin&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=463</url>
</problem>
<problem>
 <problemID>467</problemID>
 <file>cvs\src\run.c</file>
 <method>run_exec</method>
 <line>335</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;shout&apos; at line 199 may be lost here.</message>
 <anchor>-776720655</anchor>
 <prefix>)){if(WTERMSIG(status)==SIGPIPE)</prefix>
 <postfix>rc=2;}elserc=1;#else/*VMS*/rc=WE</postfix>
 <trace>
  <traceBlock file="cvs\src\run.c" method="run_exec" id="0">
   <traceLine line="199" text="stout is true" type="C"/>
   <traceLine line="199" text="Resource is acquired: &apos;shout&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="314" text="Not entering loop, because ( *__errno() ) ==4 is false" type="C"/>
   <traceLine line="335" text="Resource is lost: &apos;shout&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=467</url>
</problem>
<problem>
 <problemID>534</problemID>
 <file>cvs\src\status.c</file>
 <method>status_fileproc</method>
 <line>126</line>
 <column>5</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;sstat&apos; is never used after assignment</message>
 <anchor>109745479</anchor>
 <prefix>*)NULL,(char*)NULL,1,0,&amp;vers,0);</prefix>
 <postfix>switch(status){caseT_UNKNOWN:sst</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=534</url>
</problem>
<problem>
 <problemID>546</problemID>
 <file>cvs\src\tag.c</file>
 <method>tag_check_valid</method>
 <line>1569</line>
 <column>17</column>
 <code>UNINIT.STACK.MIGHT</code>
 <message>&apos;cwd.desc&apos; might be used uninitialized in this function.</message>
 <anchor>1886763855</anchor>
 <prefix>ory!=NULL&amp;&amp;repository[0]!=&apos;\0&apos;){</prefix>
 <postfix>error(1,errno,&quot;Failedtorestorecu</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="tag_check_valid" id="0">
   <traceLine line="1453" text="&apos;cwd.desc&apos; is declared." type="E"/>
   <traceLine line="1461" text="repository is true" type="C"/>
   <traceLine line="1462" text="valid is false" type="C"/>
   <traceLine line="1553" text="repository== ( (void* )0) is false" type="C"/>
   <traceLine line="1553" text="repository[0] == &apos;\0&apos; is true" type="C"/>
   <traceLine line="1553" text="repository== ( (void* )0) ||repository[0] == &apos;\0&apos; is true" type="C"/>
   <traceLine line="1569" text="&apos;cwd.desc&apos; is used, but is uninitialized." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP33-C"/>
  <taxonomy name="CWE" metaInf="457"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=546</url>
</problem>
<problem>
 <problemID>549</problemID>
 <file>cvs\src\tag.c</file>
 <method>rtag_fileproc</method>
 <line>979</line>
 <column>35</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 979.</message>
 <anchor>-1190332846</anchor>
 <prefix>le,symtag,numtag);if(retcode==0)</prefix>
 <postfix>}else{char*oversion;/**Asanenhan</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="rtag_fileproc" id="0">
   <traceLine line="979" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=549</url>
</problem>
<problem>
 <problemID>550</problemID>
 <file>cvs\src\tag.c</file>
 <method>rtag_fileproc</method>
 <line>1039</line>
 <column>35</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 1039.</message>
 <anchor>-1190332846</anchor>
 <prefix>sfile,symtag,rev);if(retcode==0)</prefix>
 <postfix>}if(retcode!=0){error(1,retcode=</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="rtag_fileproc" id="0">
   <traceLine line="1039" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=550</url>
</problem>
<problem>
 <problemID>552</problemID>
 <file>cvs\src\tag.c</file>
 <method>tag_fileproc</method>
 <line>1193</line>
 <column>37</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 1193.</message>
 <anchor>-1190332846</anchor>
 <prefix>val=1;gotofree_vars_and_return;}</prefix>
 <postfix>/*warmfuzzies*/if(!really_quiet)</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="tag_fileproc" id="0">
   <traceLine line="1193" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=552</url>
</problem>
<problem>
 <problemID>553</problemID>
 <file>cvs\src\tag.c</file>
 <method>tag_fileproc</method>
 <line>1314</line>
 <column>33</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 1314.</message>
 <anchor>-1190332846</anchor>
 <prefix>eturn;}if(branch_mode)free(rev);</prefix>
 <postfix>/*morewarmfuzzies*/if(!really_qu</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="tag_fileproc" id="0">
   <traceLine line="1314" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=553</url>
</problem>
<problem>
 <problemID>551</problemID>
 <file>cvs\src\tag.c</file>
 <method>rtag_delete</method>
 <line>1117</line>
 <column>27</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos; at line 1117.</message>
 <anchor>-1190332846</anchor>
 <prefix>,symtag,rcsfile-&gt;path);return1;}</prefix>
 <postfix>return0;}/**Calledtotagaparticul</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="rtag_delete" id="0">
   <traceLine line="1117" text="NULL constant is dereferenced by passing argument 2 to function &apos;RCS_rewrite&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="1">
   <traceLine line="8412" text="&apos;newdtext&apos; is passed to function &apos;RCS_rewrite&apos;." type="E"/>
   <traceLine line="8441" text="&apos;newdtext&apos; is dereferenced by passing argument 5 to function &apos;RCS_copydeltas&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="2">
   <traceLine line="8030" text="&apos;newdtext&apos; is passed to function &apos;RCS_copydeltas&apos;." type="E"/>
   <traceLine line="8050" text="newdtext!= ( (void* )0) is false" type="C"/>
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8065" text="insertbefore is false" type="C"/>
   <traceLine line="8065" text="found&amp;&amp;insertbefore is false" type="C"/>
   <traceLine line="8052" text="actions!=0 is true" type="C"/>
   <traceLine line="8106" text="found&amp;&amp; !insertbefore is true" type="C"/>
   <traceLine line="8108" text="&apos;newdtext&apos; is dereferenced by passing argument 2 to function &apos;putdeltatext&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="putdeltatext" id="3">
   <traceLine line="7997" text="&apos;d&apos; is passed to function &apos;putdeltatext&apos;." type="E"/>
   <traceLine line="7999" text="&apos;d&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=551</url>
</problem>
<problem>
 <problemID>559</problemID>
 <file>cvs\src\tag.c</file>
 <method>tag_check_valid</method>
 <line>1560</line>
 <column>17</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;cwd.desc&apos; at line 1557 may be lost here. Also there are 5 similar errors on line(s) 1570, 1576, 1585, 1599, 1609.</message>
 <anchor>-1990331761</anchor>
 <prefix>y.&quot;);if(CVS_CHDIR(repository)&lt;0)</prefix>
 <postfix>}start_recursion(val_fileproc,NU</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="tag_check_valid" id="0">
   <traceLine line="1557" text="Resource is acquired: &apos;cwd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="1560" text="Resource is lost: &apos;cwd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=559</url>
</problem>
<problem>
 <problemID>548</problemID>
 <file>cvs\src\tag.c</file>
 <method>tag_fileproc</method>
 <line>1307</line>
 <column>13</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>symtag,rev,vers-&gt;srcfile-&gt;path);</prefix>
 <postfix>free(rev);retval=1;gotofree_vars</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="tag_fileproc" id="0">
   <traceLine line="1304" text="Call to &apos;error(1, retcode== -1? ( *__errno() ) :0, &quot;failed to set tag %s to revision %s in %s&quot;, symtag, rev, vers-&gt;srcfile-&gt;path)&apos; never returns." type="E"/>
   <traceLine line="1307" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=548</url>
</problem>
<problem>
 <problemID>554</problemID>
 <file>cvs\src\tag.c</file>
 <method>tag_fileproc</method>
 <line>1260</line>
 <column>17</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-210085040</anchor>
 <prefix>){free(oversion);if(branch_mode)</prefix>
 <postfix>gotofree_vars_and_return;}if(!fo</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="tag_fileproc" id="0">
   <traceLine line="1259" text="Infeasible condition: &apos;branch_mode&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="1260" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\tag.c" method="tag_fileproc" id="1">
   <traceLine line="1259" text="Inferred value &apos;branch_mode&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="1259" text="Result of expression &apos;branch_mode != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=554</url>
</problem>
<problem>
 <problemID>558</problemID>
 <file>cvs\src\tag.c</file>
 <method>rtag_proc</method>
 <line>482</line>
 <column>13</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;where&apos; allocated through function &apos;xmalloc&apos; at line 431 can be lost at line 482</message>
 <anchor>2051040961</anchor>
 <prefix>s&quot;,repository);free(repository);</prefix>
 <postfix>}/*Endsectionwhichisidenticaltop</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="rtag_proc" id="0">
   <traceLine line="431" text="Dynamic memory stored in &apos;where&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="482" text="Dynamic memory stored in &apos;where&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=558</url>
</problem>
<problem>
 <problemID>563</problemID>
 <file>cvs\zlib\trees.c</file>
 <method>gen_codes</method>
 <line>591</line>
 <column>27</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to ush may cause loss of data</message>
 <anchor>1956367949</anchor>
 <prefix>r(bits=1;bits&lt;=MAX_BITS;bits++){</prefix>
 <postfix>}/*Checkthatthebitcountsinbl_cou</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=563</url>
</problem>
<problem>
 <problemID>564</problemID>
 <file>cvs\zlib\trees.c</file>
 <method>build_tree</method>
 <line>676</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to ush may cause loss of data</message>
 <anchor>1956367949</anchor>
 <prefix>;/*Createanewnodefatherofnandm*/</prefix>
 <postfix>s-&gt;depth[node]=(uch)((s-&gt;depth[n</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=564</url>
</problem>
<problem>
 <problemID>562</problemID>
 <file>cvs\zlib\trees.c</file>
 <method>gen_codes</method>
 <line>604</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from unsigned int to ush may cause loss of data</message>
 <anchor>-846853086</anchor>
 <prefix>0)continue;/*Nowreversethebits*/</prefix>
 <postfix>Tracecv(tree!=static_ltree,(stde</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=562</url>
</problem>
<problem>
 <problemID>567</problemID>
 <file>cvs\src\update.c</file>
 <method>update</method>
 <line>357</line>
 <column>21</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-211618970</anchor>
 <prefix>s&gt;1)){if(failed_patches_count&gt;0)</prefix>
 <postfix>returnstatus;}++pass;}while(fail</postfix>
 <trace>
  <traceBlock file="cvs\src\update.c" method="update" id="0">
   <traceLine line="356" text="Infeasible condition: &apos;failed_patches_count&gt;0&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="357" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\update.c" method="update" id="1">
   <traceLine line="356" text="Inferred value &apos;failed_patches_count&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="356" text="Result of expression &apos;failed_patches_count &gt; 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=567</url>
</problem>
<problem>
 <problemID>570</problemID>
 <file>cvs\src\update.c</file>
 <method>checkout_file</method>
 <line>1433</line>
 <column>21</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;vers_ts-&gt;vn_user&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 1492.</message>
 <anchor>-1848738317</anchor>
 <prefix>SE&quot;?*/if(vers_ts-&gt;vn_user!=NULL)</prefix>
 <postfix>if(vers_ts-&gt;vn_rcs!=NULL)free(ve</postfix>
 <trace>
  <traceBlock file="cvs\src\update.c" method="checkout_file" id="0">
   <traceLine line="1492" text="&apos;vers_ts-&gt;vn_user&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="1433" text="&apos;vers_ts-&gt;vn_user&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\update.c" method="checkout_file" id="1">
   <traceLine line="1210" text="Tracking &apos;vers_ts-&gt;vn_user&apos;." type="E"/>
   <traceLine line="1433" text="&apos;vers_ts-&gt;vn_user&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=570</url>
</problem>
<problem>
 <problemID>578</problemID>
 <file>cvs\src\update.c</file>
 <method>merge_file</method>
 <line>1918</line>
 <column>25</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;vers-&gt;vn_user&apos; by passing argument 1 to function &apos;strlen&apos; at line 1918 before NULL check at line 2010</message>
 <anchor>-1877397524</anchor>
 <prefix>ckup=xmalloc(strlen(finfo-&gt;file)</prefix>
 <postfix>+sizeof(BAKPREFIX)+10);(void)spr</postfix>
 <trace>
  <traceBlock file="cvs\src\update.c" method="merge_file" id="0">
   <traceLine line="1918" text="&apos;vers-&gt;vn_user&apos; is dereferenced by being passed as argument 1 to function &apos;strlen&apos;." type="E"/>
   <traceLine line="2010" text="&apos;vers-&gt;vn_user&apos; is checked for NULL." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=578</url>
</problem>
<problem>
 <problemID>571</problemID>
 <file>cvs\src\update.c</file>
 <method>patch_file</method>
 <line>1768</line>
 <column>13</column>
 <code>SV.TOCTOU.FILE_ACCESS</code>
 <message>function &apos;chmod&apos; operates on file names and is vulnerable to race conditions. Files can be manipulated by attackers between creation and access time.</message>
 <anchor>94635133</anchor>
 <prefix>stat%s&quot;,vers_ts-&gt;srcfile-&gt;path);</prefix>
 <postfix>file_info-&gt;st_mode&amp;~(S_IWRITE|S_</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO01-C"/>
  <taxonomy name="CWE" metaInf="367"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=571</url>
</problem>
<problem>
 <problemID>565</problemID>
 <file>cvs\src\update.c</file>
 <method>write_letter</method>
 <line>1883</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>g);cvs_output_tagged(buf,NULL);}</prefix>
 <postfix>buf[1]=&apos;&apos;;buf[2]=&apos;\0&apos;;cvs_output</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=565</url>
</problem>
<problem>
 <problemID>572</problemID>
 <file>cvs\src\update.c</file>
 <method>merge_file</method>
 <line>1953</line>
 <column>9</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;status&apos; is never used after assignment</message>
 <anchor>-892481550</anchor>
 <prefix>finfo-&gt;repository,backup);#endif</prefix>
 <postfix>/*Isthereabettertermthan&quot;nonmerg</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=572</url>
</problem>
<problem>
 <problemID>573</problemID>
 <file>cvs\src\update.c</file>
 <method>join_file</method>
 <line>2379</line>
 <column>13</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;status&apos; is never used after assignment</message>
 <anchor>-892481550</anchor>
 <prefix>getoreturnanon-zeroexitstatus.*/</prefix>
 <postfix>options=saved_options;freevers_t</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=573</url>
</problem>
<problem>
 <problemID>579</problemID>
 <file>cvs\src\update.c</file>
 <method>update</method>
 <line>361</line>
 <column>13</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;pass&apos; is never used after assignment</message>
 <anchor>3433489</anchor>
 <prefix>t,failed_patches);returnstatus;}</prefix>
 <postfix>}while(failed_patches_count&gt;0);r</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=579</url>
</problem>
<problem>
 <problemID>568</problemID>
 <file>cvs\src\update.c</file>
 <method>merge_file</method>
 <line>2011</line>
 <column>13</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;vers-&gt;vn_user&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 2064.</message>
 <anchor>1613173489</anchor>
 <prefix>&quot;BASE&quot;?*/if(vers-&gt;vn_user!=NULL)</prefix>
 <postfix>vers-&gt;vn_user=xstrdup(vers-&gt;vn_r</postfix>
 <trace>
  <traceBlock file="cvs\src\update.c" method="merge_file" id="0">
   <traceLine line="2064" text="&apos;vers-&gt;vn_user&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="2011" text="&apos;vers-&gt;vn_user&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\update.c" method="merge_file" id="1">
   <traceLine line="1904" text="Tracking &apos;vers-&gt;vn_user&apos;." type="E"/>
   <traceLine line="2011" text="&apos;vers-&gt;vn_user&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=568</url>
</problem>
<problem>
 <problemID>575</problemID>
 <file>cvs\src\update.c</file>
 <method>isemptydir</method>
 <line>1128</line>
 <column>21</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;cwd.desc&apos; at line 1124 may be lost here. Also there is one similar error on line 1134.</message>
 <anchor>-1990331761</anchor>
 <prefix>irectory.&quot;);if(CVS_CHDIR(dir)&lt;0)</prefix>
 <postfix>l=Entries_Open(0,NULL);files_rem</postfix>
 <trace>
  <traceBlock file="cvs\src\update.c" method="isemptydir" id="0">
   <traceLine line="1124" text="Resource is acquired: &apos;cwd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="1127" text="chdir(dir) &lt;0 is true" type="C"/>
   <traceLine line="1128" text="Resource is lost: &apos;cwd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=575</url>
</problem>
<problem>
 <problemID>566</problemID>
 <file>cvs\src\update.c</file>
 <method>write_letter</method>
 <line>1880</line>
 <column>13</column>
 <code>SV.STRBO.UNBOUND_SPRINTF</code>
 <message>function &apos;sprintf&apos; does not check buffer boundaries but outputs to the buffer &apos;buf&apos; of fixed size (80). Also there is one similar error on line 1891.</message>
 <anchor>-347792813</anchor>
 <prefix>ptfor&quot;U&quot;.*/break;}if(tag!=NULL){</prefix>
 <postfix>cvs_output_tagged(buf,NULL);}buf</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="STR31-C"/>
  <taxonomy name="CWE" metaInf="120, 242"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=566</url>
</problem>
<problem>
 <problemID>577</problemID>
 <file>cvs\src\update.c</file>
 <method>checkout_file</method>
 <line>1435</line>
 <column>21</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;vers_ts-&gt;vn_rcs&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 1492.</message>
 <anchor>-1583660742</anchor>
 <prefix>_user);if(vers_ts-&gt;vn_rcs!=NULL)</prefix>
 <postfix>vers_ts-&gt;vn_user=xstrdup(xvers_t</postfix>
 <trace>
  <traceBlock file="cvs\src\update.c" method="checkout_file" id="0">
   <traceLine line="1492" text="&apos;vers_ts-&gt;vn_rcs&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="1435" text="&apos;vers_ts-&gt;vn_rcs&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\update.c" method="checkout_file" id="1">
   <traceLine line="1210" text="Tracking &apos;vers_ts-&gt;vn_rcs&apos;." type="E"/>
   <traceLine line="1435" text="&apos;vers_ts-&gt;vn_rcs&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=577</url>
</problem>
<problem>
 <problemID>583</problemID>
 <file>cvs\diff\util.c</file>
 <method>message5</method>
 <line>142</line>
 <column>5</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;new-&gt;arg1&apos; allocated through function &apos;concat&apos; at line 135 is lost at line 142</message>
 <anchor>143379962</anchor>
 <prefix>nd=new;msg_chain_end=&amp;new-&gt;next;</prefix>
 <postfix>else{if(sdiff_help_sdiff)write_o</postfix>
 <trace>
  <traceBlock file="cvs\diff\util.c" method="message5" id="0">
   <traceLine line="135" text="Dynamic memory stored in &apos;new-&gt;arg1&apos; is allocated by calling function &apos;concat&apos;." type="E" refId="1"/>
   <traceLine line="142" text="End of scope for &apos;new-&gt;arg1&apos;. Memory leak." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="concat" id="1">
   <traceLine line="824" text="&apos;new&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="2">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="3">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=583</url>
</problem>
<problem>
 <problemID>585</problemID>
 <file>cvs\diff\util.c</file>
 <method>message5</method>
 <line>142</line>
 <column>5</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;new-&gt;arg2&apos; allocated through function &apos;concat&apos; at line 136 is lost at line 142</message>
 <anchor>272462681</anchor>
 <prefix>nd=new;msg_chain_end=&amp;new-&gt;next;</prefix>
 <postfix>else{if(sdiff_help_sdiff)write_o</postfix>
 <trace>
  <traceBlock file="cvs\diff\util.c" method="message5" id="0">
   <traceLine line="136" text="Dynamic memory stored in &apos;new-&gt;arg2&apos; is allocated by calling function &apos;concat&apos;." type="E" refId="1"/>
   <traceLine line="142" text="End of scope for &apos;new-&gt;arg2&apos;. Memory leak." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\diff\util.c" method="concat" id="1">
   <traceLine line="824" text="&apos;new&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="2">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="3">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=585</url>
</problem>
<problem>
 <problemID>587</problemID>
 <file>cvs\src\wrapper.c</file>
 <method>wrap_add</method>
 <line>417</line>
 <column>16</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>otsupportedbythisversionofCVS&quot;);</prefix>
 <postfix>free(e.fromcvsFilter);/*FIXME:er</postfix>
 <trace>
  <traceBlock file="cvs\src\wrapper.c" method="wrap_add" id="0">
   <traceLine line="414" text="Call to &apos;error(1, 0, &quot;-t/-f wrappers not supported by this version of CVS&quot; )&apos; never returns." type="E"/>
   <traceLine line="417" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=587</url>
</problem>
<problem>
 <problemID>588</problemID>
 <file>cvs\src\wrapper.c</file>
 <method>wrap_add</method>
 <line>431</line>
 <column>16</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>otsupportedbythisversionofCVS&quot;);</prefix>
 <postfix>free(e.tocvsFilter);/*FIXME:erro</postfix>
 <trace>
  <traceBlock file="cvs\src\wrapper.c" method="wrap_add" id="0">
   <traceLine line="428" text="Call to &apos;error(1, 0, &quot;-t/-f wrappers not supported by this version of CVS&quot; )&apos; never returns." type="E"/>
   <traceLine line="431" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=588</url>
</problem>
<problem>
 <problemID>589</problemID>
 <file>cvs\src\wrapper.c</file>
 <method>wrap_tocvs_process_file</method>
 <line>569</line>
 <column>5</column>
 <code>SV.FMTSTR.GENERIC</code>
 <message>function &apos;sprintf&apos; possibly accepts format string that may be influenced by user, causing format string vulnerability. Undefined string lengths can lead to buffer overflows and potential exploitation by attackers. Use a defined value for string lengths.</message>
 <anchor>-1996275316</anchor>
 <prefix>clean_fmt_str(e-&gt;tocvsFilter,2);</prefix>
 <postfix>run_setup(args);run_exec(RUN_TTY</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO30-C"/>
  <taxonomy name="CWE" metaInf="134"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=589</url>
</problem>
<problem>
 <problemID>590</problemID>
 <file>cvs\src\wrapper.c</file>
 <method>wrap_fromcvs_process_file</method>
 <line>600</line>
 <column>5</column>
 <code>SV.FMTSTR.GENERIC</code>
 <message>function &apos;sprintf&apos; possibly accepts format string that may be influenced by user, causing format string vulnerability. Undefined string lengths can lead to buffer overflows and potential exploitation by attackers. Use a defined value for string lengths.</message>
 <anchor>-1996275316</anchor>
 <prefix>ean_fmt_str(e-&gt;fromcvsFilter,1);</prefix>
 <postfix>run_setup(args);run_exec(RUN_TTY</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO30-C"/>
  <taxonomy name="CWE" metaInf="134"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=590</url>
</problem>
<problem>
 <problemID>141</problemID>
 <file>cvs\src\diff.c</file>
 <method>diff_fileproc</method>
 <line>482</line>
 <column>17</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;exists&apos; is never used after assignment</message>
 <anchor>-1289358244</anchor>
 <prefix>ile=DIFF_REMOVED;else{intexists;</prefix>
 <postfix>/*specialhandlingforTAG_HEAD*/if</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=141</url>
</problem>
<problem>
 <problemID>142</problemID>
 <file>cvs\src\diff.c</file>
 <method>diff_fileproc</method>
 <line>785</line>
 <column>5</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;label1&apos; allocated through function &apos;make_file_label&apos; at line 665 can be lost at line 785. Also there is one similar error on line 785.</message>
 <anchor>45193881</anchor>
 <prefix>ts(&amp;vers);diff_mark_errors(err);</prefix>
 <postfix>}/**Remembertheexitstatusforeach</postfix>
 <trace>
  <traceBlock file="cvs\src\diff.c" method="diff_fileproc" id="0">
   <traceLine line="664" text="empty_file==DIFF_ADDED is true" type="C"/>
   <traceLine line="665" text="Dynamic memory stored in &apos;label1&apos; is allocated by calling function &apos;make_file_label&apos;." type="E" refId="1"/>
   <traceLine line="672" text="empty_file==DIFF_ADDED||empty_file==DIFF_REMOVED is true" type="C"/>
   <traceLine line="689" text="empty_file==DIFF_ADDED is true" type="C"/>
   <traceLine line="691" text="use_rev2== ( (void* )0) is false" type="C"/>
   <traceLine line="706" text="retcode!=0 is true" type="C"/>
   <traceLine line="785" text="Dynamic memory stored in &apos;label1&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="make_file_label" id="1">
   <traceLine line="8499" text="&apos;label&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="2">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="3">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=142</url>
</problem>
<problem>
 <problemID>144</problemID>
 <file>cvs\src\diff.c</file>
 <method>diff_file_nodiff</method>
 <line>906</line>
 <column>45</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;vers-&gt;srcfile&apos; checked for NULL at line 895 may be dereferenced at line 906. Also there is one similar error on line 911.</message>
 <anchor>1195101829</anchor>
 <prefix>s-&gt;vn_rcs);freevers_ts(&amp;xvers);}</prefix>
 <postfix>{/*Thefirstrevisiondoesnotexist.</postfix>
 <trace>
  <traceBlock file="cvs\src\diff.c" method="diff_file_nodiff" id="0">
   <traceLine line="895" text="vers-&gt;vn_rcs!= ( (void* )0) is true" type="C"/>
   <traceLine line="895" text="&apos;vers-&gt;srcfile&apos; is checked for NULL." type="E"/>
   <traceLine line="895" text="vers-&gt;srcfile!= ( (void* )0) is false" type="C"/>
   <traceLine line="895" text="vers-&gt;vn_rcs!= ( (void* )0) &amp;&amp;vers-&gt;srcfile!= ( (void* )0) is false" type="C"/>
   <traceLine line="906" text="&apos;vers-&gt;srcfile&apos; is dereferenced by passing argument 1 to function &apos;RCS_isdead&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_isdead" id="1">
   <traceLine line="3366" text="&apos;rcs&apos; is passed to function &apos;RCS_isdead&apos;." type="E"/>
   <traceLine line="3371" text="&apos;rcs&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=144</url>
</problem>
<problem>
 <problemID>145</problemID>
 <file>cvs\src\diff.c</file>
 <method>diff_fileproc</method>
 <line>785</line>
 <column>5</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;label2&apos; allocated through function &apos;make_file_label&apos; at line 658 can be lost at line 785. Also there is one similar error on line 785.</message>
 <anchor>256544794</anchor>
 <prefix>ts(&amp;vers);diff_mark_errors(err);</prefix>
 <postfix>}/**Remembertheexitstatusforeach</postfix>
 <trace>
  <traceBlock file="cvs\src\diff.c" method="diff_fileproc" id="0">
   <traceLine line="657" text="empty_file==DIFF_REMOVED is true" type="C"/>
   <traceLine line="658" text="Dynamic memory stored in &apos;label2&apos; is allocated by calling function &apos;make_file_label&apos;." type="E" refId="1"/>
   <traceLine line="664" text="empty_file==DIFF_ADDED is false" type="C"/>
   <traceLine line="672" text="empty_file==DIFF_ADDED is false" type="C"/>
   <traceLine line="672" text="empty_file==DIFF_REMOVED is true" type="C"/>
   <traceLine line="672" text="empty_file==DIFF_ADDED||empty_file==DIFF_REMOVED is true" type="C"/>
   <traceLine line="689" text="empty_file==DIFF_ADDED is false" type="C"/>
   <traceLine line="722" text="retcode!=0 is true" type="C"/>
   <traceLine line="785" text="Dynamic memory stored in &apos;label2&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="make_file_label" id="1">
   <traceLine line="8499" text="&apos;label&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="2">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="3">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=145</url>
</problem>
<problem>
 <problemID>138</problemID>
 <file>cvs\diff\diff.c</file>
 <method>add_exclude_file</method>
 <line>176</line>
 <column>3</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;f.buffer&apos; allocated through function &apos;slurp&apos; at line 165 can be lost at line 176</message>
 <anchor>-106775492</anchor>
 <prefix>!q)q=lim;*q++=0;add_exclude(p);}</prefix>
 <postfix>}/*Thenumbers129-thatappearinthe</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff.c" method="add_exclude_file" id="0">
   <traceLine line="165" text="Dynamic memory stored in &apos;f.buffer&apos; is allocated by calling function &apos;slurp&apos;." type="E" refId="1"/>
   <traceLine line="167" text="Not entering loop, because p&lt;lim is false" type="C"/>
   <traceLine line="176" text="Dynamic memory stored in &apos;f.buffer&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\diff\io.c" method="slurp" id="1">
   <traceLine line="180" text="&apos;current-&gt;buffer&apos; is allocated by calling function &apos;xrealloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xrealloc" id="2">
   <traceLine line="82" text="&apos;xnrealloc_inline(p, n, 1)&apos; is allocated by calling function &apos;xnrealloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnrealloc_inline" id="3">
   <traceLine line="65" text="&apos;p&apos; is allocated by calling function &apos;realloc&apos;." type="E"/>
   <traceLine line="65" text="! (p=realloc(p, n*s) ) is false" type="C"/>
   <traceLine line="65" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=realloc(p, n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jones</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=138</url>
</problem>
<problem>
 <problemID>904</problemID>
 <file>cvs\src\admin.c</file>
 <method>admin</method>
 <line>275</line>
 <column>55</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;__GETOPT_PREFIXoptarg&apos; checked for NULL at line 385 may be dereferenced at line 275. Also there is one similar error on line 369.</message>
 <anchor>665456765</anchor>
 <prefix>ate&apos;c&apos;option&quot;);gotousage_error;}</prefix>
 <postfix>strcpy(admin_data.comment,&quot;-c&quot;);</postfix>
 <trace>
  <traceBlock file="cvs\src\admin.c" method="admin" id="0">
   <traceLine line="385" text="&apos;__GETOPT_PREFIXoptarg&apos; is checked for NULL." type="E"/>
   <traceLine line="385" text="__GETOPT_PREFIXoptarg!= ( (void* )0) &amp;&amp;__GETOPT_PREFIXoptarg[0] == &apos;-&apos; is false" type="C"/>
   <traceLine line="232" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt(argc, argv, &quot;+ib::c:a:A:e::l::u::LUn:N:m:o:s:t::IqxV:k:&quot; ) ) != -1 is true" type="C"/>
   <traceLine line="237" text="!current_parsed_root-&gt;isremote&amp;&amp;c!= &apos;q&apos; &amp;&amp; !strchr(config-&gt;UserAdminOptions, c) is false" type="C"/>
   <traceLine line="259" text="__GETOPT_PREFIXoptarg== ( (void* )0) is true" type="C"/>
   <traceLine line="275" text="&apos;__GETOPT_PREFIXoptarg&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>New</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329150839208</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=904</url>
</problem>
<problem>
 <problemID>905</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>__GETOPT_PREFIXgetopt</method>
 <line>1168</line>
 <column>61</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 4 to function &apos;_getopt_internal&apos; at line 1168.</message>
 <anchor>-242024253</anchor>
 <prefix>const*argv,constchar*optstring){</prefix>
 <postfix>POSIXLY_CORRECT);}#ifdefTEST/*Co</postfix>
 <trace>
  <traceBlock file="cvs\lib\getopt.c" method="__GETOPT_PREFIXgetopt" id="0">
   <traceLine line="1168" text="NULL constant is dereferenced by passing argument 4 to function &apos;_getopt_internal&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\lib\getopt.c" method="_getopt_internal" id="1">
   <traceLine line="1139" text="&apos;longopts&apos; is passed to function &apos;_getopt_internal&apos;." type="E"/>
   <traceLine line="1147" text="&apos;longopts&apos; is dereferenced by passing argument 4 to function &apos;_getopt_internal_r&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\getopt.c" method="_getopt_internal_r" id="2">
   <traceLine line="373" text="&apos;longopts&apos; is passed to function &apos;_getopt_internal_r&apos;." type="E"/>
   <traceLine line="431" text="d-&gt;__GETOPT_PREFIXoptind&lt;argc&amp;&amp; (argv[d-&gt;__GETOPT_PREFIXoptind] [0] != &apos;-&apos; ||argv[d-&gt;__GETOPT_PREFIXoptind] [1] == &apos;\0&apos; ) is true" type="C"/>
   <traceLine line="482" text="longopts!= ( (void* )0) is false" type="C"/>
   <traceLine line="500" text="longopts!= ( (void* )0) &amp;&amp; (argv[d-&gt;__GETOPT_PREFIXoptind] [1] == &apos;-&apos; || (long_only&amp;&amp; (argv[d-&gt;__GETOPT_PREFIXoptind] [2] || !strchr(optstring, argv[d-&gt;__GETOPT_PREFIXoptind] [1] ) ) ) ) is false" type="C"/>
   <traceLine line="907" text="p = longopts: copies &apos;longopts&apos; into &apos;p&apos;" type="E"/>
   <traceLine line="907" text="&apos;p&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>New</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329150839208</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=905</url>
</problem>
<problem>
 <problemID>906</problemID>
 <file>cvs\src\log.c</file>
 <method>cvslog</method>
 <line>261</line>
 <column>54</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;__GETOPT_PREFIXoptarg&apos; checked for NULL at line 267 may be dereferenced at line 261.</message>
 <anchor>665456765</anchor>
 <prefix>prl=&amp;(*prl)-&gt;next;break;case&apos;s&apos;:</prefix>
 <postfix>break;case&apos;t&apos;:log_data.long_head</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="cvslog" id="0">
   <traceLine line="267" text="&apos;__GETOPT_PREFIXoptarg&apos; is checked for NULL." type="E"/>
   <traceLine line="267" text="__GETOPT_PREFIXoptarg!= ( (void* )0) is false" type="C"/>
   <traceLine line="231" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt(argc, argv, &quot;+bd:hlNSRr::s:tw::&quot; ) ) != -1 is true" type="C"/>
   <traceLine line="261" text="&apos;__GETOPT_PREFIXoptarg&apos; is dereferenced by passing argument 2 to function &apos;log_parse_list&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\log.c" method="log_parse_list" id="1">
   <traceLine line="736" text="&apos;argstring&apos; is passed to function &apos;log_parse_list&apos;." type="E"/>
   <traceLine line="745" text="&apos;argstring&apos; is dereferenced by passing argument 1 to function &apos;strchr&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>New</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329150839208</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=906</url>
</problem>
<problem>
 <problemID>907</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_setlocalid</method>
 <line>8560</line>
 <column>20</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;s&apos; returned from call to function &apos;strtok&apos; at line 8555 may be NULL and will be dereferenced at line 8560.</message>
 <anchor>-166191234</anchor>
 <prefix>trtok(next,&quot;=&quot;);/**Validatekey*/</prefix>
 <postfix>{if(!isalpha((unsignedchar)*s)){</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_setlocalid" id="0">
   <traceLine line="8555" text="&apos;key&apos; is assigned the return value from function &apos;strtok&apos;." type="E"/>
   <traceLine line="8560" text="s = key: copies &apos;key&apos; into &apos;s&apos;" type="E"/>
   <traceLine line="8560" text="&apos;s&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>New</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329150839208</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=907</url>
</problem>
<problem>
 <problemID>908</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_setlocalid</method>
 <line>8593</line>
 <column>45</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;next&apos; returned from call to function &apos;Xstrdup&apos; at line 8553 may be NULL and may be dereferenced at line 8593.</message>
 <anchor>2060814067</anchor>
 <prefix>D_LOCALID].string=xstrdup(next);</prefix>
 <postfix>keywords[KEYWORD_LOCALID].expand</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_setlocalid" id="0">
   <traceLine line="8553" text="&apos;copy&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="8554" text="next = copy: copies &apos;copy&apos; into &apos;next&apos;" type="E"/>
   <traceLine line="8593" text="&apos;next&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>New</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329150839208</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=908</url>
</problem>
<problem>
 <problemID>909</problemID>
 <file>cvs\src\root.c</file>
 <method>parse_cvsroot</method>
 <line>592</line>
 <column>21</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;newroot-&gt;cvs_rsh&apos; allocated through function &apos;Xstrdup&apos; at line 592 can be lost at line 592</message>
 <anchor>563490261</anchor>
 <prefix>/if(newroot-&gt;method==ext_method)</prefix>
 <postfix>}elseif(!strcasecmp(p,&quot;CVS_SERVE</postfix>
 <trace>
  <traceBlock file="cvs\src\root.c" method="parse_cvsroot" id="0">
   <traceLine line="591" text="newroot-&gt;method==ext_method is true" type="C"/>
   <traceLine line="592" text="Dynamic memory stored in &apos;newroot-&gt;cvs_rsh&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="553" text="Continue loop iteration, while (p=strtok( ( (void* )0), &quot;;&quot; ) ) is true" type="C"/>
   <traceLine line="597" text="newroot-&gt;method==ext_method||newroot-&gt;method==fork_method is true" type="C"/>
   <traceLine line="592" text="Dynamic memory stored in &apos;newroot-&gt;cvs_rsh&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>New</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329150839208</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=909</url>
</problem>
<problem>
 <problemID>910</problemID>
 <file>cvs\src\root.c</file>
 <method>parse_cvsroot</method>
 <line>599</line>
 <column>21</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;newroot-&gt;cvs_server&apos; allocated through function &apos;Xstrdup&apos; at line 599 can be lost at line 599</message>
 <anchor>802278133</anchor>
 <prefix>d||newroot-&gt;method==fork_method)</prefix>
 <postfix>}elseif(!strcasecmp(p,&quot;Redirect&quot;</postfix>
 <trace>
  <traceBlock file="cvs\src\root.c" method="parse_cvsroot" id="0">
   <traceLine line="597" text="newroot-&gt;method==ext_method||newroot-&gt;method==fork_method is true" type="C"/>
   <traceLine line="599" text="Dynamic memory stored in &apos;newroot-&gt;cvs_server&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="553" text="Continue loop iteration, while (p=strtok( ( (void* )0), &quot;;&quot; ) ) is true" type="C"/>
   <traceLine line="598" text="newroot-&gt;method==fork_method is true" type="C"/>
   <traceLine line="599" text="Dynamic memory stored in &apos;newroot-&gt;cvs_server&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>New</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329150839208</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=910</url>
</problem>
<problem>
 <problemID>911</problemID>
 <file>cvs\src\diff.c</file>
 <method>diff</method>
 <line>304</line>
 <column>62</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;__GETOPT_PREFIXoptarg&apos; checked for NULL at line 324 may be dereferenced at line 304. Also there are 3 similar errors on line(s) 309, 314, 327.</message>
 <anchor>665456765</anchor>
 <prefix>cat(&amp;opts,&amp;opts_allocated,&quot;-L&quot;);</prefix>
 <postfix>break;case&apos;C&apos;:case&apos;F&apos;:case&apos;I&apos;:ca</postfix>
 <trace>
  <traceBlock file="cvs\src\diff.c" method="diff" id="0">
   <traceLine line="324" text="&apos;__GETOPT_PREFIXoptarg&apos; is checked for NULL." type="E"/>
   <traceLine line="324" text="__GETOPT_PREFIXoptarg!= ( (void* )0) is false" type="C"/>
   <traceLine line="322" text="longopts[option_index] .has_arg==1|| (longopts[option_index] .has_arg==2&amp;&amp;__GETOPT_PREFIXoptarg!= ( (void* )0) ) is false" type="C"/>
   <traceLine line="277" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt_long(argc, argv, &quot;+abcdefhilnpstuwy0123456789BHNRTC:D:F:I:L:U:W:k:r:&quot;, longopts,  &amp;option_index) ) != -1 is true" type="C"/>
   <traceLine line="291" text="c==&apos;T&apos; is true" type="C"/>
   <traceLine line="318" text="c==146 is true" type="C"/>
   <traceLine line="322" text="longopts[option_index] .has_arg==1 is false" type="C"/>
   <traceLine line="304" text="&apos;__GETOPT_PREFIXoptarg&apos; is dereferenced by passing argument 3 to function &apos;xrealloc_and_strcat&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="xrealloc_and_strcat" id="1">
   <traceLine line="81" text="&apos;src&apos; is passed to function &apos;xrealloc_and_strcat&apos;." type="E"/>
   <traceLine line="84" text="&apos;src&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>New</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329150839208</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=911</url>
</problem>
<problem>
 <problemID>912</problemID>
 <file>cvs\src\diff.c</file>
 <method>diff</method>
 <line>355</line>
 <column>45</column>
 <code>NPD.CHECK.CALL.MIGHT</code>
 <message>Pointer &apos;__GETOPT_PREFIXoptarg&apos; checked for NULL at line 324 may be passed to function and may be dereferenced there by passing argument 1 to function &apos;Make_Date&apos; at line 355. Also there is one similar error on line 357.</message>
 <anchor>1504317091</anchor>
 <prefix>ff_rev1!=NULL||diff_date1!=NULL)</prefix>
 <postfix>elsediff_date1=Make_Date(optarg)</postfix>
 <trace>
  <traceBlock file="cvs\src\diff.c" method="diff" id="0">
   <traceLine line="324" text="&apos;__GETOPT_PREFIXoptarg&apos; is checked for NULL." type="E"/>
   <traceLine line="324" text="__GETOPT_PREFIXoptarg!= ( (void* )0) is false" type="C"/>
   <traceLine line="322" text="longopts[option_index] .has_arg==1|| (longopts[option_index] .has_arg==2&amp;&amp;__GETOPT_PREFIXoptarg!= ( (void* )0) ) is false" type="C"/>
   <traceLine line="277" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt_long(argc, argv, &quot;+abcdefhilnpstuwy0123456789BHNRTC:D:F:I:L:U:W:k:r:&quot;, longopts,  &amp;option_index) ) != -1 is true" type="C"/>
   <traceLine line="291" text="c==&apos;T&apos; is true" type="C"/>
   <traceLine line="296" text="have_rev1_label++ is true" type="C"/>
   <traceLine line="297" text="have_rev2_label++ is true" type="C"/>
   <traceLine line="318" text="c==146 is true" type="C"/>
   <traceLine line="322" text="longopts[option_index] .has_arg==1 is false" type="C"/>
   <traceLine line="354" text="diff_date1!= ( (void* )0) is true" type="C"/>
   <traceLine line="354" text="diff_rev1!= ( (void* )0) ||diff_date1!= ( (void* )0) is true" type="C"/>
   <traceLine line="355" text="&apos;__GETOPT_PREFIXoptarg&apos; is dereferenced by passing argument 1 to function &apos;Make_Date&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="Make_Date" id="1">
   <traceLine line="1081" text="&apos;rawdate&apos; is passed to function &apos;Make_Date&apos;." type="E"/>
   <traceLine line="1085" text="&apos;rawdate&apos; is dereferenced by passing argument 2 to function &apos;get_date&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\getdate.c" method="get_date" id="2">
   <traceLine line="2465" text="&apos;p&apos; is passed to function &apos;get_date&apos;." type="E"/>
   <traceLine line="2494" text="&apos;p&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>New</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329150839208</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=912</url>
</problem>
<problem>
 <problemID>913</problemID>
 <file>cvs\diff\diff.c</file>
 <method>add_exclude_file</method>
 <line>162</line>
 <column>5</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;...?0:open(__GETOPT_PREFIXoptarg, 0, 0)&apos; at line 158 may be lost here.</message>
 <anchor>-33831119</anchor>
 <prefix>esc&lt;0||fstat(f.desc,&amp;f.stat)!=0)</prefix>
 <postfix>sip(&amp;f,1);slurp(&amp;f);for(p=f.buff</postfix>
 <trace>
  <traceBlock file="cvs\diff\diff.c" method="add_exclude_file" id="0">
   <traceLine line="158" text="strcmp(__GETOPT_PREFIXoptarg, &quot;-&quot; ) ==0 is false" type="C"/>
   <traceLine line="160" text="Resource is acquired: &apos;...?0:open(__GETOPT_PREFIXoptarg, 0, 0)&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="158" text="&apos;f.desc&apos;" type="E"/>
   <traceLine line="158" text="&apos;...?0:open(__GETOPT_PREFIXoptarg, 0, 0)&apos; is copied to &apos;f.desc&apos;." type="E"/>
   <traceLine line="161" text="f.desc&lt;0 is false" type="C"/>
   <traceLine line="162" text="Resource is lost: &apos;f.desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>New</state>
 <owner>Jones</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329150839208</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=913</url>
</problem>
<problem>
 <problemID>614</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>82</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;message&apos; allocated through function &apos;Xstrdup&apos; at line 82 can be lost at line 82. Also there is one similar error on line 160.</message>
 <anchor>-582877689</anchor>
 <prefix>eck_kflag(optarg);break;case&apos;m&apos;:</prefix>
 <postfix>break;case&apos;?&apos;:default:usage(add_</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="82" text="Dynamic memory stored in &apos;message&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="71" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt(argc, argv, &quot;+k:m:&quot; ) ) != -1 is true" type="C"/>
   <traceLine line="82" text="Dynamic memory stored in &apos;message&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=614</url>
</problem>
<problem>
 <problemID>615</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>216</line>
 <column>36</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;update_dir&apos; returned from call to function &apos;Xstrdup&apos; at line 203 may be NULL and may be dereferenced at line 216.</message>
 <anchor>475579927</anchor>
 <prefix>e{p[-1]=&apos;\0&apos;;update_dir=filedir;</prefix>
 <postfix>error(1,errno,&quot;couldnotchdirto`%</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="203" text="&apos;filedir&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="208" text="p==filedir is false" type="C"/>
   <traceLine line="215" text="update_dir = filedir: copies &apos;filedir&apos; into &apos;update_dir&apos;" type="E"/>
   <traceLine line="216" text="&apos;update_dir&apos; is dereferenced by passing argument 1 to function &apos;chdir&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=615</url>
</problem>
<problem>
 <problemID>22</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>160</line>
 <column>13</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;options&apos; allocated through function &apos;RCS_check_kflag&apos; at line 78 can be lost at line 160</message>
 <anchor>1562386683</anchor>
 <prefix>itwouldspitbackausagemessage).*/</prefix>
 <postfix>start_server();ign_setup();if(op</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="78" text="Dynamic memory stored in &apos;options&apos; is allocated by calling function &apos;RCS_check_kflag&apos;." type="E" refId="1"/>
   <traceLine line="81" text="c==&apos;m&apos; is true" type="C"/>
   <traceLine line="110" text="strcmp(argv[i], &quot;.&quot; ) ==0||strcmp(argv[i], &quot;..&quot; ) ==0||fncmp(argv[i], &quot;CVS&quot; ) ==0 is true" type="C"/>
   <traceLine line="127" text="Break statement causes loop exit." type="E" refId="6"/>
   <traceLine line="160" text="Dynamic memory stored in &apos;options&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_check_kflag" id="1">
   <traceLine line="3289" text="&apos;Xstrdup(karg)&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\add.c" method="add" id="6">
   <traceLine line="101" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=22</url>
</problem>
<problem>
 <problemID>21</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>344</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;vers-&gt;options&apos; allocated through function &apos;Version_TS&apos; at line 344 can be lost at line 344. Also there is one similar error on line 712.</message>
 <anchor>-2051544069</anchor>
 <prefix>headrevisionismeaninglesstous.*/</prefix>
 <postfix>if(vers-&gt;vn_user==NULL){/*Noentr</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;options&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="345" text="vers-&gt;vn_user== ( (void* )0) is true" type="C"/>
   <traceLine line="348" text="vers-&gt;vn_rcs== ( (void* )0) is false" type="C"/>
   <traceLine line="432" text="RCS_isdead(vers-&gt;srcfile, vers-&gt;vn_rcs) is true" type="C"/>
   <traceLine line="444" text="vers-&gt;nonbranch is false" type="C"/>
   <traceLine line="454" text="vers-&gt;ts_user== ( (void* )0) is true" type="C"/>
   <traceLine line="471" text="prev== ( (void* )0) is true" type="C"/>
   <traceLine line="488" text="Goto statement causes loop exit." type="E" refId="6"/>
   <traceLine line="280" text="Continue loop iteration, while i&lt;argc is true" type="C"/>
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;options&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="148" text="!vers_ts-&gt;options is true" type="C"/>
   <traceLine line="149" text="&apos;vers_ts-&gt;options&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="160" text="!vers_ts-&gt;entdata&amp;&amp; (sdtp&amp;&amp;sdtp-&gt;aflag==0) is false" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\add.c" method="add" id="6">
   <traceLine line="280" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=21</url>
</problem>
<problem>
 <problemID>24</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>344</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;vers-&gt;ts_rcs&apos; allocated through function &apos;Version_TS&apos; at line 344 can be lost at line 344. Also there is one similar error on line 712.</message>
 <anchor>194220821</anchor>
 <prefix>headrevisionismeaninglesstous.*/</prefix>
 <postfix>if(vers-&gt;vn_user==NULL){/*Noentr</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;ts_rcs&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="345" text="vers-&gt;vn_user== ( (void* )0) is true" type="C"/>
   <traceLine line="348" text="vers-&gt;vn_rcs== ( (void* )0) is false" type="C"/>
   <traceLine line="432" text="RCS_isdead(vers-&gt;srcfile, vers-&gt;vn_rcs) is true" type="C"/>
   <traceLine line="444" text="vers-&gt;nonbranch is false" type="C"/>
   <traceLine line="454" text="vers-&gt;ts_user== ( (void* )0) is true" type="C"/>
   <traceLine line="471" text="prev== ( (void* )0) is true" type="C"/>
   <traceLine line="488" text="Goto statement causes loop exit." type="E" refId="6"/>
   <traceLine line="280" text="Continue loop iteration, while i&lt;argc is true" type="C"/>
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;ts_rcs&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="91" text="strcmp(entdata-&gt;timestamp, &quot;D&quot; ) !=0 is true" type="C"/>
   <traceLine line="95" text="&apos;vers_ts-&gt;ts_rcs&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="97" text="! (tag||date) &amp;&amp; ! (sdtp&amp;&amp;sdtp-&gt;aflag) is false" type="C"/>
   <traceLine line="160" text="!vers_ts-&gt;entdata&amp;&amp; (sdtp&amp;&amp;sdtp-&gt;aflag==0) is false" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="257" text="finfo-&gt;entries!= (List* ) ( (void* )0) is true" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\add.c" method="add" id="6">
   <traceLine line="280" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=24</url>
</problem>
<problem>
 <problemID>14</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>344</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;vers-&gt;ts_conflict&apos; allocated through function &apos;Version_TS&apos; at line 344 can be lost at line 344. Also there is one similar error on line 712.</message>
 <anchor>1771636231</anchor>
 <prefix>headrevisionismeaninglesstous.*/</prefix>
 <postfix>if(vers-&gt;vn_user==NULL){/*Noentr</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;ts_conflict&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="345" text="vers-&gt;vn_user== ( (void* )0) is true" type="C"/>
   <traceLine line="348" text="vers-&gt;vn_rcs== ( (void* )0) is false" type="C"/>
   <traceLine line="432" text="RCS_isdead(vers-&gt;srcfile, vers-&gt;vn_rcs) is true" type="C"/>
   <traceLine line="444" text="vers-&gt;nonbranch is false" type="C"/>
   <traceLine line="454" text="vers-&gt;ts_user== ( (void* )0) is true" type="C"/>
   <traceLine line="471" text="prev== ( (void* )0) is true" type="C"/>
   <traceLine line="488" text="Goto statement causes loop exit." type="E" refId="6"/>
   <traceLine line="280" text="Continue loop iteration, while i&lt;argc is true" type="C"/>
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;ts_conflict&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="91" text="strcmp(entdata-&gt;timestamp, &quot;D&quot; ) !=0 is true" type="C"/>
   <traceLine line="96" text="&apos;vers_ts-&gt;ts_conflict&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="97" text="! (tag||date) &amp;&amp; ! (sdtp&amp;&amp;sdtp-&gt;aflag) is false" type="C"/>
   <traceLine line="160" text="!vers_ts-&gt;entdata&amp;&amp; (sdtp&amp;&amp;sdtp-&gt;aflag==0) is false" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="257" text="finfo-&gt;entries!= (List* ) ( (void* )0) is true" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\add.c" method="add" id="6">
   <traceLine line="280" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=14</url>
</problem>
<problem>
 <problemID>17</problemID>
 <file>cvs\src\add.c</file>
 <method>add_directory</method>
 <line>764</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;date&apos; allocated through function &apos;ParseTag&apos; at line 752 can be lost at line 764. Also there are 2 similar errors on line(s) 769, 898.</message>
 <anchor>89675883</anchor>
 <prefix>Failedtosavecurrentdirectory.&quot;);</prefix>
 <postfix>}if(CVS_CHDIR(dir)&lt;0){error(0,er</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add_directory" id="0">
   <traceLine line="752" text="Dynamic memory stored in &apos;date&apos; is allocated by calling function &apos;ParseTag&apos;." type="E" refId="1"/>
   <traceLine line="764" text="Dynamic memory stored in &apos;date&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\entries.c" method="ParseTag" id="1">
   <traceLine line="735" text="datep!= ( (void* )0) is true" type="C"/>
   <traceLine line="736" text="&apos;*datep&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="752" text="line_length&lt;0 is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=17</url>
</problem>
<problem>
 <problemID>20</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>344</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;vers-&gt;date&apos; allocated through function &apos;Version_TS&apos; at line 344 can be lost at line 344. Also there is one similar error on line 712.</message>
 <anchor>-1875547063</anchor>
 <prefix>headrevisionismeaninglesstous.*/</prefix>
 <postfix>if(vers-&gt;vn_user==NULL){/*Noentr</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;date&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="345" text="vers-&gt;vn_user== ( (void* )0) is true" type="C"/>
   <traceLine line="348" text="vers-&gt;vn_rcs== ( (void* )0) is false" type="C"/>
   <traceLine line="432" text="RCS_isdead(vers-&gt;srcfile, vers-&gt;vn_rcs) is true" type="C"/>
   <traceLine line="444" text="vers-&gt;nonbranch is false" type="C"/>
   <traceLine line="454" text="vers-&gt;ts_user== ( (void* )0) is true" type="C"/>
   <traceLine line="471" text="prev== ( (void* )0) is true" type="C"/>
   <traceLine line="488" text="Goto statement causes loop exit." type="E" refId="6"/>
   <traceLine line="280" text="Continue loop iteration, while i&lt;argc is true" type="C"/>
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;date&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="97" text="! (tag||date) &amp;&amp; ! (sdtp&amp;&amp;sdtp-&gt;aflag) is true" type="C"/>
   <traceLine line="100" text="&apos;vers_ts-&gt;date&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="155" text="tag||date is false" type="C"/>
   <traceLine line="167" text="!vers_ts-&gt;date is false" type="C"/>
   <traceLine line="160" text="!vers_ts-&gt;entdata&amp;&amp; (sdtp&amp;&amp;sdtp-&gt;aflag==0) is false" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="257" text="finfo-&gt;entries!= (List* ) ( (void* )0) is true" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\add.c" method="add" id="6">
   <traceLine line="280" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=20</url>
</problem>
<problem>
 <problemID>613</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>310</line>
 <column>28</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;finfo.update_dir&apos; returned from call to function &apos;Xstrdup&apos; at line 295 may be NULL and may be dereferenced at line 310.</message>
 <anchor>-1575454927</anchor>
 <prefix>pdate_dir=filename;finfo.file=p;</prefix>
 <postfix>error(1,errno,&quot;couldnotchdirto`%</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="295" text="&apos;filename&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="300" text="p==filename is false" type="C"/>
   <traceLine line="308" text="finfo.update_dir = filename: copies &apos;filename&apos; into &apos;finfo.update_dir&apos;" type="E"/>
   <traceLine line="310" text="&apos;finfo.update_dir&apos; is dereferenced by passing argument 1 to function &apos;chdir&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=613</url>
</problem>
<problem>
 <problemID>18</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>344</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;vers-&gt;vn_tag&apos; allocated through function &apos;Version_TS&apos; at line 344 can be lost at line 344. Also there is one similar error on line 712.</message>
 <anchor>-208277500</anchor>
 <prefix>headrevisionismeaninglesstous.*/</prefix>
 <postfix>if(vers-&gt;vn_user==NULL){/*Noentr</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;vn_tag&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="345" text="vers-&gt;vn_user== ( (void* )0) is true" type="C"/>
   <traceLine line="348" text="vers-&gt;vn_rcs== ( (void* )0) is false" type="C"/>
   <traceLine line="432" text="RCS_isdead(vers-&gt;srcfile, vers-&gt;vn_rcs) is true" type="C"/>
   <traceLine line="444" text="vers-&gt;nonbranch is false" type="C"/>
   <traceLine line="454" text="vers-&gt;ts_user== ( (void* )0) is true" type="C"/>
   <traceLine line="471" text="prev== ( (void* )0) is true" type="C"/>
   <traceLine line="488" text="Goto statement causes loop exit." type="E" refId="6"/>
   <traceLine line="280" text="Continue loop iteration, while i&lt;argc is true" type="C"/>
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;vn_tag&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="201" text="simple is false" type="C"/>
   <traceLine line="204" text="&apos;vers_ts-&gt;vn_tag&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="212" text="set_time&amp;&amp;vers_ts-&gt;vn_rcs!= ( (void* )0) is true" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\add.c" method="add" id="6">
   <traceLine line="280" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=18</url>
</problem>
<problem>
 <problemID>16</problemID>
 <file>cvs\src\add.c</file>
 <method>add_directory</method>
 <line>764</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;tag&apos; allocated through function &apos;ParseTag&apos; at line 752 can be lost at line 764. Also there are 2 similar errors on line(s) 769, 898.</message>
 <anchor>1497614335</anchor>
 <prefix>Failedtosavecurrentdirectory.&quot;);</prefix>
 <postfix>}if(CVS_CHDIR(dir)&lt;0){error(0,er</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add_directory" id="0">
   <traceLine line="752" text="Dynamic memory stored in &apos;tag&apos; is allocated by calling function &apos;ParseTag&apos;." type="E" refId="1"/>
   <traceLine line="764" text="Dynamic memory stored in &apos;tag&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\entries.c" method="ParseTag" id="1">
   <traceLine line="731" text="tagp!= ( (void* )0) is true" type="C"/>
   <traceLine line="732" text="&apos;*tagp&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="752" text="line_length&lt;0 is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=16</url>
</problem>
<problem>
 <problemID>8</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>344</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;vers-&gt;vn_rcs&apos; allocated through function &apos;Version_TS&apos; at line 344 can be lost at line 344. Also there is one similar error on line 712.</message>
 <anchor>-1633923524</anchor>
 <prefix>headrevisionismeaninglesstous.*/</prefix>
 <postfix>if(vers-&gt;vn_user==NULL){/*Noentr</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;vn_rcs&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="345" text="vers-&gt;vn_user== ( (void* )0) is true" type="C"/>
   <traceLine line="348" text="vers-&gt;vn_rcs== ( (void* )0) is false" type="C"/>
   <traceLine line="432" text="RCS_isdead(vers-&gt;srcfile, vers-&gt;vn_rcs) is true" type="C"/>
   <traceLine line="444" text="vers-&gt;nonbranch is false" type="C"/>
   <traceLine line="454" text="vers-&gt;ts_user== ( (void* )0) is true" type="C"/>
   <traceLine line="471" text="prev== ( (void* )0) is true" type="C"/>
   <traceLine line="488" text="Goto statement causes loop exit." type="E" refId="8"/>
   <traceLine line="280" text="Continue loop iteration, while i&lt;argc is true" type="C"/>
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;vn_rcs&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="187" text="vers_ts-&gt;tag&amp;&amp;strcmp(vers_ts-&gt;tag, &quot;BASE&quot; ) ==0 is false" type="C"/>
   <traceLine line="196" text="&apos;vers_ts-&gt;vn_rcs&apos; is allocated by calling function &apos;RCS_getversion&apos;." type="E" refId="2"/>
   <traceLine line="199" text="vers_ts-&gt;vn_rcs== ( (void* )0) is false" type="C"/>
   <traceLine line="212" text="set_time&amp;&amp;vers_ts-&gt;vn_rcs!= ( (void* )0) is false" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getversion" id="2">
   <traceLine line="2144" text="&apos;RCS_getdate(rcs, date, force_tag_match)&apos; is allocated by calling function &apos;RCS_getdate&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getdate" id="3">
   <traceLine line="2949" text="!force_tag_match|| (vers!= ( (void* )0) &amp;&amp;RCS_datecmp(vers-&gt;date, date) &lt;=0) is true" type="C"/>
   <traceLine line="2951" text="&apos;Xstrdup(vers-&gt;version)&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="4">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="5">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="6"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="6">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="7"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="7">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\add.c" method="add" id="8">
   <traceLine line="280" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=8</url>
</problem>
<problem>
 <problemID>10</problemID>
 <file>cvs\src\add.c</file>
 <method>add</method>
 <line>344</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;vers-&gt;tag&apos; allocated through function &apos;Version_TS&apos; at line 344 can be lost at line 344. Also there is one similar error on line 712.</message>
 <anchor>-114863105</anchor>
 <prefix>headrevisionismeaninglesstous.*/</prefix>
 <postfix>if(vers-&gt;vn_user==NULL){/*Noentr</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add" id="0">
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;tag&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="345" text="vers-&gt;vn_user== ( (void* )0) is true" type="C"/>
   <traceLine line="348" text="vers-&gt;vn_rcs== ( (void* )0) is false" type="C"/>
   <traceLine line="432" text="RCS_isdead(vers-&gt;srcfile, vers-&gt;vn_rcs) is true" type="C"/>
   <traceLine line="444" text="vers-&gt;nonbranch is false" type="C"/>
   <traceLine line="454" text="vers-&gt;ts_user== ( (void* )0) is true" type="C"/>
   <traceLine line="471" text="prev== ( (void* )0) is true" type="C"/>
   <traceLine line="488" text="Goto statement causes loop exit." type="E" refId="6"/>
   <traceLine line="280" text="Continue loop iteration, while i&lt;argc is true" type="C"/>
   <traceLine line="344" text="Dynamic memory stored in &apos;vers-&gt;tag&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="97" text="! (tag||date) &amp;&amp; ! (sdtp&amp;&amp;sdtp-&gt;aflag) is true" type="C"/>
   <traceLine line="99" text="&apos;vers_ts-&gt;tag&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="155" text="tag||date is false" type="C"/>
   <traceLine line="162" text="!vers_ts-&gt;tag is false" type="C"/>
   <traceLine line="160" text="!vers_ts-&gt;entdata&amp;&amp; (sdtp&amp;&amp;sdtp-&gt;aflag==0) is false" type="C"/>
   <traceLine line="187" text="vers_ts-&gt;tag is true" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="257" text="finfo-&gt;entries!= (List* ) ( (void* )0) is true" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\add.c" method="add" id="6">
   <traceLine line="280" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=10</url>
</problem>
<problem>
 <problemID>23</problemID>
 <file>cvs\src\add.c</file>
 <method>add_directory</method>
 <line>764</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;attrs&apos; allocated through function &apos;fileattr_getall&apos; at line 757 can be lost at line 764. Also there are 3 similar errors on line(s) 769, 889, 898.</message>
 <anchor>-1482828359</anchor>
 <prefix>Failedtosavecurrentdirectory.&quot;);</prefix>
 <postfix>}if(CVS_CHDIR(dir)&lt;0){error(0,er</postfix>
 <trace>
  <traceBlock file="cvs\src\add.c" method="add_directory" id="0">
   <traceLine line="757" text="Dynamic memory stored in &apos;attrs&apos; is allocated by calling function &apos;fileattr_getall&apos;." type="E" refId="1"/>
   <traceLine line="764" text="Dynamic memory stored in &apos;attrs&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\fileattr.c" method="fileattr_getall" id="1">
   <traceLine line="407" text="&apos;Xstrdup(p)&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=23</url>
</problem>
<problem>
 <problemID>26</problemID>
 <file>cvs\src\admin.c</file>
 <method>admin_fileproc</method>
 <line>677</line>
 <column>5</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;branch&apos; allocated through function &apos;RCS_whatbranch&apos; at line 665 can be lost at line 677</message>
 <anchor>861866739</anchor>
 <prefix>in_data-&gt;branch[2])free(branch);</prefix>
 <postfix>if(admin_data-&gt;comment!=NULL){if</postfix>
 <trace>
  <traceBlock file="cvs\src\admin.c" method="admin_fileproc" id="0">
   <traceLine line="663" text="*branch!= &apos;\0&apos; &amp;&amp; ! ( (_ctype_+1) [ (unsigned) ( (unsigned char) *branch) ] &amp;4) is true" type="C"/>
   <traceLine line="665" text="Dynamic memory stored in &apos;branch&apos; is allocated by calling function &apos;RCS_whatbranch&apos;." type="E" refId="1"/>
   <traceLine line="666" text="branch== ( (void* )0) is false" type="C"/>
   <traceLine line="673" text="status==0 is true" type="C"/>
   <traceLine line="675" text="branch!= ( (void* )0) is true" type="C"/>
   <traceLine line="675" text="branch!= &amp;admin_data-&gt;branch[2] is false" type="C"/>
   <traceLine line="675" text="branch!= ( (void* )0) &amp;&amp;branch!= &amp;admin_data-&gt;branch[2] is false" type="C"/>
   <traceLine line="677" text="End of scope for &apos;branch&apos;. Memory leak." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_whatbranch" id="1">
   <traceLine line="2568" text="&apos;version&apos; is allocated by calling function &apos;translate_symtag&apos;." type="E" refId="2"/>
   <traceLine line="2569" text="version== ( (void* )0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="translate_symtag" id="2">
   <traceLine line="3193" text="&apos;Xstrdup(p-&gt;data)&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="3">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="4">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="5"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="5">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="6"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="6">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=26</url>
</problem>
<problem>
 <problemID>617</problemID>
 <file>cvs\src\admin.c</file>
 <method>admin_fileproc</method>
 <line>896</line>
 <column>43</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;rev&apos; returned from call to function &apos;Xstrdup&apos; at line 894 may be NULL and will be dereferenced at line 896.</message>
 <anchor>937208995</anchor>
 <prefix>arg+2);*p++=&apos;:&apos;;rev=xstrdup(p);}</prefix>
 <postfix>if(revnum!=NULL){n=findnode(rcs-</postfix>
 <trace>
  <traceBlock file="cvs\src\admin.c" method="admin_fileproc" id="0">
   <traceLine line="884" text="p== ( (void* )0) is false" type="C"/>
   <traceLine line="894" text="&apos;rev&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="896" text="&apos;rev&apos; is dereferenced by passing argument 2 to function &apos;RCS_gettag&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_gettag" id="2">
   <traceLine line="2255" text="&apos;symtag&apos; is passed to function &apos;RCS_gettag&apos;." type="E"/>
   <traceLine line="2271" text="symtag&amp;&amp; ( * (char* ) (symtag) == * (char* ) (&quot;HEAD&quot;) &amp;&amp;strcmp( (symtag),  (&quot;HEAD&quot;) ) ==0) is false" type="C"/>
   <traceLine line="2279" text="&apos;symtag&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=617</url>
</problem>
<problem>
 <problemID>616</problemID>
 <file>cvs\src\admin.c</file>
 <method>admin_fileproc</method>
 <line>912</line>
 <column>21</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;tag&apos; allocated through function &apos;Xstrdup&apos; at line 886 can be lost at line 912. Also there is one similar error on line 912.</message>
 <anchor>1785657626</anchor>
 <prefix>s-&gt;path,rev);free(rev);status=1;</prefix>
 <postfix>}free(rev);delta=n-&gt;data;free(de</postfix>
 <trace>
  <traceBlock file="cvs\src\admin.c" method="admin_fileproc" id="0">
   <traceLine line="884" text="p== ( (void* )0) is true" type="C"/>
   <traceLine line="886" text="Dynamic memory stored in &apos;tag&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="904" text="n== ( (void* )0) is true" type="C"/>
   <traceLine line="912" text="End of scope for &apos;tag&apos;. Memory leak." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=616</url>
</problem>
<problem>
 <problemID>618</problemID>
 <file>cvs\src\admin.c</file>
 <method>admin_fileproc</method>
 <line>868</line>
 <column>36</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;tag&apos; returned from call to function &apos;Xstrdup&apos; at line 844 may be NULL and may be dereferenced at line 868.</message>
 <anchor>1785657626</anchor>
 <prefix>2rev(rcs,p)))/*tag2revmayexit*/{</prefix>
 <postfix>RCS_settag(rcs,tag,rev);free(rev</postfix>
 <trace>
  <traceBlock file="cvs\src\admin.c" method="admin_fileproc" id="0">
   <traceLine line="831" text="p== ( (void* )0) is false" type="C"/>
   <traceLine line="844" text="&apos;tag&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="866" text="rev=RCS_tag2rev(rcs, p) is true" type="C"/>
   <traceLine line="865" text="( *p==0&amp;&amp; (rev=RCS_head(rcs) ) ) || (rev=RCS_tag2rev(rcs, p) ) is true" type="C"/>
   <traceLine line="868" text="&apos;tag&apos; is dereferenced by passing argument 1 to function &apos;RCS_check_tag&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_check_tag" id="2">
   <traceLine line="3299" text="&apos;tag&apos; is passed to function &apos;RCS_check_tag&apos;." type="E"/>
   <traceLine line="3309" text="&apos;tag&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=618</url>
</problem>
<problem>
 <problemID>34</problemID>
 <file>cvs\src\annotate.c</file>
 <method>annotate</method>
 <line>75</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;date&apos; allocated through function &apos;Make_Date&apos; at line 75 can be lost at line 75</message>
 <anchor>-1921848057</anchor>
 <prefix>ase&apos;r&apos;:tag=optarg;break;case&apos;D&apos;:</prefix>
 <postfix>break;case&apos;f&apos;:force_tag_match=0;</postfix>
 <trace>
  <traceBlock file="cvs\src\annotate.c" method="annotate" id="0">
   <traceLine line="75" text="Dynamic memory stored in &apos;date&apos; is allocated by calling function &apos;Make_Date&apos;." type="E" refId="1"/>
   <traceLine line="61" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt(argc, argv, &quot;+lr:D:fFR&quot; ) ) != -1 is true" type="C"/>
   <traceLine line="75" text="Dynamic memory stored in &apos;date&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="Make_Date" id="1">
   <traceLine line="1089" text="&apos;date_from_time_t(t.tv_sec)&apos; is allocated by calling function &apos;date_from_time_t&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="date_from_time_t" id="2">
   <traceLine line="1122" text="&apos;ret&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="3">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="4">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="5"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="5">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="6"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="6">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=34</url>
</problem>
<problem>
 <problemID>622</problemID>
 <file>cvs\src\checkout.c</file>
 <method>checkout_proc</method>
 <line>964</line>
 <column>36</column>
 <code>NPD.FUNC.CALL.MIGHT</code>
 <message>Pointer &apos;preload_update_dir&apos; returned from call to function &apos;Xstrdup&apos; at line 778 may be NULL, may be passed to function and may be dereferenced there by passing argument 2 to function &apos;Create_Admin&apos; at line 964. Also there is one similar error on line 980.</message>
 <anchor>1984613246</anchor>
 <prefix>reisnorepository%s&quot;,repository);</prefix>
 <postfix>NULL,NULL,0,0,m_type==CHECKOUT);</postfix>
 <trace>
  <traceBlock file="cvs\src\checkout.c" method="checkout_proc" id="0">
   <traceLine line="769" text="preload_update_dir!= ( (void* )0) is false" type="C"/>
   <traceLine line="778" text="&apos;preload_update_dir&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="829" text="Break statement causes loop exit." type="E" refId="2"/>
   <traceLine line="919" text="!isabsolute(where) &amp;&amp;config-&gt;top_level_admin&amp;&amp;m_type==CHECKOUT is false" type="C"/>
   <traceLine line="964" text="&apos;preload_update_dir&apos; is dereferenced by passing argument 2 to function &apos;Create_Admin&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\checkout.c" method="checkout_proc" id="2">
   <traceLine line="823" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\create_adm.c" method="Create_Admin" id="3">
   <traceLine line="27" text="&apos;update_dir&apos; is passed to function &apos;Create_Admin&apos;." type="E"/>
   <traceLine line="83" text="&apos;update_dir&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=622</url>
</problem>
<problem>
 <problemID>621</problemID>
 <file>cvs\src\checkout.c</file>
 <method>checkout_proc</method>
 <line>869</line>
 <column>25</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;reposcopy&apos; returned from call to function &apos;Xstrdup&apos; at line 816 may be NULL and may be dereferenced at line 869.</message>
 <anchor>1456826806</anchor>
 <prefix>notinrepos)baz-&gt;quux(finally!)*/</prefix>
 <postfix>{/*Wecan&apos;twalkuppastCVSROOT.Inst</postfix>
 <trace>
  <traceBlock file="cvs\src\checkout.c" method="checkout_proc" id="0">
   <traceLine line="816" text="&apos;reposcopy&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="869" text="&apos;reposcopy&apos; is dereferenced by passing argument 1 to function &apos;strcmp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=621</url>
</problem>
<problem>
 <problemID>630</problemID>
 <file>cvs\src\client.c</file>
 <method>update_entries</method>
 <line>1642</line>
 <column>26</column>
 <code>SV.TAINTED.ALLOC_SIZE</code>
 <message>Unvalidated integer value &apos;size&apos; is received from an external function through a call to &apos;atoi&apos; at line 1469 which can be used to alter memory allocation size through call to &apos;write&apos; at line 1642. Use of unvalidated input for memory allocation can lead to a denial of service condition. Check integers for reasonable limits.</message>
 <anchor>823580913</anchor>
 <prefix>bortingduetocompressionerror&quot;);}</prefix>
 <postfix>error(1,errno,&quot;writing%s&quot;,short_</postfix>
 <trace>
  <traceBlock file="cvs\src\client.c" method="update_entries" id="0">
   <traceLine line="1469" text="Tainted data &apos;size&apos; comes from call to &apos;atoi&apos;." type="E"/>
   <traceLine line="1642" text="Tainted data &apos;size&apos; is passed to &apos;write&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="ARR30-C"/>
  <taxonomy name="CWE" metaInf="20, 129"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=630</url>
</problem>
<problem>
 <problemID>50</problemID>
 <file>cvs\src\client.c</file>
 <method>send_fileproc</method>
 <line>4433</line>
 <column>33</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;opt&apos; returned from call to function &apos;wrap_rcsoption&apos; at line 4432 may be NULL and will be dereferenced at line 4433.</message>
 <anchor>1864397537</anchor>
 <prefix>;opt=wrap_rcsoption(filename,1);</prefix>
 <postfix>send_to_server(&quot;\012&quot;,1);free(op</postfix>
 <trace>
  <traceBlock file="cvs\src\client.c" method="send_fileproc" id="0">
   <traceLine line="4432" text="&apos;opt&apos; is assigned the return value from function &apos;wrap_rcsoption&apos;." type="E" refId="1"/>
   <traceLine line="4433" text="&apos;opt&apos; is dereferenced by passing argument 1 to function &apos;send_to_server&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\wrapper.c" method="wrap_rcsoption" id="1">
   <traceLine line="529" text="wrap_rcsoption" type="E"/>
   <traceLine line="535" text="&apos;wrap_rcsoption&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\client.c" method="send_to_server" id="2">
   <traceLine line="3061" text="&apos;str&apos; is passed to function &apos;send_to_server&apos;." type="E"/>
   <traceLine line="3063" text="&apos;str&apos; is dereferenced by passing argument 2 to function &apos;send_to_server_via&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\client.c" method="send_to_server_via" id="3">
   <traceLine line="3034" text="&apos;str&apos; is passed to function &apos;send_to_server_via&apos;." type="E"/>
   <traceLine line="3039" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=50</url>
</problem>
<problem>
 <problemID>632</problemID>
 <file>cvs\src\client.c</file>
 <method>connect_to_pserver</method>
 <line>3488</line>
 <column>40</column>
 <code>NPD.FUNC.CALL.MUST</code>
 <message>Pointer &apos;write_buf&apos; returned from call to function &apos;Xasnprintf&apos; at line 3486 may be NULL, will be passed to function and may be dereferenced there by passing argument 2 to function &apos;send_to_server_via&apos; at line 3488.</message>
 <anchor>-490596830</anchor>
 <prefix>ING,root-&gt;hostname,port_number);</prefix>
 <postfix>/*WaitforHTTPstatuscode,bailouti</postfix>
 <trace>
  <traceBlock file="cvs\src\client.c" method="connect_to_pserver" id="0">
   <traceLine line="3486" text="&apos;write_buf&apos; is assigned the return value from function &apos;Xasnprintf&apos;." type="E" refId="1"/>
   <traceLine line="3488" text="&apos;write_buf&apos; is dereferenced by passing argument 2 to function &apos;send_to_server_via&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xasnprintf" id="1">
   <traceLine line="1932" text="&apos;result&apos; is assigned the return value from function &apos;vasnprintf&apos;." type="E" refId="2"/>
   <traceLine line="1933" text="result== ( (void* )0) is true" type="C"/>
   <traceLine line="1937" text="&apos;result&apos; is returned by &apos;Xasnprintf&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\vasnprintf.c" method="vasnprintf" id="2">
   <traceLine line="109" text="vasnprintf" type="E"/>
   <traceLine line="117" text="&apos;vasnprintf&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\client.c" method="send_to_server_via" id="3">
   <traceLine line="3034" text="&apos;str&apos; is passed to function &apos;send_to_server_via&apos;." type="E"/>
   <traceLine line="3039" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=632</url>
</problem>
<problem>
 <problemID>640</problemID>
 <file>cvs\src\commit.c</file>
 <method>precommit_list_to_args_proc</method>
 <line>1203</line>
 <column>45</column>
 <code>NPD.GEN.MIGHT</code>
 <message>Null pointer &apos;arg&apos; that comes from line 1170 may be dereferenced at line 1203. Also there is one similar error on line 1207.</message>
 <anchor>-746206724</anchor>
 <prefix>teintoanargument*/if(c-&gt;quotes){</prefix>
 <postfix>}else{arg=cmdlinequote(&apos;&quot;&apos;,arg);</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="precommit_list_to_args_proc" id="0">
   <traceLine line="1170" text="&apos;arg&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="1186" text="li-&gt;type==T_ADDED||li-&gt;type==T_MODIFIED||li-&gt;type==T_REMOVED is false" type="C"/>
   <traceLine line="1201" text="c-&gt;quotes is true" type="C"/>
   <traceLine line="1203" text="&apos;arg&apos; is dereferenced by passing argument 2 to function &apos;cmdlineescape&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="cmdlineescape" id="1">
   <traceLine line="975" text="&apos;s&apos; is passed to function &apos;cmdlineescape&apos;." type="E"/>
   <traceLine line="989" text="&apos;s&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=640</url>
</problem>
<problem>
 <problemID>637</problemID>
 <file>cvs\src\commit.c</file>
 <method>commit_filesdoneproc</method>
 <line>1602</line>
 <column>21</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;admin_dir&apos; returned from call to function &apos;Xstrdup&apos; at line 1600 may be NULL and will be dereferenced at line 1602.</message>
 <anchor>-336280419</anchor>
 <prefix>intcvsrootlen=strlen(&quot;CVSROOT&quot;);</prefix>
 <postfix>||admin_dir[p-repository+cvsroot</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="commit_filesdoneproc" id="0">
   <traceLine line="1585" text="strcmp(&quot;CVSROOT&quot;, p) ==0||strncmp(&quot;CVSROOT/&quot;, p, strlen(&quot;CVSROOT/&quot;) ) ==0 is true" type="C"/>
   <traceLine line="1600" text="&apos;admin_dir&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1602" text="&apos;admin_dir&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=637</url>
</problem>
<problem>
 <problemID>97</problemID>
 <file>cvs\src\commit.c</file>
 <method>remove_file</method>
 <line>1822</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;rev&apos; allocated through function &apos;RCS_whatbranch&apos; at line 1773 can be lost at line 1822. Also there is one similar error on line 1843.</message>
 <anchor>562523730</anchor>
 <prefix>ocheckout`%s&apos;&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}/*Exceptwhenwearecreatingabranc</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="remove_file" id="0">
   <traceLine line="1769" text="branch is true" type="C"/>
   <traceLine line="1773" text="Dynamic memory stored in &apos;rev&apos; is allocated by calling function &apos;RCS_whatbranch&apos;." type="E" refId="1"/>
   <traceLine line="1774" text="rev== ( (void* )0) is false" type="C"/>
   <traceLine line="1803" text="!branch is false" type="C"/>
   <traceLine line="1803" text="!tag&amp;&amp; !branch is false" type="C"/>
   <traceLine line="1816" text="rev is true" type="C"/>
   <traceLine line="1822" text="Dynamic memory stored in &apos;rev&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_whatbranch" id="1">
   <traceLine line="2568" text="&apos;version&apos; is allocated by calling function &apos;translate_symtag&apos;." type="E" refId="2"/>
   <traceLine line="2569" text="version== ( (void* )0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="translate_symtag" id="2">
   <traceLine line="3193" text="&apos;Xstrdup(p-&gt;data)&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="3">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="4">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="5"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="5">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="6"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="6">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=97</url>
</problem>
<problem>
 <problemID>639</problemID>
 <file>cvs\src\commit.c</file>
 <method>remove_file</method>
 <line>1859</line>
 <column>21</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;old_path&apos; returned from call to function &apos;Xstrdup&apos; at line 1852 may be NULL and may be dereferenced at line 1859.</message>
 <anchor>201526333</anchor>
 <prefix>ewasremoved.*/if(!really_quiet){</prefix>
 <postfix>cvs_output(&quot;&lt;--&quot;,0);if(finfo-&gt;up</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="remove_file" id="0">
   <traceLine line="1852" text="&apos;old_path&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1859" text="&apos;old_path&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=639</url>
</problem>
<problem>
 <problemID>636</problemID>
 <file>cvs\src\commit.c</file>
 <method>remove_file</method>
 <line>1868</line>
 <column>21</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;prev_rev&apos; returned from call to function &apos;Xstrdup&apos; at line 1786 may be NULL and may be dereferenced at line 1868.</message>
 <anchor>-1786388841</anchor>
 <prefix>on:delete;previousrevision:&quot;,0);</prefix>
 <postfix>cvs_output(&quot;\n&quot;,0);}free(prev_re</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="remove_file" id="0">
   <traceLine line="1781" text="branchname== ( (void* )0) is true" type="C"/>
   <traceLine line="1786" text="&apos;prev_rev&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1803" text="!branch is false" type="C"/>
   <traceLine line="1803" text="!tag&amp;&amp; !branch is false" type="C"/>
   <traceLine line="1816" text="rev is true" type="C"/>
   <traceLine line="1827" text="lockflag is false" type="C"/>
   <traceLine line="1833" text="corev!= ( (void* )0) is false" type="C"/>
   <traceLine line="1849" text="rev!= ( (void* )0) is true" type="C"/>
   <traceLine line="1853" text="!branch is false" type="C"/>
   <traceLine line="1868" text="&apos;prev_rev&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=636</url>
</problem>
<problem>
 <problemID>94</problemID>
 <file>cvs\src\commit.c</file>
 <method>checkaddfile</method>
 <line>2101</line>
 <column>13</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;desc&apos; allocated through function &apos;expand_string&apos; at line 2085 can be lost at line 2101. Also there is one similar error on line 2101.</message>
 <anchor>-1184479583</anchor>
 <prefix>{if(rcsname!=NULL)free(rcsname);</prefix>
 <postfix>}rcs=RCS_parsercsfile(rcsname);n</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="checkaddfile" id="0">
   <traceLine line="2083" text="desclen&gt;0 is true" type="C"/>
   <traceLine line="2085" text="Dynamic memory stored in &apos;desc&apos; is allocated by calling function &apos;expand_string&apos;." type="E" refId="1"/>
   <traceLine line="2095" text="add_rcs_file( ( (void* )0), rcsname, file,  ( (void* )0), opt,  ( (void* )0),  ( (void* )0), 0,  ( (void* )0), desc, desclen,  ( (void* )0), 0) !=0 is true" type="C"/>
   <traceLine line="2101" text="End of scope for &apos;desc&apos;. Memory leak." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="expand_string" id="1">
   <traceLine line="44" text="Continue loop iteration, while *n&lt;newsize is true" type="C"/>
   <traceLine line="45" text="&apos;*strptr&apos; is allocated by calling function &apos;x2realloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="x2realloc" id="2">
   <traceLine line="186" text="&apos;x2nrealloc_inline(p, pn, 1)&apos; is allocated by calling function &apos;x2nrealloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="x2nrealloc_inline" id="3">
   <traceLine line="168" text="&apos;xrealloc(p, n*s)&apos; is allocated by calling function &apos;xrealloc&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xrealloc" id="4">
   <traceLine line="82" text="&apos;xnrealloc_inline(p, n, 1)&apos; is allocated by calling function &apos;xnrealloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnrealloc_inline" id="5">
   <traceLine line="65" text="&apos;p&apos; is allocated by calling function &apos;realloc&apos;." type="E"/>
   <traceLine line="65" text="! (p=realloc(p, n*s) ) is false" type="C"/>
   <traceLine line="65" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=realloc(p, n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=94</url>
</problem>
<problem>
 <problemID>119</problemID>
 <file>cvs\src\commit.c</file>
 <method>remove_file</method>
 <line>1822</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;prev_rev&apos; allocated through function &apos;RCS_head&apos; at line 1798 can be lost at line 1822. Also there are 5 similar errors on line(s) 1822, 1843.</message>
 <anchor>-1104823592</anchor>
 <prefix>ocheckout`%s&apos;&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}/*Exceptwhenwearecreatingabranc</postfix>
 <trace>
  <traceBlock file="cvs\src\commit.c" method="remove_file" id="0">
   <traceLine line="1769" text="branch is false" type="C"/>
   <traceLine line="1798" text="Dynamic memory stored in &apos;prev_rev&apos; is allocated by calling function &apos;RCS_head&apos;." type="E" refId="1"/>
   <traceLine line="1803" text="!tag&amp;&amp; !branch is true" type="C"/>
   <traceLine line="1805" text="RCS_setbranch(finfo-&gt;rcs,  ( (void* )0) ) !=0 is false" type="C"/>
   <traceLine line="1816" text="rev is false" type="C"/>
   <traceLine line="1822" text="Dynamic memory stored in &apos;prev_rev&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_head" id="1">
   <traceLine line="2849" text="&apos;RCS_getbranch(rcs, rcs-&gt;branch, 1)&apos; is allocated by calling function &apos;RCS_getbranch&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getbranch" id="2">
   <traceLine line="2717" text="&apos;Xstrdup(vn-&gt;version)&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="3">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="4">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="5"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="5">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="6"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="6">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=119</url>
</problem>
<problem>
 <problemID>643</problemID>
 <file>cvs\src\create_adm.c</file>
 <method>Create_Admin</method>
 <line>97</line>
 <column>17</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;reposcopy&apos; returned from call to function &apos;Xstrdup&apos; at line 88 may be NULL and will be dereferenced at line 97.</message>
 <anchor>1456826806</anchor>
 <prefix>ecodecanhandleitifwedon&apos;tdoit.*/</prefix>
 <postfix>{reposcopy=xrealloc(reposcopy,st</postfix>
 <trace>
  <traceBlock file="cvs\src\create_adm.c" method="Create_Admin" id="0">
   <traceLine line="88" text="&apos;reposcopy&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="97" text="&apos;reposcopy&apos; is dereferenced by passing argument 1 to function &apos;strcmp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Jordan</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=643</url>
</problem>
<problem>
 <problemID>647</problemID>
 <file>cvs\src\edit.c</file>
 <method>edit_fileproc</method>
 <line>363</line>
 <column>9</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;vers-&gt;tag&apos; allocated through function &apos;Version_TS&apos; at line 358 is lost at line 363. Also there are 2 similar errors on line(s) 384, 431.</message>
 <anchor>-114863105</anchor>
 <prefix>ile%s;ignored&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}#ifdefCLIENT_SUPPORTif(!current</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="edit_fileproc" id="0">
   <traceLine line="358" text="Dynamic memory stored in &apos;vers-&gt;tag&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="363" text="Dynamic memory stored in &apos;vers-&gt;tag&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="97" text="! (tag||date) &amp;&amp; ! (sdtp&amp;&amp;sdtp-&gt;aflag) is true" type="C"/>
   <traceLine line="99" text="&apos;vers_ts-&gt;tag&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="155" text="tag||date is false" type="C"/>
   <traceLine line="162" text="!vers_ts-&gt;tag is false" type="C"/>
   <traceLine line="160" text="!vers_ts-&gt;entdata&amp;&amp; (sdtp&amp;&amp;sdtp-&gt;aflag==0) is false" type="C"/>
   <traceLine line="187" text="vers_ts-&gt;tag is true" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="257" text="finfo-&gt;entries!= (List* ) ( (void* )0) is true" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=647</url>
</problem>
<problem>
 <problemID>650</problemID>
 <file>cvs\src\edit.c</file>
 <method>edit_fileproc</method>
 <line>363</line>
 <column>9</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;vers-&gt;ts_user&apos; allocated through function &apos;Version_TS&apos; at line 358 is lost at line 363. Also there are 2 similar errors on line(s) 384, 431.</message>
 <anchor>1251102062</anchor>
 <prefix>ile%s;ignored&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}#ifdefCLIENT_SUPPORTif(!current</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="edit_fileproc" id="0">
   <traceLine line="358" text="Dynamic memory stored in &apos;vers-&gt;ts_user&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="363" text="Dynamic memory stored in &apos;vers-&gt;ts_user&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="260" text="server_active is false" type="C"/>
   <traceLine line="264" text="&apos;vers_ts-&gt;ts_user&apos; is allocated by calling function &apos;time_stamp&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="time_stamp" id="2">
   <traceLine line="411" text="mtime is true" type="C"/>
   <traceLine line="411" text="&apos;...?entries_time(mtime):0&apos; is allocated by calling function &apos;entries_time&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="entries_time" id="3">
   <traceLine line="373" text="&apos;Xasprintf(&quot;%s&quot;, cp)&apos; is allocated by calling function &apos;Xasprintf&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xasprintf" id="4">
   <traceLine line="1914" text="&apos;result&apos; is allocated by calling function &apos;vasprintf&apos;." type="E"/>
   <traceLine line="1914" text="vasprintf( &amp;result, format, args) &lt;0 is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=650</url>
</problem>
<problem>
 <problemID>653</problemID>
 <file>cvs\src\edit.c</file>
 <method>edit_fileproc</method>
 <line>384</line>
 <column>17</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;vers-&gt;vn_user&apos; allocated through function &apos;Version_TS&apos; at line 358 is lost at line 384. Also there is one similar error on line 431.</message>
 <anchor>413202215</anchor>
 <prefix>stingeditors.&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}free(editors);}}fp=open_file(CV</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="edit_fileproc" id="0">
   <traceLine line="358" text="Dynamic memory stored in &apos;vers-&gt;vn_user&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="360" text="!vers-&gt;vn_user is false" type="C"/>
   <traceLine line="384" text="Dynamic memory stored in &apos;vers-&gt;vn_user&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="91" text="strcmp(entdata-&gt;timestamp, &quot;D&quot; ) !=0 is true" type="C"/>
   <traceLine line="94" text="&apos;vers_ts-&gt;vn_user&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="97" text="! (tag||date) &amp;&amp; ! (sdtp&amp;&amp;sdtp-&gt;aflag) is false" type="C"/>
   <traceLine line="160" text="!vers_ts-&gt;entdata&amp;&amp; (sdtp&amp;&amp;sdtp-&gt;aflag==0) is false" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="257" text="finfo-&gt;entries!= (List* ) ( (void* )0) is true" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=653</url>
</problem>
<problem>
 <problemID>655</problemID>
 <file>cvs\src\edit.c</file>
 <method>notify_do</method>
 <line>1042</line>
 <column>39</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;args.notifyee&apos; returned from call to function &apos;Xstrdup&apos; at line 1035 may be NULL and will be dereferenced at line 1042.</message>
 <anchor>1828387098</anchor>
 <prefix>ochopoffthefinalnewline,ifany.*/</prefix>
 <postfix>if(cp!=NULL)*cp=&apos;\0&apos;;break;}}if(</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="notify_do" id="0">
   <traceLine line="1031" text="strncmp(line, p, len) ==0&amp;&amp;line[len] == &apos;:&apos; is true" type="C"/>
   <traceLine line="1035" text="&apos;args.notifyee&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1042" text="&apos;args.notifyee&apos; is dereferenced by passing argument 1 to function &apos;strpbrk&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=655</url>
</problem>
<problem>
 <problemID>649</problemID>
 <file>cvs\src\edit.c</file>
 <method>edit_fileproc</method>
 <line>363</line>
 <column>9</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;vers-&gt;vn_tag&apos; allocated through function &apos;Version_TS&apos; at line 358 is lost at line 363. Also there are 2 similar errors on line(s) 384, 431.</message>
 <anchor>-208277500</anchor>
 <prefix>ile%s;ignored&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}#ifdefCLIENT_SUPPORTif(!current</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="edit_fileproc" id="0">
   <traceLine line="358" text="Dynamic memory stored in &apos;vers-&gt;vn_tag&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="363" text="Dynamic memory stored in &apos;vers-&gt;vn_tag&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="201" text="simple is false" type="C"/>
   <traceLine line="204" text="&apos;vers_ts-&gt;vn_tag&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="212" text="set_time&amp;&amp;vers_ts-&gt;vn_rcs!= ( (void* )0) is true" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=649</url>
</problem>
<problem>
 <problemID>652</problemID>
 <file>cvs\src\edit.c</file>
 <method>edit_fileproc</method>
 <line>363</line>
 <column>9</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;vers-&gt;date&apos; allocated through function &apos;Version_TS&apos; at line 358 is lost at line 363. Also there are 2 similar errors on line(s) 384, 431.</message>
 <anchor>-1875547063</anchor>
 <prefix>ile%s;ignored&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}#ifdefCLIENT_SUPPORTif(!current</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="edit_fileproc" id="0">
   <traceLine line="358" text="Dynamic memory stored in &apos;vers-&gt;date&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="363" text="Dynamic memory stored in &apos;vers-&gt;date&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="97" text="! (tag||date) &amp;&amp; ! (sdtp&amp;&amp;sdtp-&gt;aflag) is true" type="C"/>
   <traceLine line="100" text="&apos;vers_ts-&gt;date&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="155" text="tag||date is false" type="C"/>
   <traceLine line="167" text="!vers_ts-&gt;date is false" type="C"/>
   <traceLine line="160" text="!vers_ts-&gt;entdata&amp;&amp; (sdtp&amp;&amp;sdtp-&gt;aflag==0) is false" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="257" text="finfo-&gt;entries!= (List* ) ( (void* )0) is true" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=652</url>
</problem>
<problem>
 <problemID>656</problemID>
 <file>cvs\src\edit.c</file>
 <method>edit_fileproc</method>
 <line>363</line>
 <column>9</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;vers-&gt;ts_rcs&apos; allocated through function &apos;Version_TS&apos; at line 358 is lost at line 363. Also there are 2 similar errors on line(s) 384, 431.</message>
 <anchor>194220821</anchor>
 <prefix>ile%s;ignored&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}#ifdefCLIENT_SUPPORTif(!current</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="edit_fileproc" id="0">
   <traceLine line="358" text="Dynamic memory stored in &apos;vers-&gt;ts_rcs&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="363" text="Dynamic memory stored in &apos;vers-&gt;ts_rcs&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="91" text="strcmp(entdata-&gt;timestamp, &quot;D&quot; ) !=0 is true" type="C"/>
   <traceLine line="95" text="&apos;vers_ts-&gt;ts_rcs&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="97" text="! (tag||date) &amp;&amp; ! (sdtp&amp;&amp;sdtp-&gt;aflag) is false" type="C"/>
   <traceLine line="160" text="!vers_ts-&gt;entdata&amp;&amp; (sdtp&amp;&amp;sdtp-&gt;aflag==0) is false" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="257" text="finfo-&gt;entries!= (List* ) ( (void* )0) is true" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=656</url>
</problem>
<problem>
 <problemID>651</problemID>
 <file>cvs\src\edit.c</file>
 <method>edit_fileproc</method>
 <line>363</line>
 <column>9</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;vers-&gt;options&apos; allocated through function &apos;Version_TS&apos; at line 358 is lost at line 363. Also there are 2 similar errors on line(s) 384, 431.</message>
 <anchor>-2051544069</anchor>
 <prefix>ile%s;ignored&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}#ifdefCLIENT_SUPPORTif(!current</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="edit_fileproc" id="0">
   <traceLine line="358" text="Dynamic memory stored in &apos;vers-&gt;options&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="363" text="Dynamic memory stored in &apos;vers-&gt;options&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="148" text="!vers_ts-&gt;options is true" type="C"/>
   <traceLine line="149" text="&apos;vers_ts-&gt;options&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="160" text="!vers_ts-&gt;entdata&amp;&amp; (sdtp&amp;&amp;sdtp-&gt;aflag==0) is false" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=651</url>
</problem>
<problem>
 <problemID>646</problemID>
 <file>cvs\src\edit.c</file>
 <method>edit_fileproc</method>
 <line>363</line>
 <column>9</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;vers-&gt;ts_conflict&apos; allocated through function &apos;Version_TS&apos; at line 358 is lost at line 363. Also there are 2 similar errors on line(s) 384, 431.</message>
 <anchor>1771636231</anchor>
 <prefix>ile%s;ignored&quot;,finfo-&gt;fullname);</prefix>
 <postfix>}#ifdefCLIENT_SUPPORTif(!current</postfix>
 <trace>
  <traceBlock file="cvs\src\edit.c" method="edit_fileproc" id="0">
   <traceLine line="358" text="Dynamic memory stored in &apos;vers-&gt;ts_conflict&apos; is allocated by calling function &apos;Version_TS&apos;." type="E" refId="1"/>
   <traceLine line="363" text="Dynamic memory stored in &apos;vers-&gt;ts_conflict&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="Version_TS" id="1">
   <traceLine line="91" text="strcmp(entdata-&gt;timestamp, &quot;D&quot; ) !=0 is true" type="C"/>
   <traceLine line="96" text="&apos;vers_ts-&gt;ts_conflict&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="97" text="! (tag||date) &amp;&amp; ! (sdtp&amp;&amp;sdtp-&gt;aflag) is false" type="C"/>
   <traceLine line="160" text="!vers_ts-&gt;entdata&amp;&amp; (sdtp&amp;&amp;sdtp-&gt;aflag==0) is false" type="C"/>
   <traceLine line="215" text="server_active is false" type="C"/>
   <traceLine line="257" text="finfo-&gt;entries!= (List* ) ( (void* )0) is true" type="C"/>
   <traceLine line="260" text="server_active is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=646</url>
</problem>
<problem>
 <problemID>158</problemID>
 <file>cvs\src\entries.c</file>
 <method>fgetentent</method>
 <line>376</line>
 <column>5</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;ts&apos; allocated through function &apos;time_stamp&apos; at line 358 is lost at line 376</message>
 <anchor>-1546384188</anchor>
 <prefix>notreadentriesfile&quot;);free(line);</prefix>
 <postfix>}staticintfputentent(FILE*fp,Ent</postfix>
 <trace>
  <traceBlock file="cvs\src\entries.c" method="fgetentent" id="0">
   <traceLine line="357" text="!strncmp(ts+25, c, 24) is true" type="C"/>
   <traceLine line="358" text="Dynamic memory stored in &apos;ts&apos; is allocated by calling function &apos;time_stamp&apos;." type="E" refId="1"/>
   <traceLine line="372" text="line_length&lt;0&amp;&amp; ! ( ( (fpin) -&gt;_flags&amp;32) !=0) is false" type="C"/>
   <traceLine line="376" text="Dynamic memory stored in &apos;ts&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="time_stamp" id="1">
   <traceLine line="411" text="mtime is true" type="C"/>
   <traceLine line="411" text="&apos;...?entries_time(mtime):0&apos; is allocated by calling function &apos;entries_time&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="entries_time" id="2">
   <traceLine line="373" text="&apos;Xasprintf(&quot;%s&quot;, cp)&apos; is allocated by calling function &apos;Xasprintf&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xasprintf" id="3">
   <traceLine line="1914" text="&apos;result&apos; is allocated by calling function &apos;vasprintf&apos;." type="E"/>
   <traceLine line="1914" text="vasprintf( &amp;result, format, args) &lt;0 is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=158</url>
</problem>
<problem>
 <problemID>658</problemID>
 <file>cvs\src\expand_path.c</file>
 <method>expand_path</method>
 <line>246</line>
 <column>14</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;pstart&apos; returned from call to function &apos;Xstrdup&apos; at line 245 may be NULL and will be dereferenced at line 246.</message>
 <anchor>1304559474</anchor>
 <prefix>r*p,*pstart;pstart=p=xstrdup(s);</prefix>
 <postfix>t=get_homedir();else{#ifdefGETPW</postfix>
 <trace>
  <traceBlock file="cvs\src\expand_path.c" method="expand_path" id="0">
   <traceLine line="245" text="&apos;p&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="245" text="pstart = p: copies &apos;p&apos; into &apos;pstart&apos;" type="E"/>
   <traceLine line="246" text="&apos;pstart&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=658</url>
</problem>
<problem>
 <problemID>163</problemID>
 <file>cvs\src\expand_path.c</file>
 <method>expand_path</method>
 <line>275</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;mybuf&apos; allocated through function &apos;expand_string&apos; at line 231 can be lost at line 275</message>
 <anchor>1811204055</anchor>
 <prefix>,&quot;%s:nosuchuser%s&quot;,file,pstart);</prefix>
 <postfix>}t=ps-&gt;pw_dir;#endif}if(t==NULL)</postfix>
 <trace>
  <traceBlock file="cvs\src\expand_path.c" method="expand_path" id="0">
   <traceLine line="231" text="Dynamic memory stored in &apos;mybuf&apos; is allocated by calling function &apos;expand_string&apos;." type="E" refId="1"/>
   <traceLine line="241" text="*s++ == &apos;~&apos; is true" type="C"/>
   <traceLine line="275" text="Dynamic memory stored in &apos;mybuf&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="expand_string" id="1">
   <traceLine line="44" text="Continue loop iteration, while *n&lt;newsize is true" type="C"/>
   <traceLine line="45" text="&apos;*strptr&apos; is allocated by calling function &apos;x2realloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="x2realloc" id="2">
   <traceLine line="186" text="&apos;x2nrealloc_inline(p, pn, 1)&apos; is allocated by calling function &apos;x2nrealloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="x2nrealloc_inline" id="3">
   <traceLine line="168" text="&apos;xrealloc(p, n*s)&apos; is allocated by calling function &apos;xrealloc&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xrealloc" id="4">
   <traceLine line="82" text="&apos;xnrealloc_inline(p, n, 1)&apos; is allocated by calling function &apos;xnrealloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnrealloc_inline" id="5">
   <traceLine line="65" text="&apos;p&apos; is allocated by calling function &apos;realloc&apos;." type="E"/>
   <traceLine line="65" text="! (p=realloc(p, n*s) ) is false" type="C"/>
   <traceLine line="65" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=realloc(p, n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=163</url>
</problem>
<problem>
 <problemID>659</problemID>
 <file>cvs\src\fileattr.c</file>
 <method>fileattr_read</method>
 <line>143</line>
 <column>13</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;fileattr_default_attrs&apos; allocated through function &apos;Xstrdup&apos; at line 143 can be lost at line 143</message>
 <anchor>-1902063790</anchor>
 <prefix>tion:tabmissingin%s&quot;,fname);++p;</prefix>
 <postfix>}else{/*Unrecognizedtype,wewantt</postfix>
 <trace>
  <traceBlock file="cvs\src\fileattr.c" method="fileattr_read" id="0">
   <traceLine line="143" text="Dynamic memory stored in &apos;fileattr_default_attrs&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="102" text="Continue loop iteration, while 1 is true" type="C"/>
   <traceLine line="143" text="Dynamic memory stored in &apos;fileattr_default_attrs&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=659</url>
</problem>
<problem>
 <problemID>668</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>copy_file</method>
 <line>47</line>
 <column>18</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;source&apos; returned from call to function &apos;Xreadlink&apos; at line 46 may be NULL and will be dereferenced at line 47.</message>
 <anchor>1745383869</anchor>
 <prefix>ar*source=Xreadlink(from,rsize);</prefix>
 <postfix>free(source);return;}if(isdevice</postfix>
 <trace>
  <traceBlock file="cvs\src\filesubr.c" method="copy_file" id="0">
   <traceLine line="46" text="&apos;source&apos; is assigned the return value from function &apos;Xreadlink&apos;." type="E" refId="1"/>
   <traceLine line="47" text="&apos;source&apos; is dereferenced by passing argument 1 to function &apos;symlink&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xreadlink" id="1">
   <traceLine line="67" text="&apos;file&apos; is assigned the return value from function &apos;xreadlink&apos;." type="E" refId="2"/>
   <traceLine line="69" text="file== ( (void* )0) is true" type="C"/>
   <traceLine line="72" text="&apos;file&apos; is returned by &apos;Xreadlink&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="2">
   <traceLine line="57" text="xreadlink" type="E"/>
   <traceLine line="63" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="71" text="r&lt;0&amp;&amp; ( *__errno() ) !=34 is true" type="C"/>
   <traceLine line="76" text="Return statement causes loop exit." type="E" refId="3"/>
   <traceLine line="76" text="&apos;xreadlink&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="3">
   <traceLine line="63" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=668</url>
</problem>
<problem>
 <problemID>666</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>xcmp</method>
 <line>606</line>
 <column>27</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;buf1&apos; returned from call to function &apos;Xreadlink&apos; at line 604 may be NULL and will be dereferenced at line 606.</message>
 <anchor>-322791296</anchor>
 <prefix>f2=Xreadlink(file2,sb2.st_size);</prefix>
 <postfix>free(buf1);free(buf2);returnresu</postfix>
 <trace>
  <traceBlock file="cvs\src\filesubr.c" method="xcmp" id="0">
   <traceLine line="604" text="&apos;buf1&apos; is assigned the return value from function &apos;Xreadlink&apos;." type="E" refId="1"/>
   <traceLine line="606" text="&apos;buf1&apos; is dereferenced by passing argument 1 to function &apos;strcmp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xreadlink" id="1">
   <traceLine line="67" text="&apos;file&apos; is assigned the return value from function &apos;xreadlink&apos;." type="E" refId="2"/>
   <traceLine line="69" text="file== ( (void* )0) is true" type="C"/>
   <traceLine line="72" text="&apos;file&apos; is returned by &apos;Xreadlink&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="2">
   <traceLine line="57" text="xreadlink" type="E"/>
   <traceLine line="63" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="71" text="r&lt;0&amp;&amp; ( *__errno() ) !=34 is true" type="C"/>
   <traceLine line="76" text="Return statement causes loop exit." type="E" refId="3"/>
   <traceLine line="76" text="&apos;xreadlink&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="3">
   <traceLine line="63" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=666</url>
</problem>
<problem>
 <problemID>663</problemID>
 <file>cvs\src\filesubr.c</file>
 <method>xcmp</method>
 <line>606</line>
 <column>33</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;buf2&apos; returned from call to function &apos;Xreadlink&apos; at line 605 may be NULL and will be dereferenced at line 606.</message>
 <anchor>1184760513</anchor>
 <prefix>f2=Xreadlink(file2,sb2.st_size);</prefix>
 <postfix>free(buf1);free(buf2);returnresu</postfix>
 <trace>
  <traceBlock file="cvs\src\filesubr.c" method="xcmp" id="0">
   <traceLine line="605" text="&apos;buf2&apos; is assigned the return value from function &apos;Xreadlink&apos;." type="E" refId="1"/>
   <traceLine line="606" text="&apos;buf2&apos; is dereferenced by passing argument 2 to function &apos;strcmp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xreadlink" id="1">
   <traceLine line="67" text="&apos;file&apos; is assigned the return value from function &apos;xreadlink&apos;." type="E" refId="2"/>
   <traceLine line="69" text="file== ( (void* )0) is true" type="C"/>
   <traceLine line="72" text="&apos;file&apos; is returned by &apos;Xreadlink&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="2">
   <traceLine line="57" text="xreadlink" type="E"/>
   <traceLine line="63" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="71" text="r&lt;0&amp;&amp; ( *__errno() ) !=34 is true" type="C"/>
   <traceLine line="76" text="Return statement causes loop exit." type="E" refId="3"/>
   <traceLine line="76" text="&apos;xreadlink&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="3">
   <traceLine line="63" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=663</url>
</problem>
<problem>
 <problemID>179</problemID>
 <file>cvs\src\find_names.c</file>
 <method>find_dirs</method>
 <line>399</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;tmp&apos; allocated through function &apos;expand_string&apos; at line 344 can be lost at line 399. Also there is one similar error on line 399.</message>
 <anchor>-302271577</anchor>
 <prefix>CLOSEDIR(dirp);errno=save_errno;</prefix>
 <postfix>}(void)CVS_CLOSEDIR(dirp);if(tmp</postfix>
 <trace>
  <traceBlock file="cvs\src\find_names.c" method="find_dirs" id="0">
   <traceLine line="344" text="Dynamic memory stored in &apos;tmp&apos; is allocated by calling function &apos;expand_string&apos;." type="E" refId="1"/>
   <traceLine line="349" text="Goto statement causes loop exit." type="E" refId="6"/>
   <traceLine line="368" text="islink(tmp) is true" type="C"/>
   <traceLine line="369" text="Goto statement causes loop exit." type="E" refId="7"/>
   <traceLine line="317" text="strcmp(dp-&gt;d_name, &quot;.&quot; ) ==0||strcmp(dp-&gt;d_name, &quot;..&quot; ) ==0||strcmp(dp-&gt;d_name, &quot;Attic&quot; ) ==0||strcmp(dp-&gt;d_name, &quot;#cvs.lock&quot; ) ==0||strcmp(dp-&gt;d_name, &quot;CVS&quot; ) ==0 is true" type="C"/>
   <traceLine line="322" text="Goto statement causes loop exit." type="E" refId="8"/>
   <traceLine line="368" text="islink(tmp) is true" type="C"/>
   <traceLine line="369" text="Goto statement causes loop exit." type="E" refId="9"/>
   <traceLine line="399" text="Dynamic memory stored in &apos;tmp&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="expand_string" id="1">
   <traceLine line="44" text="Continue loop iteration, while *n&lt;newsize is true" type="C"/>
   <traceLine line="45" text="&apos;*strptr&apos; is allocated by calling function &apos;x2realloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="x2realloc" id="2">
   <traceLine line="186" text="&apos;x2nrealloc_inline(p, pn, 1)&apos; is allocated by calling function &apos;x2nrealloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="x2nrealloc_inline" id="3">
   <traceLine line="168" text="&apos;xrealloc(p, n*s)&apos; is allocated by calling function &apos;xrealloc&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xrealloc" id="4">
   <traceLine line="82" text="&apos;xnrealloc_inline(p, n, 1)&apos; is allocated by calling function &apos;xnrealloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnrealloc_inline" id="5">
   <traceLine line="65" text="&apos;p&apos; is allocated by calling function &apos;realloc&apos;." type="E"/>
   <traceLine line="65" text="! (p=realloc(p, n*s) ) is false" type="C"/>
   <traceLine line="65" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=realloc(p, n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\find_names.c" method="find_dirs" id="6">
   <traceLine line="315" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\find_names.c" method="find_dirs" id="7">
   <traceLine line="315" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\find_names.c" method="find_dirs" id="8">
   <traceLine line="315" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\find_names.c" method="find_dirs" id="9">
   <traceLine line="315" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Thomas</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=179</url>
</problem>
<problem>
 <problemID>669</problemID>
 <file>cvs\lib\getdate.c</file>
 <method>yyparse</method>
 <line>1163</line>
 <column>11</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;yyss&apos; may be out of bounds. Array &apos;yyss&apos; of size 1 may use index value(s) 1..9999</message>
 <anchor>3724672</anchor>
 <prefix>,(unsignedlongint)yystacksize));</prefix>
 <postfix>YYABORT;}YYDPRINTF((stderr,&quot;Ente</postfix>
 <trace>
  <traceBlock file="cvs\lib\getdate.c" method="yyparse" id="0">
   <traceLine line="1050" text="Array &apos;yyss&apos; is defined." type="E"/>
   <traceLine line="1062" text="yystacksize = 200" type="E"/>
   <traceLine line="1134" text="10000&lt;=yystacksize is false" type="C"/>
   <traceLine line="1134" text="False condition branch assumes that yystacksize may be [0,9999]" type="E"/>
   <traceLine line="1136" text="yystacksize = yystacksize * 2" type="E" refId="1"/>
   <traceLine line="1138" text="yystacksize = 10000" type="E"/>
   <traceLine line="1150" text="yyss1!=yyssa" type="E"/>
   <traceLine line="1163" text="yystacksize - 1" type="E" refId="2"/>
   <traceLine line="1163" text="Possible attempt to access element 1..9999 of array &apos;yyss&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\getdate.c" method="yyparse" id="1">
   <traceLine line="1136" text="Inferred value &apos;yystacksize&apos; is &apos;[0,9999]&apos;" type="E"/>
   <traceLine line="1136" text="Result of expression &apos;yystacksize * 2&apos; is &apos;[0,19998]&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\getdate.c" method="yyparse" id="2">
   <traceLine line="1163" text="Inferred value &apos;yystacksize&apos; is &apos;[0,10000]&apos;" type="E"/>
   <traceLine line="1163" text="Result of expression &apos;yystacksize - 1&apos; is &apos;[-1,9999]&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=669</url>
</problem>
<problem>
 <problemID>674</problemID>
 <file>cvs\lib\getdate.c</file>
 <method>lookup_word</method>
 <line>2190</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>nsignedcharch=*p;if(ISLOWER(ch))</prefix>
 <postfix>}for(tp=meridian_table;tp-&gt;name;</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=674</url>
</problem>
<problem>
 <problemID>673</problemID>
 <file>cvs\lib\getdate.c</file>
 <method>yyparse</method>
 <line>1216</line>
 <column>7</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1331195678</anchor>
 <prefix>|yyn==YYTABLE_NINF)gotoyyerrlab;</prefix>
 <postfix>gotoyyreduce;}if(yyn==YYFINAL)YY</postfix>
 <trace>
  <traceBlock file="cvs\lib\getdate.c" method="yyparse" id="0">
   <traceLine line="1214" text="Infeasible condition: &apos;yyn==0||yyn== -1&apos; cannot be false." type="E" refId="1"/>
   <traceLine line="1216" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\getdate.c" method="yyparse" id="1">
   <traceLine line="1214" text="Infeasible condition: &apos;yyn==0&apos; cannot be false." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\getdate.c" method="yyparse" id="2">
   <traceLine line="1214" text="Inferred value &apos;yyn&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="1214" text="Result of expression &apos;yyn != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=673</url>
</problem>
<problem>
 <problemID>672</problemID>
 <file>cvs\lib\getdate.c</file>
 <method>get_date</method>
 <line>2684</line>
 <column>15</column>
 <code>SV.STRBO.UNBOUND_SPRINTF</code>
 <message>function &apos;sprintf&apos; does not check buffer boundaries but outputs to the buffer &apos;tz1buf&apos; of fixed size (19)</message>
 <anchor>-1116112824</anchor>
 <prefix>_was_altered)tz0=get_tz(tz0buf);</prefix>
 <postfix>abs_time_zone_hour,abs_time_zone</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="STR31-C"/>
  <taxonomy name="CWE" metaInf="120, 242"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=672</url>
</problem>
<problem>
 <problemID>670</problemID>
 <file>cvs\lib\getdate.c</file>
 <method>get_date</method>
 <line>2487</line>
 <column>3</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;Start&apos; is never used after assignment</message>
 <anchor>80204866</anchor>
 <prefix>eturnfalse;now=&amp;gettime_buffer;}</prefix>
 <postfix>Start_ns=now-&gt;tv_nsec;tmp=localt</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=670</url>
</problem>
<problem>
 <problemID>671</problemID>
 <file>cvs\lib\getdate.c</file>
 <method>yyparse</method>
 <line>1100</line>
 <column>3</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to short int may cause loss of data</message>
 <anchor>492451022</anchor>
 <prefix>sthestacks.*/yyssp++;yysetstate:</prefix>
 <postfix>if(yyss+yystacksize-1&lt;=yyssp){/*</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=671</url>
</problem>
<problem>
 <problemID>676</problemID>
 <file>cvs\lib\getopt.c</file>
 <method>_getopt_internal_r</method>
 <line>907</line>
 <column>46</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;p&apos; checked for NULL at line 482 may be dereferenced at line 907. Also there is one similar error on line 907.</message>
 <anchor>104837910</anchor>
 <prefix>xactmatchorabbreviatedmatches.*/</prefix>
 <postfix>if(!strncmp(p-&gt;name,d-&gt;__nextcha</postfix>
 <trace>
  <traceBlock file="cvs\lib\getopt.c" method="_getopt_internal_r" id="0">
   <traceLine line="482" text="&apos;longopts&apos; is checked for NULL." type="E"/>
   <traceLine line="482" text="longopts!= ( (void* )0) is false" type="C"/>
   <traceLine line="500" text="longopts!= ( (void* )0) &amp;&amp; (argv[d-&gt;__GETOPT_PREFIXoptind] [1] == &apos;-&apos; || (long_only&amp;&amp; (argv[d-&gt;__GETOPT_PREFIXoptind] [2] || !strchr(optstring, argv[d-&gt;__GETOPT_PREFIXoptind] [1] ) ) ) ) is false" type="C"/>
   <traceLine line="907" text="p = longopts: copies &apos;longopts&apos; into &apos;p&apos;" type="E"/>
   <traceLine line="907" text="&apos;p&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Vick</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=676</url>
</problem>
<problem>
 <problemID>691</problemID>
 <file>cvs\src\hardlink.c</file>
 <method>list_linked_files_on_disk</method>
 <line>199</line>
 <column>19</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;path&apos; returned from call to function &apos;Xstrdup&apos; at line 184 may be NULL and will be dereferenced at line 199.</message>
 <anchor>552609061</anchor>
 <prefix>void)lookup_file_by_inode(path);</prefix>
 <postfix>error(1,errno,&quot;cannotstat%s&quot;,fil</postfix>
 <trace>
  <traceBlock file="cvs\src\hardlink.c" method="list_linked_files_on_disk" id="0">
   <traceLine line="183" text="file[0] == &apos;/&apos; is true" type="C"/>
   <traceLine line="184" text="&apos;path&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="199" text="&apos;path&apos; is dereferenced by passing argument 1 to function &apos;stat&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=691</url>
</problem>
<problem>
 <problemID>693</problemID>
 <file>cvs\src\hardlink.c</file>
 <method>update_hardlink_info</method>
 <line>146</line>
 <column>31</column>
 <code>NPD.FUNC.CALL.MUST</code>
 <message>Pointer &apos;path&apos; returned from call to function &apos;Xstrdup&apos; at line 134 may be NULL, will be passed to function and may be dereferenced there by passing argument 1 to function &apos;lookup_file_by_inode&apos; at line 146.</message>
 <anchor>-1647815877</anchor>
 <prefix>th,&quot;%s/%s&quot;,dir,file);free(dir);}</prefix>
 <postfix>if(n==NULL){/*Somethingis*really</postfix>
 <trace>
  <traceBlock file="cvs\src\hardlink.c" method="update_hardlink_info" id="0">
   <traceLine line="132" text="file[0] == &apos;/&apos; is true" type="C"/>
   <traceLine line="134" text="&apos;path&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="146" text="&apos;path&apos; is dereferenced by passing argument 1 to function &apos;lookup_file_by_inode&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hardlink.c" method="lookup_file_by_inode" id="2">
   <traceLine line="60" text="&apos;filepath&apos; is passed to function &apos;lookup_file_by_inode&apos;." type="E"/>
   <traceLine line="69" text="file is false" type="C"/>
   <traceLine line="72" text="file = filepath: copies &apos;filepath&apos; into &apos;file&apos;" type="E"/>
   <traceLine line="78" text="&apos;file&apos; is dereferenced by passing argument 1 to function &apos;stat&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=693</url>
</problem>
<problem>
 <problemID>694</problemID>
 <file>cvs\src\hardlink.c</file>
 <method>list_linked_files_on_disk</method>
 <line>197</line>
 <column>34</column>
 <code>NPD.FUNC.CALL.MUST</code>
 <message>Pointer &apos;path&apos; returned from call to function &apos;Xstrdup&apos; at line 184 may be NULL, will be passed to function and may be dereferenced there by passing argument 1 to function &apos;lookup_file_by_inode&apos; at line 197.</message>
 <anchor>-1647815877</anchor>
 <prefix>inkageforafilewouldalwaysfail.*/</prefix>
 <postfix>if(CVS_STAT(path,&amp;sb)&lt;0)error(1,</postfix>
 <trace>
  <traceBlock file="cvs\src\hardlink.c" method="list_linked_files_on_disk" id="0">
   <traceLine line="183" text="file[0] == &apos;/&apos; is true" type="C"/>
   <traceLine line="184" text="&apos;path&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="197" text="&apos;path&apos; is dereferenced by passing argument 1 to function &apos;lookup_file_by_inode&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hardlink.c" method="lookup_file_by_inode" id="2">
   <traceLine line="60" text="&apos;filepath&apos; is passed to function &apos;lookup_file_by_inode&apos;." type="E"/>
   <traceLine line="69" text="file is false" type="C"/>
   <traceLine line="72" text="file = filepath: copies &apos;filepath&apos; into &apos;file&apos;" type="E"/>
   <traceLine line="78" text="&apos;file&apos; is dereferenced by passing argument 1 to function &apos;stat&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=694</url>
</problem>
<problem>
 <problemID>699</problemID>
 <file>cvs\src\history.c</file>
 <method>history</method>
 <line>419</line>
 <column>22</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;since_rev&apos; returned from call to function &apos;Xstrdup&apos; at line 460 may be NULL and may be dereferenced at line 419. Also there are 5 similar errors on line(s) 427, 463, 580, 625, 655.</message>
 <anchor>-843431522</anchor>
 <prefix>k;case&apos;D&apos;:/*Sincespecifieddate*/</prefix>
 <postfix>{error(0,0,&quot;dateoverridingrev/ta</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="history" id="0">
   <traceLine line="460" text="&apos;since_rev&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="381" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt(argc, argv, &quot;+Tacelow?D:b:f:m:n:p:r:t:u:x:X:z:&quot; ) ) != -1 is true" type="C"/>
   <traceLine line="419" text="&apos;since_rev&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=699</url>
</problem>
<problem>
 <problemID>696</problemID>
 <file>cvs\src\history.c</file>
 <method>history</method>
 <line>419</line>
 <column>36</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;since_tag&apos; returned from call to function &apos;Xstrdup&apos; at line 472 may be NULL and may be dereferenced at line 419. Also there are 6 similar errors on line(s) 427, 451, 582, 625, 655, 664.</message>
 <anchor>5017109</anchor>
 <prefix>k;case&apos;D&apos;:/*Sincespecifieddate*/</prefix>
 <postfix>{error(0,0,&quot;dateoverridingrev/ta</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="history" id="0">
   <traceLine line="472" text="&apos;since_tag&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="381" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt(argc, argv, &quot;+Tacelow?D:b:f:m:n:p:r:t:u:x:X:z:&quot; ) ) != -1 is true" type="C"/>
   <traceLine line="419" text="*since_rev is false" type="C"/>
   <traceLine line="419" text="&apos;since_tag&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=696</url>
</problem>
<problem>
 <problemID>702</problemID>
 <file>cvs\src\history.c</file>
 <method>history</method>
 <line>419</line>
 <column>50</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;backto&apos; returned from call to function &apos;Xstrdup&apos; at line 436 may be NULL and may be dereferenced at line 419. Also there are 5 similar errors on line(s) 451, 463, 567, 625, 655.</message>
 <anchor>-2065374430</anchor>
 <prefix>k;case&apos;D&apos;:/*Sincespecifieddate*/</prefix>
 <postfix>{error(0,0,&quot;dateoverridingrev/ta</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="history" id="0">
   <traceLine line="436" text="&apos;backto&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="381" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt(argc, argv, &quot;+Tacelow?D:b:f:m:n:p:r:t:u:x:X:z:&quot; ) ) != -1 is true" type="C"/>
   <traceLine line="444" text="c==&apos;n&apos; is true" type="C"/>
   <traceLine line="419" text="*since_rev|| *since_tag is false" type="C"/>
   <traceLine line="419" text="&apos;backto&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=702</url>
</problem>
<problem>
 <problemID>700</problemID>
 <file>cvs\src\history.c</file>
 <method>history</method>
 <line>605</line>
 <column>22</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;rec_types&apos; returned from call to function &apos;Xstrdup&apos; at line 488 may be NULL and may be dereferenced at line 605. Also there is one similar error on line 664.</message>
 <anchor>1568987530</anchor>
 <prefix>expand_modules();if(tag_report){</prefix>
 <postfix>{rec_types=xrealloc(rec_types,st</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="history" id="0">
   <traceLine line="488" text="&apos;rec_types&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="605" text="&apos;rec_types&apos; is dereferenced by passing argument 1 to function &apos;strchr&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=700</url>
</problem>
<problem>
 <problemID>701</problemID>
 <file>cvs\src\history.c</file>
 <method>read_hrecs</method>
 <line>1143</line>
 <column>20</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;hrline&apos; returned from call to function &apos;Xstrdup&apos; at line 1142 may be NULL and will be dereferenced at line 1143.</message>
 <anchor>431025022</anchor>
 <prefix>ffrightnow.*/hrline=xstrdup(cp);</prefix>
 <postfix>if(select_hrec(&amp;hrec_head[hrec_c</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="read_hrecs" id="0">
   <traceLine line="1142" text="&apos;hrline&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1143" text="&apos;hrline&apos; is dereferenced by passing argument 1 to function &apos;fill_hrec&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\history.c" method="fill_hrec" id="2">
   <traceLine line="1012" text="&apos;line&apos; is passed to function &apos;fill_hrec&apos;." type="E"/>
   <traceLine line="1022" text="&apos;line&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=701</url>
</problem>
<problem>
 <problemID>697</problemID>
 <file>cvs\src\history.c</file>
 <method>report_hrecs</method>
 <line>1457</line>
 <column>39</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;repos&apos; returned from call to function &apos;Xstrdup&apos; at line 1445 may be NULL and may be dereferenced at line 1457.</message>
 <anchor>1970801217</anchor>
 <prefix>(lr-&gt;file))&gt;file_len)file_len=i;</prefix>
 <postfix>repos_len=i;if(ty!=&apos;T&apos;&amp;&amp;(i=strle</postfix>
 <trace>
  <traceBlock file="cvs\src\history.c" method="report_hrecs" id="0">
   <traceLine line="1445" text="&apos;repos&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1457" text="ty!= &apos;T&apos; is true" type="C"/>
   <traceLine line="1457" text="&apos;repos&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=697</url>
</problem>
<problem>
 <problemID>708</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>135</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;message&apos; allocated through function &apos;Xstrdup&apos; at line 135 can be lost at line 135</message>
 <anchor>-582877689</anchor>
 <prefix>ditor=1;#elseuse_editor=0;#endif</prefix>
 <postfix>break;case&apos;I&apos;:ign_add(optarg,0);</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="135" text="Dynamic memory stored in &apos;message&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="96" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt(argc, argv, &quot;+Qqdb:m:I:k:W:X&quot; ) ) != -1 is true" type="C"/>
   <traceLine line="135" text="Dynamic memory stored in &apos;message&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=708</url>
</problem>
<problem>
 <problemID>717</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>229</line>
 <column>28</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;vbranch&apos; returned from call to function &apos;Xstrdup&apos; at line 127 may be NULL and may be dereferenced at line 229.</message>
 <anchor>1909760536</anchor>
 <prefix>\\.[1-9][0-9]*$&quot;,REG_EXTENDED));</prefix>
 <postfix>{error(1,0,&quot;Onlynumericbranchspe</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="127" text="&apos;vbranch&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="183" text="(cp=strstr(argv[0], &quot;CVS&quot; ) ) &amp;&amp; ( (cp==argv[0] ) || ( ( * (cp-1) ) == &apos;/&apos; || ( * (cp-1) ) == &apos;\\&apos; ) ) is true" type="C"/>
   <traceLine line="193" text="Entering loop, because i&lt;argc is true" type="C"/>
   <traceLine line="229" text="&apos;vbranch&apos; is dereferenced by passing argument 2 to function &apos;regexec&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=717</url>
</problem>
<problem>
 <problemID>709</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>358</line>
 <column>51</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 358.</message>
 <anchor>-493709426</anchor>
 <prefix>){if(!really_quiet){charbuf[20];</prefix>
 <postfix>cvs_output_tagged(&quot;newline&quot;,NULL</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="358" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=709</url>
</problem>
<problem>
 <problemID>710</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>359</line>
 <column>43</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 359.</message>
 <anchor>-493709426</anchor>
 <prefix>_tagged(&quot;+importmergecmd&quot;,NULL);</prefix>
 <postfix>if(conflicts)sprintf(buf,&quot;%d&quot;,co</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="359" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=710</url>
</problem>
<problem>
 <problemID>711</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>366</line>
 <column>43</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 366.</message>
 <anchor>-493709426</anchor>
 <prefix>conflictscreatedbythisimport.&quot;);</prefix>
 <postfix>cvs_output_tagged(&quot;text&quot;,&quot;Usethe</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="366" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=711</url>
</problem>
<problem>
 <problemID>712</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>369</line>
 <column>43</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 369.</message>
 <anchor>-493709426</anchor>
 <prefix>llowingcommandtohelpthemerge:&quot;);</prefix>
 <postfix>cvs_output_tagged(&quot;newline&quot;,NULL</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="369" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=712</url>
</problem>
<problem>
 <problemID>713</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>370</line>
 <column>43</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 370.</message>
 <anchor>-493709426</anchor>
 <prefix>s_output_tagged(&quot;newline&quot;,NULL);</prefix>
 <postfix>cvs_output_tagged(&quot;text&quot;,&quot;\t&quot;);c</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="370" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=713</url>
</problem>
<problem>
 <problemID>714</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>384</line>
 <column>43</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 384.</message>
 <anchor>-493709426</anchor>
 <prefix>ut_tagged(&quot;repository&quot;,argv[0]);</prefix>
 <postfix>cvs_output_tagged(&quot;newline&quot;,NULL</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="384" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=714</url>
</problem>
<problem>
 <problemID>715</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>385</line>
 <column>43</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 385.</message>
 <anchor>-493709426</anchor>
 <prefix>s_output_tagged(&quot;newline&quot;,NULL);</prefix>
 <postfix>cvs_output_tagged(&quot;-importmergec</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="385" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=715</url>
</problem>
<problem>
 <problemID>716</problemID>
 <file>cvs\src\import.c</file>
 <method>import</method>
 <line>386</line>
 <column>51</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 386.</message>
 <anchor>-493709426</anchor>
 <prefix>s_output_tagged(&quot;newline&quot;,NULL);</prefix>
 <postfix>}/*FIXME:I&apos;mnotsurewhetherweneed</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import" id="0">
   <traceLine line="386" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=716</url>
</problem>
<problem>
 <problemID>707</problemID>
 <file>cvs\src\import.c</file>
 <method>import_descend_dir</method>
 <line>1741</line>
 <column>51</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;repository&apos; returned from call to function &apos;Xstrdup&apos; at line 1711 may be NULL and may be dereferenced at line 1741. Also there is one similar error on line 1776.</message>
 <anchor>1794641098</anchor>
 <prefix>=1;gotoout;}#ifdefCLIENT_SUPPORT</prefix>
 <postfix>#elseif(!isdir(repository))#endi</postfix>
 <trace>
  <traceBlock file="cvs\src\import.c" method="import_descend_dir" id="0">
   <traceLine line="1709" text="repository[0] == &apos;\0&apos; is true" type="C"/>
   <traceLine line="1711" text="&apos;new&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1713" text="repository = new: copies &apos;new&apos; into &apos;repository&apos;" type="E"/>
   <traceLine line="1726" text="!quiet&amp;&amp; !current_parsed_root-&gt;isremote is true" type="C"/>
   <traceLine line="1741" text="&apos;repository&apos; is dereferenced by passing argument 1 to function &apos;isdir&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="isdir" id="2">
   <traceLine line="119" text="&apos;file&apos; is passed to function &apos;isdir&apos;." type="E"/>
   <traceLine line="123" text="&apos;file&apos; is dereferenced by passing argument 1 to function &apos;stat&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=707</url>
</problem>
<problem>
 <problemID>278</problemID>
 <file>cvs\src\log.c</file>
 <method>cvslog</method>
 <line>307</line>
 <column>13</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;p-&gt;start&apos; by passing argument 2 to function &apos;date_to_internet&apos; at line 307 before NULL check at line 316</message>
 <anchor>1917085420</anchor>
 <prefix>0);send_to_server(&quot;Argument&quot;,0);</prefix>
 <postfix>send_to_server(datetmp,0);if(p-&gt;</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="cvslog" id="0">
   <traceLine line="307" text="&apos;p-&gt;start&apos; is dereferenced by being passed as argument 2 to function &apos;date_to_internet&apos;." type="E" refId="1"/>
   <traceLine line="316" text="&apos;p-&gt;start&apos; is checked for NULL." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="date_to_internet" id="1">
   <traceLine line="1136" text="&apos;source&apos; is passed to function &apos;date_to_internet&apos;." type="E"/>
   <traceLine line="1140" text="&apos;source&apos; is dereferenced by passing argument 2 to function &apos;date_to_tm&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="date_to_tm" id="2">
   <traceLine line="1147" text="&apos;source&apos; is passed to function &apos;date_to_tm&apos;." type="E"/>
   <traceLine line="1149" text="&apos;source&apos; is dereferenced by passing argument 1 to function &apos;sscanf&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=278</url>
</problem>
<problem>
 <problemID>266</problemID>
 <file>cvs\src\log.c</file>
 <method>cvslog</method>
 <line>313</line>
 <column>13</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;p-&gt;end&apos; by passing argument 2 to function &apos;date_to_internet&apos; at line 313 before NULL check at line 318. Also there is one similar error on line 328.</message>
 <anchor>-2047418733</anchor>
 <prefix>=&quot;,0);elsesend_to_server(&quot;&lt;&quot;,0);</prefix>
 <postfix>send_to_server(datetmp,0);send_t</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="cvslog" id="0">
   <traceLine line="313" text="&apos;p-&gt;end&apos; is dereferenced by being passed as argument 2 to function &apos;date_to_internet&apos;." type="E" refId="1"/>
   <traceLine line="318" text="&apos;p-&gt;end&apos; is checked for NULL." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="date_to_internet" id="1">
   <traceLine line="1136" text="&apos;source&apos; is passed to function &apos;date_to_internet&apos;." type="E"/>
   <traceLine line="1140" text="&apos;source&apos; is dereferenced by passing argument 2 to function &apos;date_to_tm&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="date_to_tm" id="2">
   <traceLine line="1147" text="&apos;source&apos; is passed to function &apos;date_to_tm&apos;." type="E"/>
   <traceLine line="1149" text="&apos;source&apos; is dereferenced by passing argument 1 to function &apos;sscanf&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=266</url>
</problem>
<problem>
 <problemID>731</problemID>
 <file>cvs\src\log.c</file>
 <method>log_parse_revlist</method>
 <line>627</line>
 <column>5</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;r-&gt;first&apos; allocated through function &apos;Xstrdup&apos; at line 619 is lost at line 627</message>
 <anchor>1171489773</anchor>
 <prefix>t);*pr=r;pr=&amp;r-&gt;next;copy=comma;</prefix>
 <postfix>free(orig_copy);returnret;}/**Pa</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_parse_revlist" id="0">
   <traceLine line="618" text="r-&gt;first!= ( (void* )0) is true" type="C"/>
   <traceLine line="619" text="Dynamic memory stored in &apos;r-&gt;first&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="627" text="End of scope for &apos;r-&gt;first&apos;. Memory leak." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=731</url>
</problem>
<problem>
 <problemID>737</problemID>
 <file>cvs\src\log.c</file>
 <method>log_parse_revlist</method>
 <line>627</line>
 <column>5</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;r-&gt;last&apos; allocated through function &apos;Xstrdup&apos; at line 621 is lost at line 627</message>
 <anchor>-1818804807</anchor>
 <prefix>t);*pr=r;pr=&amp;r-&gt;next;copy=comma;</prefix>
 <postfix>free(orig_copy);returnret;}/**Pa</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_parse_revlist" id="0">
   <traceLine line="620" text="r-&gt;last!= ( (void* )0) is true" type="C"/>
   <traceLine line="621" text="Dynamic memory stored in &apos;r-&gt;last&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="627" text="End of scope for &apos;r-&gt;last&apos;. Memory leak." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=737</url>
</problem>
<problem>
 <problemID>260</problemID>
 <file>cvs\src\log.c</file>
 <method>log_expand_revlist</method>
 <line>1070</line>
 <column>39</column>
 <code>NPD.GEN.MIGHT</code>
 <message>Null pointer &apos;nr-&gt;first&apos; that comes from line 1053 may be dereferenced at line 1070.</message>
 <anchor>1195419265</anchor>
 <prefix>lse{nr-&gt;last=xstrdup(nr-&gt;first);</prefix>
 <postfix>}}else{if(r-&gt;first==NULL||isdigi</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_expand_revlist" id="0">
   <traceLine line="1052" text="branch== ( (void* )0) is true" type="C"/>
   <traceLine line="1053" text="&apos;nr-&gt;first&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="1060" text="nr-&gt;first== ( (void* )0) is true" type="C"/>
   <traceLine line="1060" text="!really_quiet is false" type="C"/>
   <traceLine line="1060" text="nr-&gt;first== ( (void* )0) &amp;&amp; !really_quiet is false" type="C"/>
   <traceLine line="1070" text="&apos;nr-&gt;first&apos; is dereferenced by passing argument 1 to function &apos;numdots&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="numdots" id="1">
   <traceLine line="208" text="&apos;s&apos; is passed to function &apos;numdots&apos;." type="E"/>
   <traceLine line="212" text="&apos;s&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=260</url>
</problem>
<problem>
 <problemID>733</problemID>
 <file>cvs\src\log.c</file>
 <method>log_branch</method>
 <line>1666</line>
 <column>21</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;f&apos; returned from call to function &apos;Xstrdup&apos; at line 1663 may be NULL and will be dereferenced at line 1666.</message>
 <anchor>796288998</anchor>
 <prefix>key);cp=strrchr(f,&apos;.&apos;);*cp=&apos;\0&apos;;</prefix>
 <postfix>free(f);}cvs_output(&quot;;&quot;,1);retur</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_branch" id="0">
   <traceLine line="1663" text="&apos;f&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1666" text="&apos;f&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=733</url>
</problem>
<problem>
 <problemID>274</problemID>
 <file>cvs\src\log.c</file>
 <method>log_expand_revlist</method>
 <line>1070</line>
 <column>39</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;nr-&gt;first&apos; returned from call to function &apos;RCS_getbranch&apos; at line 1048 may be NULL and may be dereferenced at line 1070. Also there is one similar error on line 1070.</message>
 <anchor>-1271268400</anchor>
 <prefix>lse{nr-&gt;last=xstrdup(nr-&gt;first);</prefix>
 <postfix>}}else{if(r-&gt;first==NULL||isdigi</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_expand_revlist" id="0">
   <traceLine line="1047" text="( (_ctype_+1) [ (unsigned) ( (unsigned char)r-&gt;first[0] ) ] &amp;4) is true" type="C"/>
   <traceLine line="1048" text="&apos;nr-&gt;first&apos; is assigned the return value from function &apos;RCS_getbranch&apos;." type="E" refId="1"/>
   <traceLine line="1060" text="nr-&gt;first== ( (void* )0) is true" type="C"/>
   <traceLine line="1060" text="!really_quiet is false" type="C"/>
   <traceLine line="1060" text="nr-&gt;first== ( (void* )0) &amp;&amp; !really_quiet is false" type="C"/>
   <traceLine line="1070" text="&apos;nr-&gt;first&apos; is dereferenced by passing argument 1 to function &apos;numdots&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getbranch" id="1">
   <traceLine line="2609" text="RCS_getbranch" type="E"/>
   <traceLine line="2672" text="&apos;RCS_getbranch&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="numdots" id="2">
   <traceLine line="208" text="&apos;s&apos; is passed to function &apos;numdots&apos;." type="E"/>
   <traceLine line="212" text="&apos;s&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=274</url>
</problem>
<problem>
 <problemID>738</problemID>
 <file>cvs\src\log.c</file>
 <method>log_expand_revlist</method>
 <line>1219</line>
 <column>5</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;nr-&gt;last&apos; allocated through function &apos;Xstrdup&apos; at line 1039 is lost at line 1219. Also there are 3 similar errors on line(s) 1219, 1247.</message>
 <anchor>455170699</anchor>
 <prefix>-&gt;next=NULL;*pr=nr;pr=&amp;nr-&gt;next;</prefix>
 <postfix>/*Ifthedefaultbranchwasrequested</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_expand_revlist" id="0">
   <traceLine line="1034" text="r-&gt;first== ( (void* )0) &amp;&amp;r-&gt;last== ( (void* )0) is true" type="C"/>
   <traceLine line="1039" text="Dynamic memory stored in &apos;nr-&gt;last&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1219" text="End of scope for &apos;nr-&gt;last&apos;. Memory leak." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=738</url>
</problem>
<problem>
 <problemID>262</problemID>
 <file>cvs\src\log.c</file>
 <method>log_expand_revlist</method>
 <line>1070</line>
 <column>39</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;nr-&gt;first&apos; checked for NULL at line 1060 may be dereferenced at line 1070.</message>
 <anchor>1195419265</anchor>
 <prefix>lse{nr-&gt;last=xstrdup(nr-&gt;first);</prefix>
 <postfix>}}else{if(r-&gt;first==NULL||isdigi</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_expand_revlist" id="0">
   <traceLine line="1060" text="&apos;nr-&gt;first&apos; is checked for NULL." type="E"/>
   <traceLine line="1060" text="nr-&gt;first== ( (void* )0) is true" type="C"/>
   <traceLine line="1060" text="!really_quiet is false" type="C"/>
   <traceLine line="1060" text="nr-&gt;first== ( (void* )0) &amp;&amp; !really_quiet is false" type="C"/>
   <traceLine line="1070" text="&apos;nr-&gt;first&apos; is dereferenced by passing argument 1 to function &apos;numdots&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="numdots" id="1">
   <traceLine line="208" text="&apos;s&apos; is passed to function &apos;numdots&apos;." type="E"/>
   <traceLine line="212" text="&apos;s&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=262</url>
</problem>
<problem>
 <problemID>263</problemID>
 <file>cvs\src\log.c</file>
 <method>log_expand_revlist</method>
 <line>1219</line>
 <column>5</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;nr-&gt;first&apos; allocated through function &apos;RCS_getbranch&apos; at line 1048 is lost at line 1219. Also there are 6 similar errors on line(s) 1219, 1247.</message>
 <anchor>-1271268400</anchor>
 <prefix>-&gt;next=NULL;*pr=nr;pr=&amp;nr-&gt;next;</prefix>
 <postfix>/*Ifthedefaultbranchwasrequested</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_expand_revlist" id="0">
   <traceLine line="1047" text="( (_ctype_+1) [ (unsigned) ( (unsigned char)r-&gt;first[0] ) ] &amp;4) is true" type="C"/>
   <traceLine line="1048" text="Dynamic memory stored in &apos;nr-&gt;first&apos; is allocated by calling function &apos;RCS_getbranch&apos;." type="E" refId="1"/>
   <traceLine line="1060" text="nr-&gt;first== ( (void* )0) &amp;&amp; !really_quiet is false" type="C"/>
   <traceLine line="1219" text="End of scope for &apos;nr-&gt;first&apos;. Memory leak." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getbranch" id="1">
   <traceLine line="2717" text="&apos;Xstrdup(vn-&gt;version)&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=263</url>
</problem>
<problem>
 <problemID>736</problemID>
 <file>cvs\src\log.c</file>
 <method>log_expand_revlist</method>
 <line>1199</line>
 <column>41</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;p&apos; returned from call to function &apos;Xstrdup&apos; at line 1195 may be NULL and may be dereferenced at line 1199. Also there is one similar error on line 1200.</message>
 <anchor>-2137741072</anchor>
 <prefix>-&gt;last;for(i=0;i&lt;nr-&gt;fields;i++)</prefix>
 <postfix>p[-1]=&apos;\0&apos;;p=strchr(nr-&gt;first+(p</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_expand_revlist" id="0">
   <traceLine line="1185" text="Continue loop iteration, while nr-&gt;fields&lt;=dots2 is true" type="C"/>
   <traceLine line="1195" text="&apos;nr-&gt;last&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1191" text="*pr = nr: &apos;(*pr)-&gt;last&apos; now references the same memory as &apos;nr-&gt;last&apos;" type="E"/>
   <traceLine line="1197" text="p = ( *pr) -&gt;last: copies &apos;(*pr)-&gt;last&apos; into &apos;p&apos;" type="E"/>
   <traceLine line="1199" text="&apos;p&apos; is dereferenced by passing argument 1 to function &apos;strchr&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=736</url>
</problem>
<problem>
 <problemID>732</problemID>
 <file>cvs\src\log.c</file>
 <method>log_version</method>
 <line>1618</line>
 <column>35</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 1618.</message>
 <anchor>-493709426</anchor>
 <prefix>tput_tagged(&quot;text&quot;,pdel-&gt;data);}</prefix>
 <postfix>if(ver-&gt;branches!=NULL){cvs_outp</postfix>
 <trace>
  <traceBlock file="cvs\src\log.c" method="log_version" id="0">
   <traceLine line="1618" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=732</url>
</problem>
<problem>
 <problemID>284</problemID>
 <file>cvs\src\login.c</file>
 <method>password_entry_operation</method>
 <line>333</line>
 <column>5</column>
 <code>SV.TOCTOU.FILE_ACCESS</code>
 <message>function &apos;chmod&apos; operates on file names and is vulnerable to race conditions. Files can be manipulated by attackers between creation and access time. Also there are 2 similar errors on line(s) 458, 484.</message>
 <anchor>94635133</anchor>
 <prefix>er,total,ravingparanoia,Iknow.*/</prefix>
 <postfix>/*acopytoreturnorkeeparoundsowec</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO01-C"/>
  <taxonomy name="CWE" metaInf="367"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=284</url>
</problem>
<problem>
 <problemID>286</problemID>
 <file>cvs\src\login.c</file>
 <method>password_entry_operation</method>
 <line>476</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;tmp_fp&apos; at line 380 may be lost here.</message>
 <anchor>-63719817</anchor>
 <prefix>peration!=password_entry_lookup)</prefix>
 <postfix>/*cleanupandexitinlookupmodesowe</postfix>
 <trace>
  <traceBlock file="cvs\src\login.c" method="password_entry_operation" id="0">
   <traceLine line="380" text="Resource is acquired: &apos;tmp_fp&apos; is assigned to return value of the call to function &apos;cvs_temp_file&apos;." type="E" refId="1"/>
   <traceLine line="476" text="Resource is lost: &apos;tmp_fp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="cvs_temp_file" id="1">
   <traceLine line="741" text="fd== -1 is false" type="C"/>
   <traceLine line="742" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fdopen&apos;." type="E"/>
   <traceLine line="742" text="(fp=fdopen(fd, &quot;w+&quot; ) ) == ( (void* )0) is false" type="C"/>
   <traceLine line="755" text="fp== ( (void* )0) is false" type="C"/>
   <traceLine line="772" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=286</url>
</problem>
<problem>
 <problemID>282</problemID>
 <file>cvs\src\login.c</file>
 <method>password_entry_operation</method>
 <line>330</line>
 <column>5</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;fp&apos; is never used after assignment</message>
 <anchor>3274</anchor>
 <prefix>errno,&quot;cannotclose%s&quot;,passfile);</prefix>
 <postfix>/*Utter,total,ravingparanoia,Ikn</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=282</url>
</problem>
<problem>
 <problemID>285</problemID>
 <file>cvs\src\login.c</file>
 <method>password_entry_operation</method>
 <line>413</line>
 <column>13</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;tmp_name&apos; allocated through function &apos;cvs_temp_file&apos; at line 380 can be lost at line 413</message>
 <anchor>-1644320299</anchor>
 <prefix>,errno,&quot;cannotread%s&quot;,passfile);</prefix>
 <postfix>}if(fclose(fp)&lt;0)/*notfatal,unle</postfix>
 <trace>
  <traceBlock file="cvs\src\login.c" method="password_entry_operation" id="0">
   <traceLine line="380" text="Dynamic memory stored in &apos;tmp_name&apos; is allocated by calling function &apos;cvs_temp_file&apos;." type="E" refId="1"/>
   <traceLine line="413" text="End of scope for &apos;tmp_name&apos;. Memory leak." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="cvs_temp_file" id="1">
   <traceLine line="734" text="&apos;fn&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="2"/>
   <traceLine line="748" text="close(fd) is false" type="C"/>
   <traceLine line="750" text="unlink(fn) is false" type="C"/>
   <traceLine line="755" text="fp== ( (void* )0) is false" type="C"/>
   <traceLine line="771" text="*filename = fn: copies &apos;fn&apos; into &apos;*filename&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="2">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="3">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=285</url>
</problem>
<problem>
 <problemID>280</problemID>
 <file>cvs\src\login.c</file>
 <method>password_entry_operation</method>
 <line>381</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 375 may be lost here. Also there are 5 similar errors on line(s) 406, 452, 476.</message>
 <anchor>1303575983</anchor>
 <prefix>cvs_temp_file(&amp;tmp_name))==NULL)</prefix>
 <postfix>line=0L;while((line_length=getli</postfix>
 <trace>
  <traceBlock file="cvs\src\login.c" method="password_entry_operation" id="0">
   <traceLine line="366" text="!noexec&amp;&amp;password!= ( (void* )0) &amp;&amp; (operation==password_entry_delete|| (operation==password_entry_add&amp;&amp;strcmp(password, newpassword) ) ) is true" type="C"/>
   <traceLine line="375" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="381" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=280</url>
</problem>
<problem>
 <problemID>876</problemID>
 <file>cvs\src\ls.c</file>
 <method>ls</method>
 <line>106</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;show_date&apos; allocated through function &apos;Make_Date&apos; at line 106 can be lost at line 106</message>
 <anchor>-53086839</anchor>
 <prefix>&apos;:show_tag=optarg;break;case&apos;D&apos;:</prefix>
 <postfix>break;case&apos;P&apos;:ls_prune_dirs=true</postfix>
 <trace>
  <traceBlock file="cvs\src\ls.c" method="ls" id="0">
   <traceLine line="106" text="Dynamic memory stored in &apos;show_date&apos; is allocated by calling function &apos;Make_Date&apos;." type="E" refId="1"/>
   <traceLine line="71" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt(argc, argv, server_active?&quot;qdelr:D:PR&quot; :&quot;delr:D:RP&quot; ) ) != -1 is true" type="C"/>
   <traceLine line="106" text="Dynamic memory stored in &apos;show_date&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="Make_Date" id="1">
   <traceLine line="1089" text="&apos;date_from_time_t(t.tv_sec)&apos; is allocated by calling function &apos;date_from_time_t&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="date_from_time_t" id="2">
   <traceLine line="1122" text="&apos;ret&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="3">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="4">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="5"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="5">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="6"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="6">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=876</url>
</problem>
<problem>
 <problemID>874</problemID>
 <file>cvs\src\ls.c</file>
 <method>ls</method>
 <line>208</line>
 <column>32</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;mod&apos; returned from call to function &apos;Xstrdup&apos; at line 205 may be NULL and will be dereferenced at line 208.</message>
 <anchor>-2079914878</anchor>
 <prefix>har*mod=xstrdup(argv[i]);char*p;</prefix>
 <postfix>*p=&apos;/&apos;;p=strrchr(mod,&apos;/&apos;);if(p&amp;&amp;</postfix>
 <trace>
  <traceBlock file="cvs\src\ls.c" method="ls" id="0">
   <traceLine line="203" text="Continue loop iteration, while i&lt;argc is true" type="C"/>
   <traceLine line="205" text="&apos;mod&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="208" text="&apos;mod&apos; is dereferenced by passing argument 1 to function &apos;strchr&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=874</url>
</problem>
<problem>
 <problemID>875</problemID>
 <file>cvs\src\ls.c</file>
 <method>ls_print</method>
 <line>270</line>
 <column>39</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 270.</message>
 <anchor>-493709426</anchor>
 <prefix>put_tagged(&quot;text&quot;,data-&gt;footer);</prefix>
 <postfix>}elsecvs_output(p-&gt;data,0);retur</postfix>
 <trace>
  <traceBlock file="cvs\src\ls.c" method="ls_print" id="0">
   <traceLine line="270" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=875</url>
</problem>
<problem>
 <problemID>742</problemID>
 <file>cvs\src\main.c</file>
 <method>main</method>
 <line>945</line>
 <column>22</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;current_parsed_root&apos; checked for NULL at line 909 may be dereferenced at line 945.</message>
 <anchor>-2114542544</anchor>
 <prefix>oryexists.*/#ifdefCLIENT_SUPPORT</prefix>
 <postfix>#endif/*CLIENT_SUPPORT*/{char*pa</postfix>
 <trace>
  <traceBlock file="cvs\src\main.c" method="main" id="0">
   <traceLine line="909" text="&apos;current_parsed_root&apos; is checked for NULL." type="E"/>
   <traceLine line="919" text="server_active is false" type="C"/>
   <traceLine line="929" text="!server_active is true" type="C"/>
   <traceLine line="938" text="current_parsed_root is false" type="C"/>
   <traceLine line="945" text="&apos;current_parsed_root&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=742</url>
</problem>
<problem>
 <problemID>743</problemID>
 <file>cvs\src\main.c</file>
 <method>format_time_t</method>
 <line>1211</line>
 <column>23</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;localtime( &amp;unixtime)&apos; returned from call to function &apos;localtime&apos; at line 1211 may be NULL and will be dereferenced at line 1211.</message>
 <anchor>-1764924688</anchor>
 <prefix>verttoatimeinthelocaltimezone.*/</prefix>
 <postfix>if(!my_strftime(buf,sizeof(buf),</postfix>
 <trace>
  <traceBlock file="cvs\src\main.c" method="format_time_t" id="0">
   <traceLine line="1211" text="&apos;localtime( &amp;unixtime)&apos; is assigned the return value from function &apos;localtime&apos;." type="E"/>
   <traceLine line="1211" text="&apos;localtime( &amp;unixtime)&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=743</url>
</problem>
<problem>
 <problemID>297</problemID>
 <file>cvs\src\main.c</file>
 <method>usage</method>
 <line>1290</line>
 <column>12</column>
 <code>SV.FMTSTR.GENERIC</code>
 <message>function &apos;fprintf&apos; possibly accepts format string that may be influenced by user, causing format string vulnerability. Undefined string lengths can lead to buffer overflows and potential exploitation by attackers. Use a defined value for string lengths. Also there is one similar error on line 1292.</message>
 <anchor>-648921281</anchor>
 <prefix>ge(registerconstchar*const*cpp){</prefix>
 <postfix>for(;*cpp;cpp++)(void)fprintf(st</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO30-C"/>
  <taxonomy name="CWE" metaInf="134"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=297</url>
</problem>
<problem>
 <problemID>298</problemID>
 <file>cvs\src\main.c</file>
 <method>main</method>
 <line>1016</line>
 <column>21</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1308051162</anchor>
 <prefix>namesthatwe&apos;vesenttotheserver.*/</prefix>
 <postfix>dellist(&amp;dirs_sent_to_server);di</postfix>
 <trace>
  <traceBlock file="cvs\src\main.c" method="main" id="0">
   <traceLine line="1012" text="Infeasible condition: &apos;current_parsed_root!= ( (void* )0) &amp;&amp;current_parsed_root-&gt;isremote&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="1016" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="main" id="1">
   <traceLine line="1012" text="Infeasible condition: &apos;current_parsed_root!= ( (void* )0)&apos; cannot be true." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="main" id="2">
   <traceLine line="1012" text="Inferred value &apos;current_parsed_root&apos; is &apos;== 0&apos;" type="E"/>
   <traceLine line="1012" text="Result of expression &apos;current_parsed_root != 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=298</url>
</problem>
<problem>
 <problemID>295</problemID>
 <file>cvs\src\main.c</file>
 <method>main_cleanup</method>
 <line>398</line>
 <column>9</column>
 <code>SV.STRBO.UNBOUND_SPRINTF</code>
 <message>function &apos;sprintf&apos; does not check buffer boundaries but outputs to the buffer &apos;temp&apos; of fixed size (10)</message>
 <anchor>2103845876</anchor>
 <prefix>tuallyestablishasignalhandler.*/</prefix>
 <postfix>name=temp;break;}/*Thisalwaysexi</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="STR31-C"/>
  <taxonomy name="CWE" metaInf="120, 242"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=295</url>
</problem>
<problem>
 <problemID>296</problemID>
 <file>cvs\src\main.c</file>
 <method>date_from_time_t</method>
 <line>1118</line>
 <column>12</column>
 <code>SV.STRBO.UNBOUND_SPRINTF</code>
 <message>function &apos;sprintf&apos; does not check buffer boundaries but outputs to the buffer &apos;date&apos; of fixed size (50)</message>
 <anchor>2103365582</anchor>
 <prefix>ink).*/ftm=localtime(&amp;unixtime);</prefix>
 <postfix>ftm-&gt;tm_year+(ftm-&gt;tm_year&lt;100?0</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="STR31-C"/>
  <taxonomy name="CWE" metaInf="120, 242"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=296</url>
</problem>
<problem>
 <problemID>303</problemID>
 <file>cvs\src\main.c</file>
 <method>date_from_time_t</method>
 <line>1118</line>
 <column>21</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;date&apos; may be out of bounds. Array &apos;date&apos; of size 50 may use index value(s) 0..65</message>
 <anchor>3076014</anchor>
 <prefix>ink).*/ftm=localtime(&amp;unixtime);</prefix>
 <postfix>ftm-&gt;tm_year+(ftm-&gt;tm_year&lt;100?0</postfix>
 <trace>
  <traceBlock file="cvs\src\main.c" method="date_from_time_t" id="0">
   <traceLine line="1107" text="Array &apos;date&apos; size is 50." type="E"/>
   <traceLine line="1118" text="&apos;date&apos; is passed as an argument to function &apos;sprintf&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="date_from_time_t" id="1">
   <traceLine line="1118" text="Length of format string &quot;%02d.%02d.%02d.%02d.%02d.%02d&quot; is 65." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="date_from_time_t" id="2">
   <traceLine line="1118" text="Length of non-format characters is 5." type="E"/>
   <traceLine line="1118" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_year+ (ftm-&gt;tm_year&lt;100?0:1900)&apos; is 10." type="E"/>
   <traceLine line="1118" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_mon+1&apos; is 10." type="E"/>
   <traceLine line="1118" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_mday&apos; is 10." type="E"/>
   <traceLine line="1118" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_hour&apos; is 10." type="E"/>
   <traceLine line="1118" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_min&apos; is 10." type="E"/>
   <traceLine line="1118" text="Length of conversion specification &apos;%d&apos; for argument &apos;ftm-&gt;tm_sec&apos; is 10." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=303</url>
</problem>
<problem>
 <problemID>744</problemID>
 <file>cvs\src\main.c</file>
 <method>main_cleanup</method>
 <line>408</line>
 <column>5</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>rocessesthe*noreturnattribute.*/</prefix>
 <postfix>#endif/*!DONT_USE_SIGNALS*/}intm</postfix>
 <trace>
  <traceBlock file="cvs\src\main.c" method="main_cleanup" id="0">
   <traceLine line="404" text="Call to &apos;error(1, 0, &quot;received %s signal&quot;, name)&apos; never returns." type="E"/>
   <traceLine line="408" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=744</url>
</problem>
<problem>
 <problemID>740</problemID>
 <file>cvs\src\main.c</file>
 <method>main</method>
 <line>780</line>
 <column>13</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;Tmpdir&apos; allocated through function &apos;Xstrdup&apos; at line 597 can be lost at line 780</message>
 <anchor>-1555385418</anchor>
 <prefix>f(Tmpdir==NULL||Tmpdir[0]==&apos;\0&apos;)</prefix>
 <postfix>#ifdefHAVE_PUTENVif(tmpdir_updat</postfix>
 <trace>
  <traceBlock file="cvs\src\main.c" method="main" id="0">
   <traceLine line="597" text="Dynamic memory stored in &apos;Tmpdir&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="675" text="Entering loop, because cm-&gt;fullname is true" type="C"/>
   <traceLine line="682" text="Break statement causes loop exit." type="E" refId="5"/>
   <traceLine line="779" text="Tmpdir== ( (void* )0) is false" type="C"/>
   <traceLine line="779" text="Tmpdir[0] == &apos;\0&apos; is true" type="C"/>
   <traceLine line="779" text="Tmpdir== ( (void* )0) ||Tmpdir[0] == &apos;\0&apos; is true" type="C"/>
   <traceLine line="780" text="Dynamic memory stored in &apos;Tmpdir&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="main" id="5">
   <traceLine line="675" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=740</url>
</problem>
<problem>
 <problemID>302</problemID>
 <file>cvs\src\main.c</file>
 <method>date_from_time_t</method>
 <line>1119</line>
 <column>37</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;ftm&apos; returned from call to function &apos;localtime&apos; at line 1116 may be NULL and will be dereferenced at line 1119.</message>
 <anchor>-1730234927</anchor>
 <prefix>me);(void)sprintf(date,DATEFORM,</prefix>
 <postfix>ftm-&gt;tm_mon+1,ftm-&gt;tm_mday,ftm-&gt;</postfix>
 <trace>
  <traceBlock file="cvs\src\main.c" method="date_from_time_t" id="0">
   <traceLine line="1111" text="ftm== ( (void* )0) is true" type="C"/>
   <traceLine line="1116" text="&apos;ftm&apos; is assigned the return value from function &apos;localtime&apos;." type="E"/>
   <traceLine line="1119" text="&apos;ftm&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=302</url>
</problem>
<problem>
 <problemID>299</problemID>
 <file>cvs\src\main.c</file>
 <method>main_cleanup</method>
 <line>398</line>
 <column>18</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;temp&apos; may be out of bounds. Array &apos;temp&apos; of size 10 may use index value(s) 0..10</message>
 <anchor>3556308</anchor>
 <prefix>tuallyestablishasignalhandler.*/</prefix>
 <postfix>name=temp;break;}/*Thisalwaysexi</postfix>
 <trace>
  <traceBlock file="cvs\src\main.c" method="main_cleanup" id="0">
   <traceLine line="361" text="Array &apos;temp&apos; size is 10." type="E"/>
   <traceLine line="398" text="&apos;temp&apos; is passed as an argument to function &apos;sprintf&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="main_cleanup" id="1">
   <traceLine line="398" text="Length of format string &quot;%d&quot; is 10." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="main_cleanup" id="2">
   <traceLine line="398" text="Length of conversion specification &apos;%d&apos; for argument &apos;sig&apos; is 10." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=299</url>
</problem>
<problem>
 <problemID>741</problemID>
 <file>cvs\src\main.c</file>
 <method>main</method>
 <line>945</line>
 <column>22</column>
 <code>NPD.GEN.MIGHT</code>
 <message>Null pointer &apos;current_parsed_root&apos; that comes from line 1057 may be dereferenced at line 945.</message>
 <anchor>-2114542544</anchor>
 <prefix>oryexists.*/#ifdefCLIENT_SUPPORT</prefix>
 <postfix>#endif/*CLIENT_SUPPORT*/{char*pa</postfix>
 <trace>
  <traceBlock file="cvs\src\main.c" method="main" id="0">
   <traceLine line="1057" text="&apos;current_parsed_root&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="929" text="!server_active is true" type="C"/>
   <traceLine line="938" text="current_parsed_root is false" type="C"/>
   <traceLine line="945" text="&apos;current_parsed_root&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Baushke</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=741</url>
</problem>
<problem>
 <problemID>745</problemID>
 <file>cvs\src\mkmodules.c</file>
 <method>checkout_file</method>
 <line>876</line>
 <column>29</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;rcsnode&apos; returned from call to function &apos;RCS_parsercsfile&apos; at line 875 may be NULL and will be dereferenced at line 876.</message>
 <anchor>-378894954</anchor>
 <prefix>;}rcsnode=RCS_parsercsfile(rcs);</prefix>
 <postfix>if(retcode!=0){/*Probablynotnece</postfix>
 <trace>
  <traceBlock file="cvs\src\mkmodules.c" method="checkout_file" id="0">
   <traceLine line="875" text="&apos;rcsnode&apos; is assigned the return value from function &apos;RCS_parsercsfile&apos;." type="E" refId="1"/>
   <traceLine line="876" text="&apos;rcsnode&apos; is dereferenced by passing argument 1 to function &apos;RCS_checkout&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_parsercsfile" id="1">
   <traceLine line="302" text="RCS_parsercsfile" type="E"/>
   <traceLine line="315" text="&apos;RCS_parsercsfile&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkout" id="2">
   <traceLine line="4079" text="&apos;rcs&apos; is passed to function &apos;RCS_checkout&apos;." type="E"/>
   <traceLine line="4110" text="&apos;rcs&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=745</url>
</problem>
<problem>
 <problemID>313</problemID>
 <file>cvs\src\mkmodules.c</file>
 <method>mkmodules</method>
 <line>696</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;cwd.desc&apos; at line 692 may be lost here. Also there is one similar error on line 817.</message>
 <anchor>-1990331761</anchor>
 <prefix>irectory.&quot;);if(CVS_CHDIR(dir)&lt;0)</prefix>
 <postfix>/**First,dotheworknecessarytoupd</postfix>
 <trace>
  <traceBlock file="cvs\src\mkmodules.c" method="mkmodules" id="0">
   <traceLine line="692" text="Resource is acquired: &apos;cwd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="696" text="Resource is lost: &apos;cwd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=313</url>
</problem>
<problem>
 <problemID>309</problemID>
 <file>cvs\src\mkmodules.c</file>
 <method>rename_rcsfile</method>
 <line>1105</line>
 <column>9</column>
 <code>SV.TOCTOU.FILE_ACCESS</code>
 <message>function &apos;chmod&apos; operates on file names and is vulnerable to race conditions. Files can be manipulated by attackers between creation and access time.</message>
 <anchor>94635133</anchor>
 <prefix>o,&quot;cannotstat%s&quot;,rcs);free(rcs);</prefix>
 <postfix>error(0,errno,&quot;warning:cannotchm</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO01-C"/>
  <taxonomy name="CWE" metaInf="367"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=309</url>
</problem>
<problem>
 <problemID>310</problemID>
 <file>cvs\src\mkmodules.c</file>
 <method>init</method>
 <line>1249</line>
 <column>9</column>
 <code>SV.TOCTOU.FILE_ACCESS</code>
 <message>function &apos;chmod&apos; operates on file names and is vulnerable to race conditions. Files can be manipulated by attackers between creation and access time. Also there is one similar error on line 1267.</message>
 <anchor>94635133</anchor>
 <prefix>hmod()becausexchmod()istooshy.*/</prefix>
 <postfix>}/*Makeanemptyval-tagsfiletoprev</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO01-C"/>
  <taxonomy name="CWE" metaInf="367"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=310</url>
</problem>
<problem>
 <problemID>746</problemID>
 <file>cvs\src\mkmodules.c</file>
 <method>init</method>
 <line>1196</line>
 <column>17</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;info_v&apos; may be out of bounds. Array &apos;info_v&apos; of size 88 may use index value(s) 0..89. Also there are 2 similar errors on line(s) 1197, 1220.</message>
 <anchor>-1184170715</anchor>
 <prefix>-&gt;filename);strcpy(info_v,info);</prefix>
 <postfix>if(isfile(info_v))/*Wewillchecko</postfix>
 <trace>
  <traceBlock file="cvs\src\mkmodules.c" method="init" id="0">
   <traceLine line="1142" text="Array &apos;info_v&apos; is defined." type="E"/>
   <traceLine line="1142" text="Array &apos;info_v&apos; is defined." type="E"/>
   <traceLine line="1142" text="Array &apos;info_v&apos; is defined." type="E"/>
   <traceLine line="1187" text="Array &apos;info_v&apos; of size 88 is retrieved from function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="1196" text="&apos;info_v&apos; is passed as an argument to function &apos;strcat&apos;." type="E" refId="3"/>
   <traceLine line="1197" text="&apos;info_v&apos; is passed as an argument to function &apos;isfile&apos;." type="E"/>
   <traceLine line="1220" text="&apos;info_v&apos; is passed as an argument to function &apos;add_rcs_file&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\mkmodules.c" method="init" id="1">
   <traceLine line="1187" text="Result of expression &apos;$1*1&apos; is == 88." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\mkmodules.c" method="init" id="2">
   <traceLine line="1187" text="Function argument &apos;$1&apos; is == 88." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\mkmodules.c" method="init" id="3">
   <traceLine line="1195" text="Array &apos;info_v&apos; of size 87 is retrieved from function &apos;strcpy&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\src\mkmodules.c" method="init" id="4">
   <traceLine line="1194" text="Array &apos;info&apos; of size -1 is retrieved from function &apos;strcat&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\mkmodules.c" method="init" id="5">
   <traceLine line="1196" text="Result of expression &apos;charlength($1)+charlength($2)&apos; is [2,89]." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\mkmodules.c" method="init" id="6">
   <traceLine line="1196" text="Length of constant string &quot;,v&quot; is 2." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=746</url>
</problem>
<problem>
 <problemID>312</problemID>
 <file>cvs\src\mkmodules.c</file>
 <method>init</method>
 <line>1213</line>
 <column>25</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 1210 may be lost here. Also there is one similar error on line 1213.</message>
 <anchor>-332821330</anchor>
 <prefix>;*p!=NULL;++p)if(fputs(*p,fp)&lt;0)</prefix>
 <postfix>if(fclose(fp)&lt;0)error(1,errno,&quot;c</postfix>
 <trace>
  <traceBlock file="cvs\src\mkmodules.c" method="init" id="0">
   <traceLine line="1205" text="!isfile(info) is true" type="C"/>
   <traceLine line="1210" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;open_file&apos;." type="E" refId="1"/>
   <traceLine line="1211" text="Entering loop, because *p!= ( (void* )0) is true" type="C"/>
   <traceLine line="1212" text="fputs( *p, fp) &lt;0 is true" type="C"/>
   <traceLine line="1213" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="open_file" id="1">
   <traceLine line="275" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="277" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=312</url>
</problem>
<problem>
 <problemID>748</problemID>
 <file>cvs\src\modules.c</file>
 <method>my_module</method>
 <line>145</line>
 <column>21</column>
 <code>NPD.CHECK.MUST</code>
 <message>Pointer &apos;mname&apos; checked for NULL at line 134 will be dereferenced at line 145.</message>
 <anchor>-1899631842</anchor>
 <prefix>rectory/foo:Permissiondenied*$*/</prefix>
 <postfix>error(1,0,&quot;Absolutemodulereferen</postfix>
 <trace>
  <traceBlock file="cvs\src\modules.c" method="my_module" id="0">
   <traceLine line="134" text="&apos;mname&apos; is checked for NULL." type="E"/>
   <traceLine line="134" text="mname is false" type="C"/>
   <traceLine line="145" text="&apos;mname&apos; is dereferenced by passing argument 1 to function &apos;isabsolute&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="isabsolute" id="1">
   <traceLine line="1861" text="&apos;filename&apos; is passed to function &apos;isabsolute&apos;." type="E"/>
   <traceLine line="1863" text="&apos;filename&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=748</url>
</problem>
<problem>
 <problemID>747</problemID>
 <file>cvs\src\modules.c</file>
 <method>my_module</method>
 <line>691</line>
 <column>46</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;real_where&apos; returned from call to function &apos;Xstrdup&apos; at line 198 may be NULL and may be dereferenced at line 691. Also there are 2 similar errors on line(s) 691.</message>
 <anchor>-977485178</anchor>
 <prefix>;if((*prog!=&apos;/&apos;)&amp;&amp;(*prog!=&apos;.&apos;)){</prefix>
 <postfix>+10);(void)sprintf(real_prog,&quot;%s</postfix>
 <trace>
  <traceBlock file="cvs\src\modules.c" method="my_module" id="0">
   <traceLine line="198" text="&apos;mwhere&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="389" text="mfile!= ( (void* )0) is false" type="C"/>
   <traceLine line="466" text="alias&amp;&amp;nonalias_opt is false" type="C"/>
   <traceLine line="516" text="mfile!= ( (void* )0) &amp;&amp;modargc&gt;1 is false" type="C"/>
   <traceLine line="542" text="where is false" type="C"/>
   <traceLine line="542" text="mwhere is false" type="C"/>
   <traceLine line="673" text="m_type==TAG&amp;&amp;tag_prog!= ( (void* )0) is true" type="C"/>
   <traceLine line="686" text="where!= ( (void* )0) is false" type="C"/>
   <traceLine line="686" text="mwhere: copies &apos;mwhere&apos;" type="E"/>
   <traceLine line="686" text="real_where = where!= ( (void* )0) ?where:mwhere: copies &apos;...?where:mwhere&apos; into &apos;real_where&apos;" type="E"/>
   <traceLine line="691" text="&apos;real_where&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=747</url>
</problem>
<problem>
 <problemID>751</problemID>
 <file>cvs\src\parseinfo.c</file>
 <method>parse_config</method>
 <line>483</line>
 <column>13</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;retval-&gt;UserAdminOptions&apos; allocated through function &apos;Xstrdup&apos; at line 483 can be lost at line 483. Also there is one similar error on line 483.</message>
 <anchor>-1367338389</anchor>
 <prefix>cmp(line,&quot;UserAdminOptions&quot;)==0)</prefix>
 <postfix>elseif(strcmp(line,&quot;UseNewInfoFm</postfix>
 <trace>
  <traceBlock file="cvs\src\parseinfo.c" method="parse_config" id="0">
   <traceLine line="483" text="Dynamic memory stored in &apos;retval-&gt;UserAdminOptions&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="367" text="Continue loop iteration, while getline( &amp;line,  &amp;line_allocated, fp_info) &gt;=0 is true" type="C"/>
   <traceLine line="483" text="Dynamic memory stored in &apos;retval-&gt;UserAdminOptions&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=751</url>
</problem>
<problem>
 <problemID>750</problemID>
 <file>cvs\src\parseinfo.c</file>
 <method>parse_config</method>
 <line>460</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;retval-&gt;logHistory&apos; allocated through function &apos;Xstrdup&apos; at line 460 can be lost at line 460</message>
 <anchor>-1600485631</anchor>
 <prefix>ory&quot;)==0){if(strcmp(p,&quot;all&quot;)!=0)</prefix>
 <postfix>}elseif(strcmp(line,&quot;RereadLogAf</postfix>
 <trace>
  <traceBlock file="cvs\src\parseinfo.c" method="parse_config" id="0">
   <traceLine line="460" text="Dynamic memory stored in &apos;retval-&gt;logHistory&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="367" text="Continue loop iteration, while getline( &amp;line,  &amp;line_allocated, fp_info) &gt;=0 is true" type="C"/>
   <traceLine line="460" text="Dynamic memory stored in &apos;retval-&gt;logHistory&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=750</url>
</problem>
<problem>
 <problemID>753</problemID>
 <file>cvs\src\parseinfo.c</file>
 <method>parse_config</method>
 <line>505</line>
 <column>17</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;retval-&gt;PrimaryServer&apos; returned from call to function &apos;parse_cvsroot&apos; at line 504 may be NULL and will be dereferenced at line 505.</message>
 <anchor>-107997052</anchor>
 <prefix>&gt;PrimaryServer=parse_cvsroot(p);</prefix>
 <postfix>&amp;&amp;retval-&gt;PrimaryServer-&gt;method!</postfix>
 <trace>
  <traceBlock file="cvs\src\parseinfo.c" method="parse_config" id="0">
   <traceLine line="502" text="strcmp(line, &quot;PrimaryServer&quot; ) ==0 is true" type="C"/>
   <traceLine line="504" text="&apos;retval-&gt;PrimaryServer&apos; is assigned the return value from function &apos;parse_cvsroot&apos;." type="E" refId="1"/>
   <traceLine line="505" text="&apos;retval-&gt;PrimaryServer&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\root.c" method="parse_cvsroot" id="1">
   <traceLine line="466" text="parse_cvsroot" type="E"/>
   <traceLine line="913" text="&apos;parse_cvsroot&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=753</url>
</problem>
<problem>
 <problemID>752</problemID>
 <file>cvs\src\parseinfo.c</file>
 <method>parse_config</method>
 <line>511</line>
 <column>17</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp_info&apos; at line 353 may be lost here.</message>
 <anchor>509901245</anchor>
 <prefix>is*reallyonlyusefulfortesting.*/</prefix>
 <postfix>&quot;%s:OnlyPrimaryServerswith:ext:m</postfix>
 <trace>
  <traceBlock file="cvs\src\parseinfo.c" method="parse_config" id="0">
   <traceLine line="353" text="Resource is acquired: &apos;fp_info&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="414" text="strcmp(line, &quot;RCSBIN&quot; ) ==0 is false" type="C"/>
   <traceLine line="422" text="strcmp(line, &quot;SystemAuth&quot; ) ==0 is false" type="C"/>
   <traceLine line="434" text="strcmp(line, &quot;LocalKeyword&quot; ) ==0 is false" type="C"/>
   <traceLine line="436" text="strcmp(line, &quot;KeywordExpand&quot; ) ==0 is false" type="C"/>
   <traceLine line="438" text="strcmp(line, &quot;PreservePermissions&quot; ) ==0 is false" type="C"/>
   <traceLine line="446" text="strcmp(line, &quot;TopLevelAdmin&quot; ) ==0 is false" type="C"/>
   <traceLine line="448" text="strcmp(line, &quot;LockDir&quot; ) ==0 is false" type="C"/>
   <traceLine line="457" text="strcmp(line, &quot;LogHistory&quot; ) ==0 is false" type="C"/>
   <traceLine line="462" text="strcmp(line, &quot;RereadLogAfterVerify&quot; ) ==0 is false" type="C"/>
   <traceLine line="482" text="strcmp(line, &quot;UserAdminOptions&quot; ) ==0 is false" type="C"/>
   <traceLine line="484" text="strcmp(line, &quot;UseNewInfoFmtStrings&quot; ) ==0 is false" type="C"/>
   <traceLine line="498" text="strcmp(line, &quot;ImportNewFilesToVendorBranchOnly&quot; ) ==0 is false" type="C"/>
   <traceLine line="502" text="strcmp(line, &quot;PrimaryServer&quot; ) ==0 is true" type="C"/>
   <traceLine line="505" text="retval-&gt;PrimaryServer-&gt;method!=fork_method&amp;&amp;retval-&gt;PrimaryServer-&gt;method!=ext_method is true" type="C"/>
   <traceLine line="511" text="Resource is lost: &apos;fp_info&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=752</url>
</problem>
<problem>
 <problemID>782</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_tag2rev</method>
 <line>2185</line>
 <column>22</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;rev&apos; returned from call to function &apos;Xstrdup&apos; at line 2178 may be NULL and may be dereferenced at line 2185.</message>
 <anchor>937208995</anchor>
 <prefix>ch.Iftagisnotabranchwe&apos;redone.*/</prefix>
 <postfix>if((i&amp;1)==1){pa=strrchr(rev,&apos;.&apos;)</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_tag2rev" id="0">
   <traceLine line="2178" text="&apos;rev&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="2185" text="&apos;rev&apos; is dereferenced by passing argument 1 to function &apos;numdots&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="numdots" id="2">
   <traceLine line="208" text="&apos;s&apos; is passed to function &apos;numdots&apos;." type="E"/>
   <traceLine line="212" text="&apos;s&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=782</url>
</problem>
<problem>
 <problemID>762</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_gettag</method>
 <line>2346</line>
 <column>24</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;tag&apos; returned from call to function &apos;Xstrdup&apos; at line 2335 may be NULL and will be dereferenced at line 2346.</message>
 <anchor>1785657626</anchor>
 <prefix>dofbranch*//*striptrailingdots*/</prefix>
 <postfix>tag[strlen(tag)-1]=&apos;\0&apos;;if((numd</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_gettag" id="0">
   <traceLine line="2279" text="! ( (_ctype_+1) [ (unsigned) ( (unsigned char)symtag[0] ) ] &amp;4) is false" type="C"/>
   <traceLine line="2335" text="&apos;tag&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="2346" text="&apos;tag&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=762</url>
</problem>
<problem>
 <problemID>770</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_branch_head</method>
 <line>2747</line>
 <column>27</column>
 <code>NPD.FUNC.CALL.MUST</code>
 <message>Pointer &apos;num&apos; returned from call to function &apos;Xstrdup&apos; at line 2740 may be NULL, will be passed to function and may be dereferenced there by passing argument 1 to function &apos;truncate_revnum&apos; at line 2747.</message>
 <anchor>-1832419703</anchor>
 <prefix>s,rev);if(num==NULL)returnNULL;}</prefix>
 <postfix>retval=RCS_getbranch(rcs,br,1);f</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_branch_head" id="0">
   <traceLine line="2739" text="( (_ctype_+1) [ (unsigned) ( (unsigned char) *rev) ] &amp;4) is true" type="C"/>
   <traceLine line="2740" text="&apos;num&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="2747" text="&apos;num&apos; is dereferenced by passing argument 1 to function &apos;truncate_revnum&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="truncate_revnum" id="2">
   <traceLine line="4711" text="&apos;r&apos; is passed to function &apos;truncate_revnum&apos;." type="E"/>
   <traceLine line="4720" text="&apos;r&apos; is dereferenced by passing argument 2 to function &apos;memcpy&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=770</url>
</problem>
<problem>
 <problemID>775</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_getbranchpoint</method>
 <line>2799</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;branch&apos; allocated through function &apos;Xstrdup&apos; at line 2785 can be lost at line 2799</message>
 <anchor>-1521773790</anchor>
 <prefix>oint%s&quot;,rcs-&gt;print_path,target);</prefix>
 <postfix>}rev=vp-&gt;data;*bp++=&apos;.&apos;;while(*b</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getbranchpoint" id="0">
   <traceLine line="2785" text="Dynamic memory stored in &apos;branch&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="2799" text="Dynamic memory stored in &apos;branch&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=775</url>
</problem>
<problem>
 <problemID>778</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_getbranchpoint</method>
 <line>2816</line>
 <column>31</column>
 <code>NPD.FUNC.CALL.MIGHT</code>
 <message>Pointer &apos;branch&apos; returned from call to function &apos;Xstrdup&apos; at line 2785 may be NULL, may be passed to function and may be dereferenced there by passing argument 2 to function &apos;strncmp&apos; at line 2816.</message>
 <anchor>-707331790</anchor>
 <prefix>ifthefollowingcharacterisadot.*/</prefix>
 <postfix>break;vp=vp-&gt;next;}free(branch);</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getbranchpoint" id="0">
   <traceLine line="2785" text="&apos;branch&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="2816" text="&apos;branch&apos; is dereferenced by passing argument 2 to function &apos;strncmp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=778</url>
</problem>
<problem>
 <problemID>756</problemID>
 <file>cvs\src\rcs.c</file>
 <method>expand_keywords</method>
 <line>3712</line>
 <column>50</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;path&apos; returned from call to function &apos;getfullCVSname&apos; at line 3709 may be NULL and will be dereferenced at line 3712.</message>
 <anchor>618687187</anchor>
 <prefix>last_component(rcs-&gt;print_path);</prefix>
 <postfix>date=printable_date(ver-&gt;date);v</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="expand_keywords" id="0">
   <traceLine line="3708" text="keyword-&gt;expandto==KEYWORD_CVSHEADER is true" type="C"/>
   <traceLine line="3709" text="&apos;path&apos; is assigned the return value from function &apos;getfullCVSname&apos;." type="E" refId="1"/>
   <traceLine line="3712" text="&apos;path&apos; is dereferenced by passing argument 1 to function &apos;escape_keyword_value&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="getfullCVSname" id="1">
   <traceLine line="8652" text="current_parsed_root-&gt;directory is true" type="C"/>
   <traceLine line="8657" text="&apos;*pathstore&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="8671" text="!strncmp( *pathstore, current_parsed_root-&gt;directory, rootlen) &amp;&amp; ( *pathstore) [rootlen] == &apos;/&apos; is false" type="C"/>
   <traceLine line="8675" text="CVSname = *pathstore: copies &apos;*pathstore&apos; into &apos;CVSname&apos;" type="E"/>
   <traceLine line="8677" text="&apos;CVSname&apos; is returned by &apos;getfullCVSname&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="escape_keyword_value" id="3">
   <traceLine line="3501" text="&apos;value&apos; is passed to function &apos;escape_keyword_value&apos;." type="E"/>
   <traceLine line="3506" text="s = value: copies &apos;value&apos; into &apos;s&apos;" type="E"/>
   <traceLine line="3506" text="&apos;s&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=756</url>
</problem>
<problem>
 <problemID>346</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_findlock_or_tip</method>
 <line>4702</line>
 <column>5</column>
 <code>MLK.MUST</code>
 <message>Memory leak. Dynamic memory stored in &apos;RCS_getbranch(rcs, rcs-&gt;branch, 0)&apos; allocated through function &apos;RCS_getbranch&apos; at line 4701 is lost at line 4702</message>
 <anchor>1581071886</anchor>
 <prefix>S_getbranch(rcs,rcs-&gt;branch,0));</prefix>
 <postfix>}/*Revisionnumberstring,R,mustco</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_findlock_or_tip" id="0">
   <traceLine line="4701" text="Dynamic memory stored in &apos;RCS_getbranch(rcs, rcs-&gt;branch, 0)&apos; is allocated by calling function &apos;RCS_getbranch&apos;." type="E" refId="1"/>
   <traceLine line="4702" text="Dynamic memory stored in &apos;RCS_getbranch(rcs, rcs-&gt;branch, 0)&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getbranch" id="1">
   <traceLine line="2717" text="&apos;Xstrdup(vn-&gt;version)&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="3">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="4"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="4">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="5">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=346</url>
</problem>
<problem>
 <problemID>781</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_addbranch</method>
 <line>4815</line>
 <column>19</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;branchpoint&apos; returned from call to function &apos;Xstrdup&apos; at line 4814 may be NULL and will be dereferenced at line 4815.</message>
 <anchor>1001185454</anchor>
 <prefix>ULL;branchpoint=xstrdup(branch);</prefix>
 <postfix>{truncate_revnum_in_place(branch</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_addbranch" id="0">
   <traceLine line="4814" text="&apos;branchpoint&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="4815" text="&apos;branchpoint&apos; is dereferenced by passing argument 1 to function &apos;numdots&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="numdots" id="2">
   <traceLine line="208" text="&apos;s&apos; is passed to function &apos;numdots&apos;." type="E"/>
   <traceLine line="212" text="&apos;s&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=781</url>
</problem>
<problem>
 <problemID>774</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkin</method>
 <line>5321</line>
 <column>35</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;delta-&gt;author&apos; returned from call to function &apos;Xstrdup&apos; at line 4992 may be NULL and may be dereferenced at line 5321.</message>
 <anchor>-90831692</anchor>
 <prefix>mitpt-&gt;version);if(nodep!=NULL){</prefix>
 <postfix>{/*Ifweareaddingabranch,thenleav</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="0">
   <traceLine line="4992" text="&apos;delta-&gt;author&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="5321" text="&apos;delta-&gt;author&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=774</url>
</problem>
<problem>
 <problemID>761</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_unlock</method>
 <line>6030</line>
 <column>21</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;xrev&apos; returned from call to function &apos;Xstrdup&apos; at line 5989 may be NULL and may be dereferenced at line 6030.</message>
 <anchor>-197350101</anchor>
 <prefix>delnode(lock);if(!unlock_quiet){</prefix>
 <postfix>cvs_output(&quot;unlocked\n&quot;,0);}free</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_unlock" id="0">
   <traceLine line="5989" text="&apos;xrev&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="6016" text="!unlock_quiet is true" type="C"/>
   <traceLine line="6030" text="&apos;xrev&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=761</url>
</problem>
<problem>
 <problemID>328</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_delete_revs</method>
 <line>6301</line>
 <column>22</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;branchpoint&apos; returned from call to function &apos;RCS_getbranchpoint&apos; at line 6297 may be NULL and will be dereferenced at line 6301. Also there is one similar error on line 6314.</message>
 <anchor>-1911590887</anchor>
 <prefix>NULL){rev1=xstrdup(branchpoint);</prefix>
 <postfix>{char*bp;bp=strrchr(branchpoint,</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_delete_revs" id="0">
   <traceLine line="6297" text="&apos;branchpoint&apos; is assigned the return value from function &apos;RCS_getbranchpoint&apos;." type="E" refId="1"/>
   <traceLine line="6301" text="&apos;branchpoint&apos; is dereferenced by passing argument 1 to function &apos;numdots&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getbranchpoint" id="1">
   <traceLine line="2768" text="RCS_getbranchpoint" type="E"/>
   <traceLine line="2799" text="&apos;RCS_getbranchpoint&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="numdots" id="2">
   <traceLine line="208" text="&apos;s&apos; is passed to function &apos;numdots&apos;." type="E"/>
   <traceLine line="212" text="&apos;s&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=328</url>
</problem>
<problem>
 <problemID>760</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_deltas</method>
 <line>7182</line>
 <column>25</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;branchversion&apos; returned from call to function &apos;Xstrdup&apos; at line 7181 may be NULL and will be dereferenced at line 7182.</message>
 <anchor>-1102001034</anchor>
 <prefix>/branchversion=xstrdup(version);</prefix>
 <postfix>if(cpversion!=NULL)cpversion=str</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_deltas" id="0">
   <traceLine line="7181" text="&apos;branchversion&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="7182" text="&apos;branchversion&apos; is dereferenced by passing argument 1 to function &apos;strchr&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=760</url>
</problem>
<problem>
 <problemID>387</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_copydeltas</method>
 <line>8064</line>
 <column>45</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;dtext-&gt;version&apos; returned from call to function &apos;RCS_getdeltatext&apos; at line 8056 may be NULL and may be dereferenced at line 8064.</message>
 <anchor>742556200</anchor>
 <prefix>r:EOFtooearlyinRCS_copydeltas&quot;);</prefix>
 <postfix>if(found&amp;&amp;insertbefore){putdelta</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_copydeltas" id="0">
   <traceLine line="8052" text="actions!=0||newdtext!= ( (void* )0) is true" type="C"/>
   <traceLine line="8056" text="&apos;dtext-&gt;version&apos; is assigned the return value from function &apos;RCS_getdeltatext&apos;." type="E" refId="1"/>
   <traceLine line="8064" text="insertpt!= ( (void* )0) is true" type="C"/>
   <traceLine line="8064" text="&apos;dtext-&gt;version&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getdeltatext" id="1">
   <traceLine line="7691" text="&apos;d-&gt;version&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="7709" text="Break statement causes loop exit." type="E" refId="3"/>
   <traceLine line="7725" text="&apos;d-&gt;version&apos; is returned by &apos;RCS_getdeltatext&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getdeltatext" id="3">
   <traceLine line="7703" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=387</url>
</problem>
<problem>
 <problemID>771</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_rewrite</method>
 <line>8423</line>
 <column>35</column>
 <code>NPD.FUNC.CALL.MUST</code>
 <message>Pointer &apos;rcs-&gt;path&apos; returned from call to function &apos;resolve_symlink&apos; at line 8421 may be NULL, will be passed to function and may be dereferenced there by passing argument 1 to function &apos;rcs_internal_lockfile&apos; at line 8423.</message>
 <anchor>-384439565</anchor>
 <prefix>*/resolve_symlink(&amp;(rcs-&gt;path));</prefix>
 <postfix>RCS_putadmin(rcs,fout);RCS_putdt</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_rewrite" id="0">
   <traceLine line="8421" text="&apos;rcs-&gt;path&apos; is assigned the return value from function &apos;resolve_symlink&apos;." type="E" refId="1"/>
   <traceLine line="8423" text="&apos;rcs-&gt;path&apos; is dereferenced by passing argument 1 to function &apos;rcs_internal_lockfile&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="resolve_symlink" id="1">
   <traceLine line="769" text="Continue loop iteration, while (rsize=islink( *filename) ) &gt;0 is true" type="C"/>
   <traceLine line="777" text="&apos;newname&apos; is assigned the return value from function &apos;Xreadlink&apos;." type="E" refId="2"/>
   <traceLine line="779" text="isabsolute(newname) is true" type="C"/>
   <traceLine line="782" text="*filename = newname: copies &apos;newname&apos; into &apos;*filename&apos;" type="E"/>
   <traceLine line="799" text="&apos;*filename&apos; is returned by &apos;resolve_symlink&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xreadlink" id="2">
   <traceLine line="67" text="&apos;file&apos; is assigned the return value from function &apos;xreadlink&apos;." type="E" refId="3"/>
   <traceLine line="69" text="file== ( (void* )0) is true" type="C"/>
   <traceLine line="72" text="&apos;file&apos; is returned by &apos;Xreadlink&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="3">
   <traceLine line="57" text="xreadlink" type="E"/>
   <traceLine line="63" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="71" text="r&lt;0&amp;&amp; ( *__errno() ) !=34 is true" type="C"/>
   <traceLine line="76" text="Return statement causes loop exit." type="E" refId="4"/>
   <traceLine line="76" text="&apos;xreadlink&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="4">
   <traceLine line="63" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcs_internal_lockfile" id="5">
   <traceLine line="8280" text="&apos;rcsfile&apos; is passed to function &apos;rcs_internal_lockfile&apos;." type="E"/>
   <traceLine line="8296" text="&apos;rcsfile&apos; is dereferenced by passing argument 1 to function &apos;rcs_lockfilename&apos;." type="E" refId="6"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcs_lockfilename" id="6">
   <traceLine line="8384" text="&apos;rcsfile&apos; is passed to function &apos;rcs_lockfilename&apos;." type="E"/>
   <traceLine line="8391" text="&apos;rcsfile&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=771</url>
</problem>
<problem>
 <problemID>779</problemID>
 <file>cvs\src\rcs.c</file>
 <method>getfullCVSname</method>
 <line>8671</line>
 <column>22</column>
 <code>NPD.FUNC.CALL.MUST</code>
 <message>Pointer &apos;*pathstore&apos; returned from call to function &apos;Xstrdup&apos; at line 8657 may be NULL, will be passed to function and may be dereferenced there by passing argument 1 to function &apos;strncmp&apos; at line 8671.</message>
 <anchor>-1203443070</anchor>
 <prefix>current_parsed_root-&gt;directory);</prefix>
 <postfix>(*pathstore)[rootlen]==&apos;/&apos;)CVSna</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="getfullCVSname" id="0">
   <traceLine line="8657" text="&apos;*pathstore&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="8671" text="&apos;*pathstore&apos; is dereferenced by passing argument 1 to function &apos;strncmp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=779</url>
</problem>
<problem>
 <problemID>772</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkin</method>
 <line>4978</line>
 <column>21</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;rcs-&gt;path&apos; returned from call to function &apos;resolve_symlink&apos; at line 4973 may be NULL and may be dereferenced at line 4978.</message>
 <anchor>-975695840</anchor>
 <prefix>!(checkin_quiet||really_quiet)){</prefix>
 <postfix>cvs_output(&quot;&lt;--&quot;,7);if(update_di</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="0">
   <traceLine line="4973" text="&apos;rcs-&gt;path&apos; is assigned the return value from function &apos;resolve_symlink&apos;." type="E" refId="1"/>
   <traceLine line="4978" text="&apos;rcs-&gt;path&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="resolve_symlink" id="1">
   <traceLine line="769" text="Continue loop iteration, while (rsize=islink( *filename) ) &gt;0 is true" type="C"/>
   <traceLine line="777" text="&apos;newname&apos; is assigned the return value from function &apos;Xreadlink&apos;." type="E" refId="2"/>
   <traceLine line="779" text="isabsolute(newname) is true" type="C"/>
   <traceLine line="782" text="*filename = newname: copies &apos;newname&apos; into &apos;*filename&apos;" type="E"/>
   <traceLine line="799" text="&apos;*filename&apos; is returned by &apos;resolve_symlink&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xreadlink" id="2">
   <traceLine line="67" text="&apos;file&apos; is assigned the return value from function &apos;xreadlink&apos;." type="E" refId="3"/>
   <traceLine line="69" text="file== ( (void* )0) is true" type="C"/>
   <traceLine line="72" text="&apos;file&apos; is returned by &apos;Xreadlink&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="3">
   <traceLine line="57" text="xreadlink" type="E"/>
   <traceLine line="63" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="71" text="r&lt;0&amp;&amp; ( *__errno() ) !=34 is true" type="C"/>
   <traceLine line="76" text="Return statement causes loop exit." type="E" refId="4"/>
   <traceLine line="76" text="&apos;xreadlink&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="4">
   <traceLine line="63" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="5">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=772</url>
</problem>
<problem>
 <problemID>777</problemID>
 <file>cvs\src\rcs.c</file>
 <method>getfullCVSname</method>
 <line>8672</line>
 <column>14</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;*pathstore&apos; returned from call to function &apos;Xstrdup&apos; at line 8657 may be NULL and may be dereferenced at line 8672.</message>
 <anchor>-1545082766</anchor>
 <prefix>arsed_root-&gt;directory,rootlen)&amp;&amp;</prefix>
 <postfix>CVSname=(*pathstore+rootlen+1);e</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="getfullCVSname" id="0">
   <traceLine line="8657" text="&apos;*pathstore&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="8671" text="!strncmp( *pathstore, current_parsed_root-&gt;directory, rootlen) is true" type="C"/>
   <traceLine line="8672" text="&apos;*pathstore&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=777</url>
</problem>
<problem>
 <problemID>759</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkin</method>
 <line>4964</line>
 <column>33</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;workfile&apos; returned from call to function &apos;Xstrdup&apos; at line 4963 may be NULL and will be dereferenced at line 4964.</message>
 <anchor>1588785421</anchor>
 <prefix>rdup(last_component(rcs-&gt;path));</prefix>
 <postfix>assert(strncmp(p,RCSEXT,extlen)=</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="0">
   <traceLine line="4963" text="&apos;workfile&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="4964" text="&apos;workfile&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=759</url>
</problem>
<problem>
 <problemID>757</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_addbranch</method>
 <line>4884</line>
 <column>46</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;newrevnum&apos; returned from call to function &apos;Xstrdup&apos; at line 4852 may be NULL and may be dereferenced at line 4884.</message>
 <anchor>1202614691</anchor>
 <prefix>(found_pos){break;}}marker=bp;}}</prefix>
 <postfix>strcat(newrevnum,&quot;.1&quot;);/*Addthis</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_addbranch" id="0">
   <traceLine line="4832" text="(numdots(branch) &amp;1) ==1 is false" type="C"/>
   <traceLine line="4852" text="&apos;newrevnum&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="4877" text="Break statement causes loop exit." type="E" refId="2"/>
   <traceLine line="4884" text="&apos;newrevnum&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_addbranch" id="2">
   <traceLine line="4862" text="See loop head here." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=757</url>
</problem>
<problem>
 <problemID>780</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_checkin</method>
 <line>5156</line>
 <column>39</column>
 <code>NPD.FUNC.CALL.MIGHT</code>
 <message>Pointer &apos;rcs-&gt;path&apos; returned from call to function &apos;resolve_symlink&apos; at line 4973 may be NULL, may be passed to function and may be dereferenced there by passing argument 1 to function &apos;rcs_internal_lockfile&apos; at line 5156.</message>
 <anchor>-384439565</anchor>
 <prefix>chedfile.*/rcsbuf_cache_close();</prefix>
 <postfix>RCS_putadmin(rcs,fout);RCS_putdt</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_checkin" id="0">
   <traceLine line="4973" text="&apos;rcs-&gt;path&apos; is assigned the return value from function &apos;resolve_symlink&apos;." type="E" refId="1"/>
   <traceLine line="4976" text="really_quiet is true" type="C"/>
   <traceLine line="4976" text="! (checkin_quiet||really_quiet) is false" type="C"/>
   <traceLine line="5143" text="rcs-&gt;expand!= ( (void* )0) &amp;&amp; ( * (char* ) (rcs-&gt;expand) == * (char* ) (&quot;b&quot;) &amp;&amp;strcmp( (rcs-&gt;expand),  (&quot;b&quot;) ) ==0) is false" type="C"/>
   <traceLine line="5156" text="&apos;rcs-&gt;path&apos; is dereferenced by passing argument 1 to function &apos;rcs_internal_lockfile&apos;." type="E" refId="5"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="resolve_symlink" id="1">
   <traceLine line="769" text="Continue loop iteration, while (rsize=islink( *filename) ) &gt;0 is true" type="C"/>
   <traceLine line="777" text="&apos;newname&apos; is assigned the return value from function &apos;Xreadlink&apos;." type="E" refId="2"/>
   <traceLine line="779" text="isabsolute(newname) is true" type="C"/>
   <traceLine line="782" text="*filename = newname: copies &apos;newname&apos; into &apos;*filename&apos;" type="E"/>
   <traceLine line="799" text="&apos;*filename&apos; is returned by &apos;resolve_symlink&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xreadlink" id="2">
   <traceLine line="67" text="&apos;file&apos; is assigned the return value from function &apos;xreadlink&apos;." type="E" refId="3"/>
   <traceLine line="69" text="file== ( (void* )0) is true" type="C"/>
   <traceLine line="72" text="&apos;file&apos; is returned by &apos;Xreadlink&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="3">
   <traceLine line="57" text="xreadlink" type="E"/>
   <traceLine line="63" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="71" text="r&lt;0&amp;&amp; ( *__errno() ) !=34 is true" type="C"/>
   <traceLine line="76" text="Return statement causes loop exit." type="E" refId="4"/>
   <traceLine line="76" text="&apos;xreadlink&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xreadlink.c" method="xreadlink" id="4">
   <traceLine line="63" text="See loop head here." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcs_internal_lockfile" id="5">
   <traceLine line="8280" text="&apos;rcsfile&apos; is passed to function &apos;rcs_internal_lockfile&apos;." type="E"/>
   <traceLine line="8296" text="&apos;rcsfile&apos; is dereferenced by passing argument 1 to function &apos;rcs_lockfilename&apos;." type="E" refId="6"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="rcs_lockfilename" id="6">
   <traceLine line="8384" text="&apos;rcsfile&apos; is passed to function &apos;rcs_lockfilename&apos;." type="E"/>
   <traceLine line="8391" text="&apos;rcsfile&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=780</url>
</problem>
<problem>
 <problemID>773</problemID>
 <file>cvs\src\rcs.c</file>
 <method>RCS_setincexc</method>
 <line>8616</line>
 <column>14</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;next&apos; returned from call to function &apos;Xstrdup&apos; at line 8614 may be NULL and will be dereferenced at line 8616.</message>
 <anchor>2060814067</anchor>
 <prefix>_in;copy=xstrdup(arg);next=copy;</prefix>
 <postfix>case&apos;e&apos;:include=false;break;case</postfix>
 <trace>
  <traceBlock file="cvs\src\rcs.c" method="RCS_setincexc" id="0">
   <traceLine line="8614" text="&apos;copy&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="8615" text="next = copy: copies &apos;copy&apos; into &apos;next&apos;" type="E"/>
   <traceLine line="8616" text="next: copies &apos;next&apos;" type="E"/>
   <traceLine line="8616" text="&apos;next&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=773</url>
</problem>
<problem>
 <problemID>413</problemID>
 <file>cvs\src\rcscmds.c</file>
 <method>RCS_merge</method>
 <line>255</line>
 <column>17</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;xrev1&apos; returned from call to function &apos;RCS_gettag&apos; at line 248 may be NULL and will be dereferenced at line 255.</message>
 <anchor>-2026703027</anchor>
 <prefix>_output(&quot;retrievingrevision&quot;,0);</prefix>
 <postfix>cvs_output(&quot;\n&quot;,1);tmp1=cvs_temp</postfix>
 <trace>
  <traceBlock file="cvs\src\rcscmds.c" method="RCS_merge" id="0">
   <traceLine line="248" text="&apos;xrev1&apos; is assigned the return value from function &apos;RCS_gettag&apos;." type="E" refId="1"/>
   <traceLine line="255" text="&apos;xrev1&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_gettag" id="1">
   <traceLine line="2354" text="&apos;branch&apos; is assigned the return value from function &apos;RCS_getbranch&apos;." type="E" refId="2"/>
   <traceLine line="2356" text="&apos;branch&apos; is returned by &apos;RCS_gettag&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getbranch" id="2">
   <traceLine line="2609" text="RCS_getbranch" type="E"/>
   <traceLine line="2680" text="&apos;RCS_getbranch&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="3">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=413</url>
</problem>
<problem>
 <problemID>414</problemID>
 <file>cvs\src\rcscmds.c</file>
 <method>RCS_merge</method>
 <line>267</line>
 <column>17</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;xrev2&apos; returned from call to function &apos;RCS_gettag&apos; at line 249 may be NULL and may be dereferenced at line 267.</message>
 <anchor>1757730092</anchor>
 <prefix>_output(&quot;retrievingrevision&quot;,0);</prefix>
 <postfix>cvs_output(&quot;\n&quot;,1);tmp2=cvs_temp</postfix>
 <trace>
  <traceBlock file="cvs\src\rcscmds.c" method="RCS_merge" id="0">
   <traceLine line="249" text="&apos;xrev2&apos; is assigned the return value from function &apos;RCS_gettag&apos;." type="E" refId="1"/>
   <traceLine line="267" text="&apos;xrev2&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_gettag" id="1">
   <traceLine line="2354" text="&apos;branch&apos; is assigned the return value from function &apos;RCS_getbranch&apos;." type="E" refId="2"/>
   <traceLine line="2356" text="&apos;branch&apos; is returned by &apos;RCS_gettag&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getbranch" id="2">
   <traceLine line="2609" text="RCS_getbranch" type="E"/>
   <traceLine line="2680" text="&apos;RCS_getbranch&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="3">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=414</url>
</problem>
<problem>
 <problemID>788</problemID>
 <file>cvs\src\recurse.c</file>
 <method>start_recursion</method>
 <line>395</line>
 <column>29</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;dir&apos; returned from call to function &apos;Xstrdup&apos; at line 364 may be NULL and may be dereferenced at line 395.</message>
 <anchor>457697677</anchor>
 <prefix>addfile(&amp;files_by_dir,dir,comp);</prefix>
 <postfix>{if((which&amp;W_LOCAL)&amp;&amp;isdir(CVSAD</postfix>
 <trace>
  <traceBlock file="cvs\src\recurse.c" method="start_recursion" id="0">
   <traceLine line="348" text="!wrap_name_has(argv[i], WRAP_TOCVS) &amp;&amp;isdir(argv[i] ) is false" type="C"/>
   <traceLine line="364" text="&apos;dir&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="369" text="comp==dir is false" type="C"/>
   <traceLine line="393" text="isfile(file_to_try) is false" type="C"/>
   <traceLine line="395" text="&apos;dir&apos; is dereferenced by passing argument 1 to function &apos;isdir&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="isdir" id="2">
   <traceLine line="119" text="&apos;file&apos; is passed to function &apos;isdir&apos;." type="E"/>
   <traceLine line="123" text="&apos;file&apos; is dereferenced by passing argument 1 to function &apos;stat&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=788</url>
</problem>
<problem>
 <problemID>419</problemID>
 <file>cvs\src\recurse.c</file>
 <method>do_dir_proc</method>
 <line>1219</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;cwd.desc&apos; at line 1211 may be lost here. Also there is one similar error on line 1271.</message>
 <anchor>-1990331761</anchor>
 <prefix>-directory*/if(CVS_CHDIR(dir)&lt;0)</prefix>
 <postfix>/*honortheglobalSKIP_DIRS(a.k.a.</postfix>
 <trace>
  <traceBlock file="cvs\src\recurse.c" method="do_dir_proc" id="0">
   <traceLine line="1211" text="Resource is acquired: &apos;cwd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="1219" text="Resource is lost: &apos;cwd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=419</url>
</problem>
<problem>
 <problemID>420</problemID>
 <file>cvs\src\recurse.c</file>
 <method>unroll_files_proc</method>
 <line>1351</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;cwd.desc&apos; at line 1348 may be lost here. Also there are 2 similar errors on line(s) 1373, 1381.</message>
 <anchor>-1990331761</anchor>
 <prefix>ctory.&quot;);if(CVS_CHDIR(p-&gt;key)&lt;0)</prefix>
 <postfix>save_update_dir=update_dir;updat</postfix>
 <trace>
  <traceBlock file="cvs\src\recurse.c" method="unroll_files_proc" id="0">
   <traceLine line="1348" text="Resource is acquired: &apos;cwd.desc&apos; is accessed via 1 argument of the call to function &apos;save_cwd&apos;." type="E" refId="1"/>
   <traceLine line="1351" text="Resource is lost: &apos;cwd.desc&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\save-cwd.c" method="save_cwd" id="1">
   <traceLine line="72" text="have_working_fchdir is true" type="C"/>
   <traceLine line="75" text="Resource is acquired: &apos;cwd-&gt;desc&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="76" text="cwd-&gt;desc&lt;0 is false" type="C"/>
   <traceLine line="111" text="!have_working_fchdir is false" type="C"/>
   <traceLine line="117" text="Resource descriptor is returned: &apos;cwd-&gt;desc&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=420</url>
</problem>
<problem>
 <problemID>423</problemID>
 <file>cvs\src\recurse.c</file>
 <method>do_recursion</method>
 <line>895</line>
 <column>9</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;entries&apos; is never used after assignment</message>
 <anchor>-1591573360</anchor>
 <prefix>entries){Entries_Close(entries);</prefix>
 <postfix>}/*freethesavedcopyofthepointeri</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=423</url>
</problem>
<problem>
 <problemID>787</problemID>
 <file>cvs\src\recurse.c</file>
 <method>start_recursion</method>
 <line>393</line>
 <column>25</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;file_to_try&apos; returned from call to function &apos;Xstrdup&apos; at line 391 may be NULL and will be dereferenced at line 393.</message>
 <anchor>-1300568166</anchor>
 <prefix>lsefile_to_try=xstrdup(argv[i]);</prefix>
 <postfix>addfile(&amp;files_by_dir,dir,comp);</postfix>
 <trace>
  <traceBlock file="cvs\src\recurse.c" method="start_recursion" id="0">
   <traceLine line="383" text="! (which&amp;1) is false" type="C"/>
   <traceLine line="391" text="&apos;file_to_try&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="393" text="&apos;file_to_try&apos; is dereferenced by passing argument 1 to function &apos;isfile&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="isfile" id="2">
   <traceLine line="177" text="&apos;file&apos; is passed to function &apos;isfile&apos;." type="E"/>
   <traceLine line="179" text="&apos;file&apos; is dereferenced by passing argument 1 to function &apos;isaccessible&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="isaccessible" id="3">
   <traceLine line="212" text="&apos;file&apos; is passed to function &apos;isaccessible&apos;." type="E"/>
   <traceLine line="261" text="&apos;file&apos; is dereferenced by passing argument 1 to function &apos;access&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=787</url>
</problem>
<problem>
 <problemID>786</problemID>
 <file>cvs\src\recurse.c</file>
 <method>start_recursion</method>
 <line>421</line>
 <column>52</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;comp&apos; returned from call to function &apos;Xstrdup&apos; at line 377 may be NULL and may be dereferenced at line 421.</message>
 <anchor>-577806065</anchor>
 <prefix>;reposfile=xmalloc(strlen(repos)</prefix>
 <postfix>+5);sprintf(reposfile,&quot;%s/%s&quot;,re</postfix>
 <trace>
  <traceBlock file="cvs\src\recurse.c" method="start_recursion" id="0">
   <traceLine line="369" text="comp==dir is false" type="C"/>
   <traceLine line="377" text="&apos;comp&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="383" text="! (which&amp;1) is false" type="C"/>
   <traceLine line="393" text="isfile(file_to_try) is false" type="C"/>
   <traceLine line="397" text="which&amp;1 is true" type="C"/>
   <traceLine line="397" text="(which&amp;1) &amp;&amp;isdir(&quot;CVS&quot;) &amp;&amp; !current_parsed_root-&gt;isremote is true" type="C"/>
   <traceLine line="421" text="&apos;comp&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=786</url>
</problem>
<problem>
 <problemID>462</problemID>
 <file>cvs\src\root.c</file>
 <method>Create_Root</method>
 <line>165</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fout&apos; at line 163 may be lost here.</message>
 <anchor>460164270</anchor>
 <prefix>(fprintf(fout,&quot;%s\n&quot;,rootdir)&lt;0)</prefix>
 <postfix>if(fclose(fout)==EOF)error(1,err</postfix>
 <trace>
  <traceBlock file="cvs\src\root.c" method="Create_Root" id="0">
   <traceLine line="163" text="Resource is acquired: &apos;fout&apos; is assigned to return value of the call to function &apos;open_file&apos;." type="E" refId="1"/>
   <traceLine line="165" text="Resource is lost: &apos;fout&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="open_file" id="1">
   <traceLine line="275" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="277" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=462</url>
</problem>
<problem>
 <problemID>805</problemID>
 <file>cvs\src\root.c</file>
 <method>parse_cvsroot</method>
 <line>783</line>
 <column>26</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;newroot-&gt;directory&apos; returned from call to function &apos;Xstrdup&apos; at line 748 may be NULL and may be dereferenced at line 783. Also there is one similar error on line 811.</message>
 <anchor>-496645734</anchor>
 <prefix>leriskinmakingthisafatalerror.*/</prefix>
 <postfix>{error(0,0,&quot;CVSROOTmustbeanabsol</postfix>
 <trace>
  <traceBlock file="cvs\src\root.c" method="parse_cvsroot" id="0">
   <traceLine line="748" text="&apos;newroot-&gt;directory&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="755" text="newroot-&gt;username&amp;&amp; !newroot-&gt;hostname is false" type="C"/>
   <traceLine line="783" text="&apos;newroot-&gt;directory&apos; is dereferenced by passing argument 1 to function &apos;isabsolute&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="isabsolute" id="2">
   <traceLine line="1861" text="&apos;filename&apos; is passed to function &apos;isabsolute&apos;." type="E"/>
   <traceLine line="1863" text="&apos;filename&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=805</url>
</problem>
<problem>
 <problemID>455</problemID>
 <file>cvs\src\root.c</file>
 <method>Name_Root</method>
 <line>132</line>
 <column>5</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fpin&apos; at line 79 may be lost here.</message>
 <anchor>-1011872306</anchor>
 <prefix>e(tmp);if(root!=NULL)free(root);</prefix>
 <postfix>}/**WritetheCVS/Rootfilesothatth</postfix>
 <trace>
  <traceBlock file="cvs\src\root.c" method="Name_Root" id="0">
   <traceLine line="69" text="( !isdir(cvsadm) ) || ( !isreadable(tmp) ) is false" type="C"/>
   <traceLine line="79" text="Resource is acquired: &apos;fpin&apos; is assigned to return value of the call to function &apos;open_file&apos;." type="E" refId="1"/>
   <traceLine line="81" text="(len=getline( &amp;root,  &amp;root_allocated, fpin) ) &lt;0 is true" type="C"/>
   <traceLine line="132" text="Resource is lost: &apos;fpin&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="open_file" id="1">
   <traceLine line="275" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="277" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=455</url>
</problem>
<problem>
 <problemID>801</problemID>
 <file>cvs\src\root.c</file>
 <method>normalize_cvsroot</method>
 <line>946</line>
 <column>13</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;p&apos; returned from call to function &apos;Xstrdup&apos; at line 945 may be NULL and will be dereferenced at line 946.</message>
 <anchor>-2137741072</anchor>
 <prefix>ostname=xstrdup(root-&gt;hostname);</prefix>
 <postfix>{*p=tolower(*p);p++;}cvsroot_can</postfix>
 <trace>
  <traceBlock file="cvs\src\root.c" method="normalize_cvsroot" id="0">
   <traceLine line="945" text="&apos;hostname&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="945" text="p = hostname: copies &apos;hostname&apos; into &apos;p&apos;" type="E"/>
   <traceLine line="946" text="&apos;p&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=801</url>
</problem>
<problem>
 <problemID>457</problemID>
 <file>cvs\src\root.c</file>
 <method>normalize_cvsroot</method>
 <line>948</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>trdup(root-&gt;hostname);while(*p){</prefix>
 <postfix>p++;}cvsroot_canonical=Xasprintf</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=457</url>
</problem>
<problem>
 <problemID>804</problemID>
 <file>cvs\src\root.c</file>
 <method>parse_cvsroot</method>
 <line>531</line>
 <column>26</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;method&apos; returned from call to function &apos;strtok&apos; at line 526 may be NULL and will be dereferenced at line 531.</message>
 <anchor>-1109041584</anchor>
 <prefix>naccessmethod--seeifit&apos;svalid.*/</prefix>
 <postfix>newroot-&gt;method=local_method;els</postfix>
 <trace>
  <traceBlock file="cvs\src\root.c" method="parse_cvsroot" id="0">
   <traceLine line="526" text="&apos;method&apos; is assigned the return value from function &apos;strtok&apos;." type="E"/>
   <traceLine line="531" text="&apos;method&apos; is dereferenced by passing argument 1 to function &apos;strcasecmp&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=804</url>
</problem>
<problem>
 <problemID>802</problemID>
 <file>cvs\src\root.c</file>
 <method>get_local_root_dir</method>
 <line>983</line>
 <column>9</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;*root_in&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 979, 987.</message>
 <anchor>1563691576</anchor>
 <prefix>r,c-&gt;PrimaryServer-&gt;directory)){</prefix>
 <postfix>*r=xstrdup(p-&gt;key);get_local_roo</postfix>
 <trace>
  <traceBlock file="cvs\src\root.c" method="get_local_root_dir" id="0">
   <traceLine line="979" text="&apos;*root_in&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="987" text="&apos;*root_in&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="983" text="&apos;*root_in&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\root.c" method="get_local_root_dir" id="1">
   <traceLine line="973" text="Tracking &apos;*root_in&apos;." type="E"/>
   <traceLine line="976" text="r = root_in: &apos;*r&apos; now references the same memory as &apos;*root_in&apos;" type="E"/>
   <traceLine line="983" text="&apos;*r&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=802</url>
</problem>
<problem>
 <problemID>803</problemID>
 <file>cvs\src\root.c</file>
 <method>parse_cvsroot</method>
 <line>567</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;newroot-&gt;proxy_hostname&apos; allocated through function &apos;Xstrdup&apos; at line 567 can be lost at line 567</message>
 <anchor>1050670935</anchor>
 <prefix>p,q);if(!strcasecmp(p,&quot;proxy&quot;)){</prefix>
 <postfix>}elseif(!strcasecmp(p,&quot;proxyport</postfix>
 <trace>
  <traceBlock file="cvs\src\root.c" method="parse_cvsroot" id="0">
   <traceLine line="567" text="Dynamic memory stored in &apos;newroot-&gt;proxy_hostname&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="553" text="Continue loop iteration, while (p=strtok( ( (void* )0), &quot;;&quot; ) ) is true" type="C"/>
   <traceLine line="567" text="Dynamic memory stored in &apos;newroot-&gt;proxy_hostname&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="2">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=803</url>
</problem>
<problem>
 <problemID>458</problemID>
 <file>cvs\src\root.c</file>
 <method>parse_cvsroot</method>
 <line>638</line>
 <column>5</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from bool to unsigned char may cause loss of data</message>
 <anchor>-46748065</anchor>
 <prefix>if/*!DEBUG*/#ifdefCLIENT_SUPPORT</prefix>
 <postfix>if(readonlyfs&amp;&amp;newroot-&gt;isremote</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=458</url>
</problem>
<problem>
 <problemID>889</problemID>
 <file>cvs\src\rsh-client.c</file>
 <method>start_rsh_server</method>
 <line>175</line>
 <column>10</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;p&apos; is never used after assignment</message>
 <anchor>112</anchor>
 <prefix>p++=root-&gt;hostname;*p++=command;</prefix>
 <postfix>if(trace){inti;fprintf(stderr,&quot;-</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>unowned</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=889</url>
</problem>
<problem>
 <problemID>806</problemID>
 <file>cvs\src\run.c</file>
 <method>run_setup</method>
 <line>74</line>
 <column>19</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;s&apos; returned from call to function &apos;Xstrdup&apos; at line 64 may be NULL and will be dereferenced at line 74.</message>
 <anchor>1277017203</anchor>
 <prefix>&amp;buf,&amp;length,doff+1);d=buf+doff;</prefix>
 <postfix>{switch(*d){case&apos;\\&apos;:if(*s)*d=*s</postfix>
 <trace>
  <traceBlock file="cvs\src\run.c" method="run_setup" id="0">
   <traceLine line="64" text="&apos;run_prog&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="66" text="s = run_prog: copies &apos;run_prog&apos; into &apos;s&apos;" type="E"/>
   <traceLine line="74" text="s: copies &apos;s&apos;" type="E"/>
   <traceLine line="74" text="&apos;s&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Price</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=806</url>
</problem>
<problem>
 <problemID>476</problemID>
 <file>cvs\src\server.c</file>
 <method>template_proc</method>
 <line>5236</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fp&apos; at line 5227 may be lost here.</message>
 <anchor>1303575983</anchor>
 <prefix>csinfotemplatefile%s&quot;,template);</prefix>
 <postfix>}sprintf(buf,&quot;%ld\n&quot;,(long)sb.st</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="template_proc" id="0">
   <traceLine line="5227" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="5236" text="Resource is lost: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=476</url>
</problem>
<problem>
 <problemID>807</problemID>
 <file>cvs\src\server.c</file>
 <method>become_proxy</method>
 <line>2308</line>
 <column>10</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;buf_to_net&apos; by passing argument 1 to function &apos;set_nonblock&apos; at line 2308 before NULL check at line 2519</message>
 <anchor>1409745425</anchor>
 <prefix>edtosetnonblockingiotoprimary&quot;);</prefix>
 <postfix>error(1,status,&quot;failedtosetnonbl</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="become_proxy" id="0">
   <traceLine line="2308" text="&apos;buf_to_net&apos; is dereferenced by being passed as argument 1 to function &apos;set_nonblock&apos;." type="E" refId="1"/>
   <traceLine line="2519" text="&apos;buf_to_net&apos; is checked for NULL." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="set_nonblock" id="1">
   <traceLine line="381" text="&apos;buf&apos; is passed to function &apos;set_nonblock&apos;." type="E"/>
   <traceLine line="385" text="&apos;buf&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=807</url>
</problem>
<problem>
 <problemID>495</problemID>
 <file>cvs\src\server.c</file>
 <method>do_cvs_command</method>
 <line>4039</line>
 <column>9</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;protocol_inbuf&apos; is never used after assignment</message>
 <anchor>456311495</anchor>
 <prefix>inbuf);buf_free(protocol_inbuf);</prefix>
 <postfix>buf_shutdown(stderrbuf);buf_free</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=495</url>
</problem>
<problem>
 <problemID>837</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_notify</method>
 <line>2661</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;new-&gt;filename&apos; allocated through function &apos;xmalloc&apos; at line 2655 can be lost at line 2661</message>
 <anchor>1121599666</anchor>
 <prefix>f(new-&gt;dir!=NULL)free(new-&gt;dir);</prefix>
 <postfix>return;}strcpy(new-&gt;dir,gDirname</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="serve_notify" id="0">
   <traceLine line="2655" text="Dynamic memory stored in &apos;new-&gt;filename&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="2656" text="new-&gt;update_dir== ( (void* )0) is true" type="C"/>
   <traceLine line="2661" text="Dynamic memory stored in &apos;new-&gt;filename&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=837</url>
</problem>
<problem>
 <problemID>503</problemID>
 <file>cvs\src\server.c</file>
 <method>do_cvs_command</method>
 <line>4042</line>
 <column>9</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;stderrbuf&apos; is never used after assignment</message>
 <anchor>160077521</anchor>
 <prefix>(stderrbuf);buf_free(stderrbuf);</prefix>
 <postfix>buf_shutdown(stdoutbuf);buf_free</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=503</url>
</problem>
<problem>
 <problemID>831</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_directory</method>
 <line>1297</line>
 <column>24</column>
 <code>NPD.CHECK.CALL.MIGHT</code>
 <message>Pointer &apos;arg&apos; checked for NULL at line 1260 may be passed to function and may be dereferenced there by passing argument 1 to function &apos;dirswitch&apos; at line 1297.</message>
 <anchor>209486788</anchor>
 <prefix>Y_SUPPORT*/!outside_root(repos))</prefix>
 <postfix>free(repos);}elseif(status==-2){</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="serve_directory" id="0">
   <traceLine line="1260" text="&apos;arg&apos; is checked for NULL." type="E"/>
   <traceLine line="1260" text="arg is false" type="C"/>
   <traceLine line="1297" text="&apos;arg&apos; is dereferenced by passing argument 1 to function &apos;dirswitch&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="dirswitch" id="1">
   <traceLine line="1037" text="&apos;dir&apos; is passed to function &apos;dirswitch&apos;." type="E"/>
   <traceLine line="1043" text="dir is false" type="C"/>
   <traceLine line="1054" text="&apos;dir&apos; is dereferenced by passing argument 1 to function &apos;isabsolute&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="isabsolute" id="2">
   <traceLine line="1861" text="&apos;filename&apos; is passed to function &apos;isabsolute&apos;." type="E"/>
   <traceLine line="1863" text="&apos;filename&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=831</url>
</problem>
<problem>
 <problemID>528</problemID>
 <file>cvs\src\server.c</file>
 <method>server_modtime</method>
 <line>4791</line>
 <column>54</column>
 <code>ABR</code>
 <message>Buffer overflow, array index of &apos;date&apos; may be out of bounds. Array &apos;date&apos; of size 50 may use index value(s) 0..65</message>
 <anchor>3076014</anchor>
 <prefix>ted_response(&quot;Mod-time&quot;))return;</prefix>
 <postfix>/*FIXME?shouldwebeprintingsomeki</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="server_modtime" id="0">
   <traceLine line="4783" text="Array &apos;date&apos; size is 50." type="E"/>
   <traceLine line="4791" text="Parameter &apos;vers_ts-&gt;vn_rcs&apos; can be != 0, parameter &apos;finfo-&gt;rcs&apos; can be != 0, parameter &apos;finfo-&gt;rcs-&gt;versions&apos; can be != 0." type="E"/>
   <traceLine line="4791" text="&apos;date&apos; is passed as an argument to function &apos;RCS_getrevtime&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\rcs.c" method="RCS_getrevtime" id="1">
   <traceLine line="3123" text="&apos;sprintf&apos; is called." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CERT" metaInf="ARR30-C, ARR33-C, ARR38-C"/>
  <taxonomy name="CWE" metaInf="119, 120"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=528</url>
</problem>
<problem>
 <problemID>510</problemID>
 <file>cvs\src\server.c</file>
 <method>do_cvs_command</method>
 <line>3591</line>
 <column>30</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;getenv(&quot;CVS_SERVER_SLEEP&quot;)&apos; returned from call to function &apos;getenv&apos; at line 3591 may be NULL and will be dereferenced at line 3591.</message>
 <anchor>-1777472521</anchor>
 <prefix>/if(getenv(&quot;CVS_SERVER_SLEEP&quot;)){</prefix>
 <postfix>TRACE(TRACE_DATA,&quot;SleepingCVS_SE</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="do_cvs_command" id="0">
   <traceLine line="3591" text="&apos;getenv(&quot;CVS_SERVER_SLEEP&quot;)&apos; is assigned the return value from function &apos;getenv&apos;." type="E"/>
   <traceLine line="3591" text="&apos;getenv(&quot;CVS_SERVER_SLEEP&quot;)&apos; is dereferenced by passing argument 1 to function &apos;atoi&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=510</url>
</problem>
<problem>
 <problemID>526</problemID>
 <file>cvs\src\server.c</file>
 <method>server_updated</method>
 <line>5084</line>
 <column>13</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;vers-&gt;ts_user&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 4826, 5100.</message>
 <anchor>-18688118</anchor>
 <prefix>;}if(vers&amp;&amp;vers-&gt;ts_user!=NULL){</prefix>
 <postfix>vers-&gt;ts_user=NULL;}}elseif(scra</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="server_updated" id="0">
   <traceLine line="4826" text="&apos;vers-&gt;ts_user&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="5100" text="&apos;vers-&gt;ts_user&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="5084" text="&apos;vers-&gt;ts_user&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="server_updated" id="1">
   <traceLine line="4806" text="Tracking &apos;vers-&gt;ts_user&apos;." type="E"/>
   <traceLine line="5084" text="&apos;vers-&gt;ts_user&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=526</url>
</problem>
<problem>
 <problemID>838</problemID>
 <file>cvs\src\server.c</file>
 <method>become_proxy</method>
 <line>2306</line>
 <column>10</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;buf_to_primary&apos; by passing argument 1 to function &apos;set_nonblock&apos; at line 2306 before NULL check at line 2413</message>
 <anchor>-1747176052</anchor>
 <prefix>dtosetnonblockingiofromclient&quot;);</prefix>
 <postfix>error(1,status,&quot;failedtosetnonbl</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="become_proxy" id="0">
   <traceLine line="2306" text="&apos;buf_to_primary&apos; is dereferenced by being passed as argument 1 to function &apos;set_nonblock&apos;." type="E" refId="1"/>
   <traceLine line="2413" text="&apos;buf_to_primary&apos; is checked for NULL." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="set_nonblock" id="1">
   <traceLine line="381" text="&apos;buf&apos; is passed to function &apos;set_nonblock&apos;." type="E"/>
   <traceLine line="385" text="&apos;buf&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=838</url>
</problem>
<problem>
 <problemID>834</problemID>
 <file>cvs\src\server.c</file>
 <method>cvs_output_tagged</method>
 <line>7804</line>
 <column>29</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;text&apos; checked for NULL at line 7754 may be dereferenced at line 7804. Also there is one similar error on line 7804.</message>
 <anchor>-1004842669</anchor>
 <prefix>emoremeaningfulthan*localtime.*/</prefix>
 <postfix>else#endif/*SERVER_SUPPORT*/{cha</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="0">
   <traceLine line="7754" text="&apos;text&apos; is checked for NULL." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7769" text="server_active is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="1">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=834</url>
</problem>
<problem>
 <problemID>496</problemID>
 <file>cvs\src\server.c</file>
 <method>check_repository_password</method>
 <line>6633</line>
 <column>13</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;non_cvsuser_portion&apos; by passing argument 1 to function &apos;strchr&apos; at line 6633 before NULL check at line 6639</message>
 <anchor>776584468</anchor>
 <prefix>lonnow,wejustwanttoinchpastit.*/</prefix>
 <postfix>non_cvsuser_portion++;/*Okay,aft</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="check_repository_password" id="0">
   <traceLine line="6633" text="&apos;non_cvsuser_portion&apos; is dereferenced by being passed as argument 1 to function &apos;strchr&apos;." type="E"/>
   <traceLine line="6639" text="&apos;non_cvsuser_portion&apos; is checked for NULL." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=496</url>
</problem>
<problem>
 <problemID>816</problemID>
 <file>cvs\src\server.c</file>
 <method>switch_to_user</method>
 <line>6526</line>
 <column>53</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;CVS_Username&apos; returned from call to function &apos;Xstrdup&apos; at line 6508 may be NULL and will be dereferenced at line 6526.</message>
 <anchor>1440512277</anchor>
 <prefix>v(env);#ifdefAUTH_SERVER_SUPPORT</prefix>
 <postfix>(void)sprintf(env,&quot;CVS_USER=%s&quot;,</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="switch_to_user" id="0">
   <traceLine line="6507" text="CVS_Username== ( (void* )0) is true" type="C"/>
   <traceLine line="6508" text="&apos;CVS_Username&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="6526" text="&apos;CVS_Username&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=816</url>
</problem>
<problem>
 <problemID>532</problemID>
 <file>cvs\src\server.c</file>
 <method>server_updated</method>
 <line>4894</line>
 <column>21</column>
 <code>SV.STRBO.UNBOUND_SPRINTF</code>
 <message>function &apos;sprintf&apos; does not check buffer boundaries but outputs to the buffer &apos;buf&apos; of fixed size (3)</message>
 <anchor>-347792813</anchor>
 <prefix>l,&quot;Checksum&quot;);for(i=0;i&lt;16;i++){</prefix>
 <postfix>buf_output0(protocol,buf);}buf_a</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="STR31-C"/>
  <taxonomy name="CWE" metaInf="120, 242"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=532</url>
</problem>
<problem>
 <problemID>815</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_notify</method>
 <line>2661</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;new-&gt;update_dir&apos; allocated through function &apos;xmalloc&apos; at line 2654 can be lost at line 2661. Also there is one similar error on line 2693.</message>
 <anchor>1030276738</anchor>
 <prefix>f(new-&gt;dir!=NULL)free(new-&gt;dir);</prefix>
 <postfix>return;}strcpy(new-&gt;dir,gDirname</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="serve_notify" id="0">
   <traceLine line="2654" text="Dynamic memory stored in &apos;new-&gt;update_dir&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="2656" text="new-&gt;dir== ( (void* )0) ||new-&gt;update_dir== ( (void* )0) is false" type="C"/>
   <traceLine line="2661" text="Dynamic memory stored in &apos;new-&gt;update_dir&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=815</url>
</problem>
<problem>
 <problemID>524</problemID>
 <file>cvs\src\server.c</file>
 <method>do_cvs_command</method>
 <line>3525</line>
 <column>5</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;buf_to_net&apos; by passing argument 1 to function &apos;buf_flush&apos; at line 3525 before NULL check at line 3550</message>
 <anchor>-966406390</anchor>
 <prefix>E&apos;);}/*Flushoutanypendingdata.*/</prefix>
 <postfix>/*Don&apos;tusevfork;we&apos;renotgoingtoe</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="do_cvs_command" id="0">
   <traceLine line="3525" text="&apos;buf_to_net&apos; is dereferenced by being passed as argument 1 to function &apos;buf_flush&apos;." type="E" refId="1"/>
   <traceLine line="3550" text="&apos;buf_to_net&apos; is checked for NULL." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="buf_flush" id="1">
   <traceLine line="343" text="&apos;buf&apos; is passed to function &apos;buf_flush&apos;." type="E"/>
   <traceLine line="348" text="&apos;buf&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=524</url>
</problem>
<problem>
 <problemID>829</problemID>
 <file>cvs\src\server.c</file>
 <method>become_proxy</method>
 <line>2302</line>
 <column>10</column>
 <code>RNPD.CALL</code>
 <message>Suspicious dereference of pointer &apos;buf_from_primary&apos; by passing argument 1 to function &apos;set_nonblock&apos; at line 2302 before NULL check at line 2334</message>
 <anchor>-2043483651</anchor>
 <prefix>f_to_primary,&amp;buf_from_primary);</prefix>
 <postfix>error(1,status,&quot;failedtosetnonbl</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="become_proxy" id="0">
   <traceLine line="2302" text="&apos;buf_from_primary&apos; is dereferenced by being passed as argument 1 to function &apos;set_nonblock&apos;." type="E" refId="1"/>
   <traceLine line="2334" text="&apos;buf_from_primary&apos; is checked for NULL." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="set_nonblock" id="1">
   <traceLine line="381" text="&apos;buf&apos; is passed to function &apos;set_nonblock&apos;." type="E"/>
   <traceLine line="385" text="&apos;buf&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=829</url>
</problem>
<problem>
 <problemID>809</problemID>
 <file>cvs\src\server.c</file>
 <method>server_pathname_check</method>
 <line>907</line>
 <column>21</column>
 <code>NPD.CHECK.MUST</code>
 <message>Pointer &apos;path&apos; checked for NULL at line 902 will be dereferenced at line 907.</message>
 <anchor>1233204299</anchor>
 <prefix>oleintheanonymousreadonlycase.*/</prefix>
 <postfix>/*Givinganerrorisactuallykindofa</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="server_pathname_check" id="0">
   <traceLine line="902" text="&apos;path&apos; is checked for NULL." type="E"/>
   <traceLine line="902" text="path is false" type="C"/>
   <traceLine line="907" text="&apos;path&apos; is dereferenced by passing argument 1 to function &apos;isabsolute&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="isabsolute" id="1">
   <traceLine line="1861" text="&apos;filename&apos; is passed to function &apos;isabsolute&apos;." type="E"/>
   <traceLine line="1863" text="&apos;filename&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=809</url>
</problem>
<problem>
 <problemID>839</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_is_modified</method>
 <line>1685</line>
 <column>14</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;timefield&apos; is never used after assignment</message>
 <anchor>42796621</anchor>
 <prefix>CVSrelease)relyonthisbehavior.*/</prefix>
 <postfix>if(kopt!=NULL){if(alloc_pending(</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=839</url>
</problem>
<problem>
 <problemID>479</problemID>
 <file>cvs\src\server.c</file>
 <method>print_error</method>
 <line>413</line>
 <column>8</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-1331559153</anchor>
 <prefix>=strerror(status);if(msg==NULL){</prefix>
 <postfix>msg=tmpstr;}buf_output0(buf_to_n</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="print_error" id="0">
   <traceLine line="411" text="Infeasible condition: &apos;msg== ( (void* )0)&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="413" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="print_error" id="1">
   <traceLine line="411" text="Inferred value &apos;msg&apos; is &apos;!= 0&apos;" type="E"/>
   <traceLine line="411" text="Result of expression &apos;msg != 0&apos; is &apos;== 1&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=479</url>
</problem>
<problem>
 <problemID>505</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_sticky</method>
 <line>1385</line>
 <column>9</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;f&apos; at line 1370 may be lost here.</message>
 <anchor>1519989059</anchor>
 <prefix>M_TAG);pending_error=save_errno;</prefix>
 <postfix>}if(fclose(f)==EOF){intsave_errn</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="serve_sticky" id="0">
   <traceLine line="1370" text="Resource is acquired: &apos;f&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="1385" text="Resource is lost: &apos;f&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=505</url>
</problem>
<problem>
 <problemID>506</problemID>
 <file>cvs\src\server.c</file>
 <method>server_updated</method>
 <line>5011</line>
 <column>21</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;f&apos; at line 5004 may be lost here.</message>
 <anchor>1519989059</anchor>
 <prefix>ror)(protocol);elseif(status!=0)</prefix>
 <postfix>finfo-&gt;fullname);if(fclose(f)==E</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="server_updated" id="0">
   <traceLine line="5004" text="Resource is acquired: &apos;f&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="5011" text="Resource is lost: &apos;f&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=506</url>
</problem>
<problem>
 <problemID>818</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_modified</method>
 <line>1819</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;mode_text&apos; allocated through function &apos;buf_read_line&apos; at line 1754 can be lost at line 1819. Also there are 2 similar errors on line(s) 1835, 1868.</message>
 <anchor>1108761524</anchor>
 <prefix>sentinvalid(negative)filesize&quot;);</prefix>
 <postfix>}elsesize=read_size;if(error_pen</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="serve_modified" id="0">
   <traceLine line="1754" text="Dynamic memory stored in &apos;mode_text&apos; is allocated by calling function &apos;buf_read_line&apos;." type="E" refId="1"/>
   <traceLine line="1819" text="Dynamic memory stored in &apos;mode_text&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="buf_read_line" id="1">
   <traceLine line="825" text="&apos;*line&apos; is allocated by calling function &apos;buf_read_short_line&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="buf_read_short_line" id="2">
   <traceLine line="864" text="data!= ( (void* )0) is true" type="C"/>
   <traceLine line="869" text="&apos;p&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="3"/>
   <traceLine line="870" text="p== ( (void* )0) is false" type="C"/>
   <traceLine line="872" text="*line = p: copies &apos;p&apos; into &apos;*line&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="3">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="4">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=818</url>
</problem>
<problem>
 <problemID>813</problemID>
 <file>cvs\src\server.c</file>
 <method>create_adm_p</method>
 <line>189</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;p&apos; allocated through function &apos;xmalloc&apos; at line 183 can be lost at line 189. Also there is one similar error on line 195.</message>
 <anchor>-1890278198</anchor>
 <prefix>if(dir_where_cvsadm_lives==NULL)</prefix>
 <postfix>/*Allocatesomespaceforthetempora</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="create_adm_p" id="0">
   <traceLine line="183" text="Dynamic memory stored in &apos;p&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="184" text="p== ( (void* )0) is false" type="C"/>
   <traceLine line="189" text="Dynamic memory stored in &apos;p&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=813</url>
</problem>
<problem>
 <problemID>817</problemID>
 <file>cvs\src\server.c</file>
 <method>become_proxy</method>
 <line>2462</line>
 <column>37</column>
 <code>UNINIT.STACK.MIGHT</code>
 <message>&apos;toread&apos; might be used uninitialized in this function.</message>
 <anchor>-867978607</anchor>
 <prefix>fdatawealreadysenttotheclient.*/</prefix>
 <postfix>{s=buf_read_data(buf_clientlog,t</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="become_proxy" id="0">
   <traceLine line="2325" text="&apos;toread&apos; is declared." type="E"/>
   <traceLine line="2327" text="Not entering loop, because __i&lt;sizeof( * ( &amp;readfds) ) is true" type="C"/>
   <traceLine line="2334" text="buf_from_primary is true" type="C"/>
   <traceLine line="2348" text="to_net_fd&gt;=0 is true" type="C"/>
   <traceLine line="2365" text="from_primary_fd&gt;=0 is true" type="C"/>
   <traceLine line="2400" text="to_net_fd&gt;=0 is true" type="C"/>
   <traceLine line="2452" text="from_primary_fd&gt;=0 is true" type="C"/>
   <traceLine line="2452" text="( &amp;readfds) -&gt;fds_bits[ (from_primary_fd) / (sizeof(fd_mask) *8) ] &amp; (1&lt;&lt; ( (from_primary_fd) % (sizeof(fd_mask) *8) ) ) is false" type="C"/>
   <traceLine line="2452" text="from_primary_fd&gt;=0&amp;&amp; ( ( &amp;readfds) -&gt;fds_bits[ (from_primary_fd) / (sizeof(fd_mask) *8) ] &amp; (1&lt;&lt; ( (from_primary_fd) % (sizeof(fd_mask) *8) ) ) ) is false" type="C"/>
   <traceLine line="2458" text="buf_clientlog&amp;&amp;buf_from_primary is true" type="C"/>
   <traceLine line="2462" text="&apos;toread&apos; is used, but is uninitialized." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP33-C"/>
  <taxonomy name="CWE" metaInf="457"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=817</url>
</problem>
<problem>
 <problemID>494</problemID>
 <file>cvs\src\server.c</file>
 <method>switch_to_user</method>
 <line>6483</line>
 <column>9</column>
 <code>SV.USAGERULES.PERMISSIONS</code>
 <message>Check that &apos;setuid&apos; is used correctly as it elevates privileges.</message>
 <anchor>-905767762</anchor>
 <prefix>d());#endifexit(EXIT_FAILURE);}}</prefix>
 <postfix>{/*Notethatthismeansthatifrunasa</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="POS36-C, POS37-C"/>
  <taxonomy name="CWE" metaInf="250, 265"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=494</url>
</problem>
<problem>
 <problemID>489</problemID>
 <file>cvs\src\server.c</file>
 <method>server_updated</method>
 <line>4933</line>
 <column>13</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>796711384</anchor>
 <prefix>utput0(protocol,&quot;Rcs-diff&quot;);else</prefix>
 <postfix>output_dir(finfo-&gt;update_dir,fin</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="server_updated" id="0">
   <traceLine line="4930" text="Infeasible condition: &apos;updated==SERVER_RCS_DIFF&apos; cannot be false." type="E" refId="1"/>
   <traceLine line="4933" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="server_updated" id="1">
   <traceLine line="4930" text="Inferred value &apos;updated&apos; is &apos;== 3&apos;" type="E"/>
   <traceLine line="4930" text="Result of expression &apos;updated == 3&apos; is &apos;== 1&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=489</url>
</problem>
<problem>
 <problemID>512</problemID>
 <file>cvs\src\server.c</file>
 <method>do_cvs_command</method>
 <line>4045</line>
 <column>9</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;stdoutbuf&apos; is never used after assignment</message>
 <anchor>449199176</anchor>
 <prefix>(stdoutbuf);buf_free(stdoutbuf);</prefix>
 <postfix>}if(errs)/*Wewillhaveprintedaner</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=512</url>
</problem>
<problem>
 <problemID>835</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_directory</method>
 <line>1296</line>
 <column>28</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;repos&apos; returned from call to function &apos;Xstrdup&apos; at line 1290 may be NULL and may be dereferenced at line 1296.</message>
 <anchor>1970801217</anchor>
 <prefix>oxy_log&amp;&amp;#endif/*PROXY_SUPPORT*/</prefix>
 <postfix>dirswitch(arg,repos);free(repos)</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="serve_directory" id="0">
   <traceLine line="1269" text="!isabsolute(repos) is false" type="C"/>
   <traceLine line="1290" text="&apos;repos&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1296" text="&apos;repos&apos; is dereferenced by passing argument 1 to function &apos;outside_root&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="outside_root" id="2">
   <traceLine line="938" text="&apos;repos&apos; is passed to function &apos;outside_root&apos;." type="E"/>
   <traceLine line="940" text="&apos;repos&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=835</url>
</problem>
<problem>
 <problemID>827</problemID>
 <file>cvs\src\server.c</file>
 <method>receive_partial_file</method>
 <line>1450</line>
 <column>17</column>
 <code>CWARN.NOEFFECT.UCMP.LT</code>
 <message>Comparison of unsigned value against 0 is always false</message>
 <anchor>0</anchor>
 <prefix>e;nwrote=write(file,data,nread);</prefix>
 <postfix>{intsave_errno=errno;if(alloc_pe</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=827</url>
</problem>
<problem>
 <problemID>530</problemID>
 <file>cvs\src\server.c</file>
 <method>server_write_entries</method>
 <line>2184</line>
 <column>26</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;f&apos; returned from call to function &apos;fopen&apos; at line 2171 may be NULL and may be dereferenced at line 2184.</message>
 <anchor>1155285136</anchor>
 <prefix>;p!=NULL;){if(!error_pending()){</prefix>
 <postfix>{intsave_errno=errno;if(alloc_pe</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="server_write_entries" id="0">
   <traceLine line="2164" text="! (pending_error||pending_error_text) is true" type="C"/>
   <traceLine line="2171" text="&apos;f&apos; is assigned the return value from function &apos;fopen&apos;." type="E"/>
   <traceLine line="2172" text="f== ( (void* )0) is true" type="C"/>
   <traceLine line="2182" text="pending_error is false" type="C"/>
   <traceLine line="2182" text="! (pending_error||pending_error_text) is true" type="C"/>
   <traceLine line="2184" text="&apos;f&apos; is dereferenced by passing argument 1 to function &apos;fprintf&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=530</url>
</problem>
<problem>
 <problemID>508</problemID>
 <file>cvs\src\server.c</file>
 <method>receive_file</method>
 <line>1542</line>
 <column>17</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fd&apos; at line 1486 may be lost here. Also there is one similar error on line 1542.</message>
 <anchor>-1513087983</anchor>
 <prefix>client&quot;);pending_error=status;}}</prefix>
 <postfix>}toread-=nread;if(filebuf!=NULL)</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="receive_file" id="0">
   <traceLine line="1486" text="Resource is acquired: &apos;fd&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="1520" text="status!=0 is true" type="C"/>
   <traceLine line="1542" text="Resource is lost: &apos;fd&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=508</url>
</problem>
<problem>
 <problemID>509</problemID>
 <file>cvs\src\server.c</file>
 <method>server_updated</method>
 <line>4993</line>
 <column>21</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;fd&apos; at line 4987 may be lost here.</message>
 <anchor>-1513087983</anchor>
 <prefix>ted,&amp;file_used,file_gzip_level))</prefix>
 <postfix>size=file_used;if(close(fd)&lt;0)er</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="server_updated" id="0">
   <traceLine line="4987" text="Resource is acquired: &apos;fd&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="4993" text="Resource is lost: &apos;fd&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=509</url>
</problem>
<problem>
 <problemID>821</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_notify</method>
 <line>2637</line>
 <column>9</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-676626556</anchor>
 <prefix>come_proxy();exit(EXIT_SUCCESS);</prefix>
 <postfix>#endif/*PROXY_SUPPORT*/}if(outsi</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="serve_notify" id="0">
   <traceLine line="2636" text="Call to &apos;exit(0)&apos; never returns." type="E"/>
   <traceLine line="2637" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=821</url>
</problem>
<problem>
 <problemID>823</problemID>
 <file>cvs\src\server.c</file>
 <method>create_adm_p</method>
 <line>195</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;dir_where_cvsadm_lives&apos; allocated through function &apos;xmalloc&apos; at line 187 can be lost at line 195</message>
 <anchor>-1726235018</anchor>
 <prefix>)+strlen(dir)+100);if(tmp==NULL)</prefix>
 <postfix>/*Wemakeseveralpassesthroughthis</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="create_adm_p" id="0">
   <traceLine line="187" text="Dynamic memory stored in &apos;dir_where_cvsadm_lives&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="188" text="dir_where_cvsadm_lives== ( (void* )0) is false" type="C"/>
   <traceLine line="195" text="Dynamic memory stored in &apos;dir_where_cvsadm_lives&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=823</url>
</problem>
<problem>
 <problemID>810</problemID>
 <file>cvs\src\server.c</file>
 <method>become_proxy</method>
 <line>2453</line>
 <column>38</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;buf_from_primary&apos; checked for NULL at line 2334 may be dereferenced at line 2453. Also there are 4 similar errors on line(s) 2453, 2528.</message>
 <anchor>-202889505</anchor>
 <prefix>ISSET(from_primary_fd,&amp;readfds))</prefix>
 <postfix>/*Avoidresendingdatafromtheserve</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="become_proxy" id="0">
   <traceLine line="2334" text="&apos;buf_from_primary&apos; is checked for NULL." type="E"/>
   <traceLine line="2334" text="buf_from_primary is false" type="C"/>
   <traceLine line="2333" text="(buf_from_net&amp;&amp; !buf_empty_p(buf_from_net) ) || (buf_from_primary&amp;&amp; !buf_empty_p(buf_from_primary) ) is false" type="C"/>
   <traceLine line="2365" text="from_primary_fd&gt;=0 is true" type="C"/>
   <traceLine line="2452" text="from_primary_fd&gt;=0 is true" type="C"/>
   <traceLine line="2459" text="buf_from_primary is false" type="C"/>
   <traceLine line="2458" text="buf_clientlog&amp;&amp;buf_from_primary&amp;&amp; !buf_empty_p(buf_from_primary) is false" type="C"/>
   <traceLine line="2517" text="buf_from_primary&amp;&amp; !buf_empty_p(buf_from_primary) is false" type="C"/>
   <traceLine line="2526" text="status== -1 is false" type="C"/>
   <traceLine line="2543" text="from_primary_fd&lt;0&amp;&amp;buf_to_net&amp;&amp;buf_empty_p(buf_to_net) is false" type="C"/>
   <traceLine line="2566" text="from_net_fd&lt;0&amp;&amp;buf_to_primary&amp;&amp;buf_empty_p(buf_to_primary) is false" type="C"/>
   <traceLine line="2327" text="Not entering loop, because __i&lt;sizeof( * ( &amp;readfds) ) is true" type="C"/>
   <traceLine line="2453" text="&apos;buf_from_primary&apos; is dereferenced by passing argument 1 to function &apos;buf_input_data&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="buf_input_data" id="1">
   <traceLine line="750" text="&apos;buf&apos; is passed to function &apos;buf_input_data&apos;." type="E"/>
   <traceLine line="752" text="&apos;buf&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=810</url>
</problem>
<problem>
 <problemID>808</problemID>
 <file>cvs\src\server.c</file>
 <method>pserver_authenticate_connection</method>
 <line>7088</line>
 <column>9</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>494135216</anchor>
 <prefix>,repository);#ifdefHAVE_SYSLOG_H</prefix>
 <postfix>#endifgotoi_hate_you;}/*OK,nowpa</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="pserver_authenticate_connection" id="0">
   <traceLine line="7086" text="Call to &apos;error(1, 0, &quot;%s: no such repository&quot;, repository)&apos; never returns." type="E"/>
   <traceLine line="7088" text="The code is unreachable." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=808</url>
</problem>
<problem>
 <problemID>478</problemID>
 <file>cvs\src\server.c</file>
 <method>server_updated</method>
 <line>4922</line>
 <column>23</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;node&apos; returned from call to function &apos;findnode_fn&apos; at line 4921 may be NULL and will be dereferenced at line 4922.</message>
 <anchor>652457288</anchor>
 <prefix>_fn(finfo-&gt;entries,finfo-&gt;file);</prefix>
 <postfix>free(entnode-&gt;timestamp);entnode</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="server_updated" id="0">
   <traceLine line="4921" text="&apos;node&apos; is assigned the return value from function &apos;findnode_fn&apos;." type="E" refId="1"/>
   <traceLine line="4922" text="&apos;node&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\hash.c" method="findnode_fn" id="1">
   <traceLine line="339" text="findnode_fn" type="E"/>
   <traceLine line="347" text="&apos;findnode_fn&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=478</url>
</problem>
<problem>
 <problemID>502</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_entry</method>
 <line>2041</line>
 <column>9</column>
 <code>RNPD.DEREF</code>
 <message>Suspicious dereference of pointer &apos;cp&apos; before NULL check at line 2044</message>
 <anchor>3058400</anchor>
 <prefix>s*assumptionsaboutthis.*/cp=arg;</prefix>
 <postfix>while(i++&lt;5){if(!cp||*cp!=&apos;/&apos;){i</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="serve_entry" id="0">
   <traceLine line="2041" text="&apos;cp&apos; is dereferenced." type="E"/>
   <traceLine line="2044" text="&apos;cp&apos; is checked for NULL." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=502</url>
</problem>
<problem>
 <problemID>836</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_modified</method>
 <line>1852</line>
 <column>5</column>
 <code>SV.TAINTED.CALL.LOOP_BOUND</code>
 <message>Unvalidated integer value &apos;size&apos; is received from an external function through a call to &apos;atoi&apos; at line 1809 which can be used in a loop condition through a call to &apos;receive_file&apos; at line 1852. Use of unvalidated input for a loop condition can lead to a denial of service condition. Check integers for reasonable limits.</message>
 <anchor>1461860620</anchor>
 <prefix>r(arg)){free(mode_text);return;}</prefix>
 <postfix>#ifdefPROXY_SUPPORTproxy_log?DEV</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="serve_modified" id="0">
   <traceLine line="1809" text="Tainted data &apos;read_size&apos; comes from call to &apos;atoi&apos;." type="E"/>
   <traceLine line="1852" text="Tainted data &apos;size&apos; is passed to &apos;receive_file&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="receive_file" id="1">
   <traceLine line="1559" text="Tainted data &apos;size&apos; is passed to &apos;gunzip_and_write&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\zlib.c" method="gunzip_and_write" id="2">
   <traceLine line="563" text="Tainted data &apos;zstr.avail_in&apos; is passed to &apos;inflate&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\zlib\inflate.c" method="inflate" id="3">
   <traceLine line="720" text="Tainted data &apos;have&apos; is used in loop condition." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="ARR30-C"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=836</url>
</problem>
<problem>
 <problemID>491</problemID>
 <file>cvs\src\server.c</file>
 <method>do_cvs_command</method>
 <line>3568</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;dev_null_fd&apos; at line 3500 may be lost here. Also there are 2 similar errors on line(s) 3570, 3572.</message>
 <anchor>745552785</anchor>
 <prefix>up2(dev_null_fd,STDIN_FILENO)&lt;0)</prefix>
 <postfix>if(dup2(stdout_pipe[1],STDOUT_FI</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="do_cvs_command" id="0">
   <traceLine line="3500" text="Resource is acquired: &apos;dev_null_fd&apos; is assigned to return value of the call to function &apos;open&apos;." type="E"/>
   <traceLine line="3568" text="Resource is lost: &apos;dev_null_fd&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=491</url>
</problem>
<problem>
 <problemID>825</problemID>
 <file>cvs\src\server.c</file>
 <method>become_proxy</method>
 <line>2416</line>
 <column>39</column>
 <code>SEMICOL</code>
 <message>Suspiciously placed semicolon</message>
 <anchor>0</anchor>
 <prefix>uf_to_primary,buf_from_net);else</prefix>
 <postfix>}if(status==-1/*EOF*/){SIG_begin</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP15-C"/>
  <taxonomy name="CWE" metaInf="480"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=825</url>
</problem>
<problem>
 <problemID>826</problemID>
 <file>cvs\src\server.c</file>
 <method>become_proxy</method>
 <line>2522</line>
 <column>39</column>
 <code>SEMICOL</code>
 <message>Suspiciously placed semicolon</message>
 <anchor>0</anchor>
 <prefix>uf_to_net,buf_from_primary);else</prefix>
 <postfix>}if(status==-1/*EOF*/){buf_shutd</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP15-C"/>
  <taxonomy name="CWE" metaInf="480"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=826</url>
</problem>
<problem>
 <problemID>828</problemID>
 <file>cvs\src\server.c</file>
 <method>cvs_output_tagged</method>
 <line>7809</line>
 <column>49</column>
 <code>NPD.FUNC.CALL.MUST</code>
 <message>Pointer &apos;date_in&apos; returned from call to function &apos;Xstrdup&apos; at line 7808 may be NULL, will be passed to function and may be dereferenced there by passing argument 1 to function &apos;format_date_alloc&apos; at line 7809.</message>
 <anchor>-686760055</anchor>
 <prefix>RT*/{char*date_in=xstrdup(text);</prefix>
 <postfix>cvs_output(date,0);free(date);fr</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="0">
   <traceLine line="7808" text="&apos;date_in&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="7809" text="&apos;date_in&apos; is dereferenced by passing argument 1 to function &apos;format_date_alloc&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="format_date_alloc" id="2">
   <traceLine line="1256" text="&apos;datestr&apos; is passed to function &apos;format_date_alloc&apos;." type="E"/>
   <traceLine line="1264" text="&apos;datestr&apos; is dereferenced by passing argument 2 to function &apos;get_date&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\lib\getdate.c" method="get_date" id="3">
   <traceLine line="2465" text="&apos;p&apos; is passed to function &apos;get_date&apos;." type="E"/>
   <traceLine line="2494" text="&apos;p&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=828</url>
</problem>
<problem>
 <problemID>822</problemID>
 <file>cvs\src\server.c</file>
 <method>receive_partial_file</method>
 <line>1452</line>
 <column>34</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>851095507</anchor>
 <prefix>e(file,data,nread);if(nwrote&lt;0){</prefix>
 <postfix>if(alloc_pending(40))strcpy(pend</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="receive_partial_file" id="0">
   <traceLine line="1450" text="Infeasible condition: &apos;nwrote&lt;0&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="1452" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="receive_partial_file" id="1">
   <traceLine line="1450" text="Type constraint &apos;nwrote&apos; is &apos;&gt;= 0&apos;" type="E"/>
   <traceLine line="1450" text="Result of expression &apos;nwrote &lt; 0&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=822</url>
</problem>
<problem>
 <problemID>814</problemID>
 <file>cvs\src\server.c</file>
 <method>server</method>
 <line>6087</line>
 <column>26</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;getenv(&quot;CVS_PARENT_SERVER_SLEEP&quot;)&apos; returned from call to function &apos;getenv&apos; at line 6087 may be NULL and will be dereferenced at line 6087.</message>
 <anchor>414521346</anchor>
 <prefix>env(&quot;CVS_PARENT_SERVER_SLEEP&quot;)){</prefix>
 <postfix>TRACE(TRACE_DATA,&quot;SleepingCVS_PA</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="server" id="0">
   <traceLine line="6087" text="&apos;getenv(&quot;CVS_PARENT_SERVER_SLEEP&quot;)&apos; is assigned the return value from function &apos;getenv&apos;." type="E"/>
   <traceLine line="6087" text="&apos;getenv(&quot;CVS_PARENT_SERVER_SLEEP&quot;)&apos; is dereferenced by passing argument 1 to function &apos;atoi&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=814</url>
</problem>
<problem>
 <problemID>812</problemID>
 <file>cvs\src\server.c</file>
 <method>rewind_buf_from_net</method>
 <line>761</line>
 <column>63</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;log&apos; returned from call to function &apos;log_buffer_rewind&apos; at line 755 may be NULL and will be dereferenced at line 761.</message>
 <anchor>77826717</anchor>
 <prefix>g.*/buf_free_data(buf_from_net);</prefix>
 <postfix>buf_from_net);reprocessing=true;</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="rewind_buf_from_net" id="0">
   <traceLine line="755" text="&apos;log&apos; is assigned the return value from function &apos;log_buffer_rewind&apos;." type="E" refId="1"/>
   <traceLine line="761" text="&apos;log&apos; is dereferenced by passing argument 2 to function &apos;ms_buffer_initialize&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\log-buffer.c" method="log_buffer_rewind" id="1">
   <traceLine line="353" text="log_buffer_rewind" type="E"/>
   <traceLine line="383" text="&apos;log_buffer_rewind&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\ms-buffer.c" method="ms_buffer_initialize" id="2">
   <traceLine line="140" text="&apos;buf&apos; is passed to function &apos;ms_buffer_initialize&apos;." type="E"/>
   <traceLine line="148" text="&apos;buf&apos; is dereferenced by passing argument 1 to function &apos;set_nonblock&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="set_nonblock" id="3">
   <traceLine line="381" text="&apos;buf&apos; is passed to function &apos;set_nonblock&apos;." type="E"/>
   <traceLine line="385" text="&apos;buf&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=812</url>
</problem>
<problem>
 <problemID>832</problemID>
 <file>cvs\src\server.c</file>
 <method>cvs_output_tagged</method>
 <line>7810</line>
 <column>29</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;date&apos; returned from call to function &apos;format_date_alloc&apos; at line 7809 may be NULL and will be dereferenced at line 7810.</message>
 <anchor>-793531948</anchor>
 <prefix>date=format_date_alloc(date_in);</prefix>
 <postfix>free(date);free(date_in);}}elsei</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="0">
   <traceLine line="7809" text="&apos;date&apos; is assigned the return value from function &apos;format_date_alloc&apos;." type="E" refId="1"/>
   <traceLine line="7810" text="&apos;date&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="format_date_alloc" id="1">
   <traceLine line="1282" text="&apos;Xstrdup(datestr)&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="2"/>
   <traceLine line="1282" text="&apos;Xstrdup(datestr)&apos; is returned by &apos;format_date_alloc&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="2">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="3">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=832</url>
</problem>
<problem>
 <problemID>840</problemID>
 <file>cvs\src\server.c</file>
 <method>dirswitch</method>
 <line>1054</line>
 <column>21</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;dir&apos; checked for NULL at line 1043 may be dereferenced at line 1054.</message>
 <anchor>1668800691</anchor>
 <prefix>needtoreporterrorsdifferently.*/</prefix>
 <postfix>{if(alloc_pending(80+strlen(dir)</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="dirswitch" id="0">
   <traceLine line="1043" text="&apos;dir&apos; is checked for NULL." type="E"/>
   <traceLine line="1043" text="dir is false" type="C"/>
   <traceLine line="1054" text="&apos;dir&apos; is dereferenced by passing argument 1 to function &apos;isabsolute&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="isabsolute" id="1">
   <traceLine line="1861" text="&apos;filename&apos; is passed to function &apos;isabsolute&apos;." type="E"/>
   <traceLine line="1863" text="&apos;filename&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=840</url>
</problem>
<problem>
 <problemID>472</problemID>
 <file>cvs\src\server.c</file>
 <method>server_write_entries</method>
 <line>2184</line>
 <column>26</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;f&apos; checked for NULL at line 2172 may be dereferenced at line 2184.</message>
 <anchor>95602700</anchor>
 <prefix>;p!=NULL;){if(!error_pending()){</prefix>
 <postfix>{intsave_errno=errno;if(alloc_pe</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="server_write_entries" id="0">
   <traceLine line="2172" text="&apos;f&apos; is checked for NULL." type="E"/>
   <traceLine line="2172" text="f== ( (void* )0) is true" type="C"/>
   <traceLine line="2182" text="pending_error is false" type="C"/>
   <traceLine line="2182" text="! (pending_error||pending_error_text) is true" type="C"/>
   <traceLine line="2184" text="&apos;f&apos; is dereferenced by passing argument 1 to function &apos;fprintf&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=472</url>
</problem>
<problem>
 <problemID>833</problemID>
 <file>cvs\src\server.c</file>
 <method>become_proxy</method>
 <line>2388</line>
 <column>30</column>
 <code>NPD.GEN.MIGHT</code>
 <message>Null pointer &apos;buf_to_net&apos; that comes from line 2562 may be dereferenced at line 2388.</message>
 <anchor>-1078892213</anchor>
 <prefix>tit&apos;sbetterthannothing,Iguess.*/</prefix>
 <postfix>print_error(errno);exit(EXIT_FAI</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="become_proxy" id="0">
   <traceLine line="2551" text="!buf_from_net is true" type="C"/>
   <traceLine line="2562" text="&apos;buf_to_net&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="2567" text="buf_empty_p(buf_to_primary) is false" type="C"/>
   <traceLine line="2566" text="from_net_fd&lt;0&amp;&amp;buf_to_primary&amp;&amp;buf_empty_p(buf_to_primary) is false" type="C"/>
   <traceLine line="2319" text="from_primary_fd&gt;=0 is false" type="C"/>
   <traceLine line="2327" text="Not entering loop, because __i&lt;sizeof( * ( &amp;readfds) ) is true" type="C"/>
   <traceLine line="2331" text="buf_from_net is false" type="C"/>
   <traceLine line="2333" text="buf_from_net&amp;&amp; !buf_empty_p(buf_from_net) is false" type="C"/>
   <traceLine line="2348" text="to_net_fd&gt;=0&amp;&amp; !buf_empty_p(buf_to_net) is false" type="C"/>
   <traceLine line="2353" text="to_primary_fd&gt;=0 is true" type="C"/>
   <traceLine line="2356" text="(numfds) &gt; (to_primary_fd) is false" type="C"/>
   <traceLine line="2360" text="from_net_fd&gt;=0 is false" type="C"/>
   <traceLine line="2365" text="from_primary_fd&gt;=0 is false" type="C"/>
   <traceLine line="2388" text="&apos;buf_to_net&apos; is dereferenced by passing argument 1 to function &apos;buf_output0&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="buf_output0" id="1">
   <traceLine line="245" text="&apos;buf&apos; is passed to function &apos;buf_output0&apos;." type="E"/>
   <traceLine line="247" text="&apos;buf&apos; is dereferenced by passing argument 1 to function &apos;buf_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="buf_output" id="2">
   <traceLine line="192" text="&apos;buf&apos; is passed to function &apos;buf_output&apos;." type="E"/>
   <traceLine line="194" text="&apos;buf&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=833</url>
</problem>
<problem>
 <problemID>527</problemID>
 <file>cvs\src\server.c</file>
 <method>server</method>
 <line>6220</line>
 <column>22</column>
 <code>SV.TOCTOU.FILE_ACCESS</code>
 <message>function &apos;chmod&apos; operates on file names and is vulnerable to race conditions. Files can be manipulated by attackers between creation and access time.</message>
 <anchor>94635133</anchor>
 <prefix>rror=status;}#ifndefCHMOD_BROKEN</prefix>
 <postfix>{intsave_errno=errno;if(alloc_pe</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO01-C"/>
  <taxonomy name="CWE" metaInf="367"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=527</url>
</problem>
<problem>
 <problemID>531</problemID>
 <file>cvs\src\server.c</file>
 <method>server_updated</method>
 <line>4867</line>
 <column>13</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from off_t to unsigned long int may cause loss of data</message>
 <anchor>28450574</anchor>
 <prefix>o,&quot;reading%s&quot;,finfo-&gt;fullname);}</prefix>
 <postfix>if(mode==(mode_t)-1){/*FIXME:Whe</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=531</url>
</problem>
<problem>
 <problemID>824</problemID>
 <file>cvs\src\server.c</file>
 <method>become_proxy</method>
 <line>2353</line>
 <column>49</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;buf_to_primary&apos; checked for NULL at line 2413 may be dereferenced at line 2353. Also there are 2 similar errors on line(s) 2353, 2447.</message>
 <anchor>-1065808080</anchor>
 <prefix>);numfds=MAX(numfds,to_net_fd);}</prefix>
 <postfix>{FD_SET(to_primary_fd,&amp;writefds)</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="become_proxy" id="0">
   <traceLine line="2413" text="&apos;buf_to_primary&apos; is checked for NULL." type="E"/>
   <traceLine line="2413" text="buf_to_primary is false" type="C"/>
   <traceLine line="2444" text="to_primary_fd&gt;=0 is true" type="C"/>
   <traceLine line="2444" text="( &amp;writefds) -&gt;fds_bits[ (to_primary_fd) / (sizeof(fd_mask) *8) ] &amp; (1&lt;&lt; ( (to_primary_fd) % (sizeof(fd_mask) *8) ) ) is false" type="C"/>
   <traceLine line="2444" text="to_primary_fd&gt;=0&amp;&amp; ( ( &amp;writefds) -&gt;fds_bits[ (to_primary_fd) / (sizeof(fd_mask) *8) ] &amp; (1&lt;&lt; ( (to_primary_fd) % (sizeof(fd_mask) *8) ) ) ) is false" type="C"/>
   <traceLine line="2458" text="buf_clientlog&amp;&amp;buf_from_primary&amp;&amp; !buf_empty_p(buf_from_primary) is false" type="C"/>
   <traceLine line="2543" text="from_primary_fd&lt;0&amp;&amp;buf_to_net&amp;&amp;buf_empty_p(buf_to_net) is false" type="C"/>
   <traceLine line="2567" text="buf_to_primary is false" type="C"/>
   <traceLine line="2566" text="from_net_fd&lt;0&amp;&amp;buf_to_primary&amp;&amp;buf_empty_p(buf_to_primary) is false" type="C"/>
   <traceLine line="2327" text="Not entering loop, because __i&lt;sizeof( * ( &amp;readfds) ) is true" type="C"/>
   <traceLine line="2353" text="to_primary_fd&gt;=0 is true" type="C"/>
   <traceLine line="2353" text="&apos;buf_to_primary&apos; is dereferenced by passing argument 1 to function &apos;buf_empty_p&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="buf_empty_p" id="1">
   <traceLine line="158" text="&apos;buf&apos; is passed to function &apos;buf_empty_p&apos;." type="E"/>
   <traceLine line="162" text="&apos;buf&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=824</url>
</problem>
<problem>
 <problemID>811</problemID>
 <file>cvs\src\server.c</file>
 <method>become_proxy</method>
 <line>2348</line>
 <column>45</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;buf_to_net&apos; checked for NULL at line 2519 may be dereferenced at line 2348. Also there are 5 similar errors on line(s) 2348, 2388, 2438, 2534.</message>
 <anchor>-1078892213</anchor>
 <prefix>;/*Setwritefdsifdataispending.*/</prefix>
 <postfix>{FD_SET(to_net_fd,&amp;writefds);num</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="become_proxy" id="0">
   <traceLine line="2517" text="buf_from_primary&amp;&amp; !buf_empty_p(buf_from_primary) is true" type="C"/>
   <traceLine line="2519" text="&apos;buf_to_net&apos; is checked for NULL." type="E"/>
   <traceLine line="2519" text="buf_to_net is false" type="C"/>
   <traceLine line="2544" text="buf_to_net is false" type="C"/>
   <traceLine line="2543" text="from_primary_fd&lt;0&amp;&amp;buf_to_net&amp;&amp;buf_empty_p(buf_to_net) is false" type="C"/>
   <traceLine line="2566" text="from_net_fd&lt;0&amp;&amp;buf_to_primary&amp;&amp;buf_empty_p(buf_to_primary) is false" type="C"/>
   <traceLine line="2327" text="Not entering loop, because __i&lt;sizeof( * ( &amp;readfds) ) is true" type="C"/>
   <traceLine line="2348" text="to_net_fd&gt;=0 is true" type="C"/>
   <traceLine line="2348" text="&apos;buf_to_net&apos; is dereferenced by passing argument 1 to function &apos;buf_empty_p&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\buffer.c" method="buf_empty_p" id="1">
   <traceLine line="158" text="&apos;buf&apos; is passed to function &apos;buf_empty_p&apos;." type="E"/>
   <traceLine line="162" text="&apos;buf&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=811</url>
</problem>
<problem>
 <problemID>830</problemID>
 <file>cvs\src\server.c</file>
 <method>dirswitch</method>
 <line>1168</line>
 <column>27</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;repos&apos; checked for NULL at line 1044 may be dereferenced at line 1168.</message>
 <anchor>-354552473</anchor>
 <prefix>ending_error=save_errno;return;}</prefix>
 <postfix>{intsave_errno=errno;if(alloc_pe</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="dirswitch" id="0">
   <traceLine line="1044" text="&apos;repos&apos; is checked for NULL." type="E"/>
   <traceLine line="1044" text="repos is false" type="C"/>
   <traceLine line="1168" text="&apos;repos&apos; is dereferenced by formatted printing function &apos;fprintf&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=830</url>
</problem>
<problem>
 <problemID>525</problemID>
 <file>cvs\src\server.c</file>
 <method>check_repository_password</method>
 <line>6583</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;filename&apos; allocated through function &apos;xmalloc&apos; at line 6568 can be lost at line 6583</message>
 <anchor>-639611935</anchor>
 <prefix>,errno,&quot;cannotopen%s&quot;,filename);</prefix>
 <postfix>}/*Lookforarelevantline--onewith</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="check_repository_password" id="0">
   <traceLine line="6568" text="Dynamic memory stored in &apos;filename&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="6581" text="! ( ( ( *__errno() ) ) ==2) is false" type="C"/>
   <traceLine line="6583" text="Dynamic memory stored in &apos;filename&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=525</url>
</problem>
<problem>
 <problemID>474</problemID>
 <file>cvs\src\server.c</file>
 <method>server_updated</method>
 <line>5079</line>
 <column>13</column>
 <code>FREE.INCONSISTENT</code>
 <message>Memory pointed by &apos;vers-&gt;vn_user&apos; is freed at this point, but this memory is not freed upon function exits at line(s) 4826, 5100.</message>
 <anchor>1613173489</anchor>
 <prefix>*/if(vers&amp;&amp;vers-&gt;vn_user!=NULL){</prefix>
 <postfix>vers-&gt;vn_user=NULL;}if(vers&amp;&amp;ver</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="server_updated" id="0">
   <traceLine line="4826" text="&apos;vers-&gt;vn_user&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="5100" text="&apos;vers-&gt;vn_user&apos; is not freed prior to function exit." type="E"/>
   <traceLine line="5079" text="&apos;vers-&gt;vn_user&apos; is freed." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="server_updated" id="1">
   <traceLine line="4806" text="Tracking &apos;vers-&gt;vn_user&apos;." type="E"/>
   <traceLine line="5079" text="&apos;vers-&gt;vn_user&apos; is freed by calling &apos;free&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=474</url>
</problem>
<problem>
 <problemID>819</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_root</method>
 <line>788</line>
 <column>22</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;arg&apos; checked for NULL at line 779 may be dereferenced at line 788.</message>
 <anchor>-746206724</anchor>
 <prefix>g#endif/*PROXY_SUPPORT*/)return;</prefix>
 <postfix>{if(alloc_pending(80+strlen(arg)</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="serve_root" id="0">
   <traceLine line="779" text="&apos;arg&apos; is checked for NULL." type="E"/>
   <traceLine line="779" text="arg is false" type="C"/>
   <traceLine line="788" text="&apos;arg&apos; is dereferenced by passing argument 1 to function &apos;isabsolute&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="isabsolute" id="1">
   <traceLine line="1861" text="&apos;filename&apos; is passed to function &apos;isabsolute&apos;." type="E"/>
   <traceLine line="1863" text="&apos;filename&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=819</url>
</problem>
<problem>
 <problemID>820</problemID>
 <file>cvs\src\server.c</file>
 <method>serve_directory</method>
 <line>1306</line>
 <column>52</column>
 <code>NPD.CHECK.MIGHT</code>
 <message>Pointer &apos;arg&apos; checked for NULL at line 1260 may be dereferenced at line 1306.</message>
 <anchor>-746206724</anchor>
 <prefix>error=ENOMEM;}elseif(status!=0){</prefix>
 <postfix>if(pending_error_text==NULL){pen</postfix>
 <trace>
  <traceBlock file="cvs\src\server.c" method="serve_directory" id="0">
   <traceLine line="1260" text="&apos;arg&apos; is checked for NULL." type="E"/>
   <traceLine line="1260" text="arg is false" type="C"/>
   <traceLine line="1306" text="&apos;arg&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=820</url>
</problem>
<problem>
 <problemID>535</problemID>
 <file>cvs\src\subr.c</file>
 <method>file_has_conflict</method>
 <line>619</line>
 <column>41</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;filestamp&apos; returned from call to function &apos;time_stamp&apos; at line 618 may be NULL and will be dereferenced at line 619.</message>
 <anchor>341968508</anchor>
 <prefix>lestamp=time_stamp(finfo-&gt;file);</prefix>
 <postfix>free(filestamp);}returnretcode;}</postfix>
 <trace>
  <traceBlock file="cvs\src\subr.c" method="file_has_conflict" id="0">
   <traceLine line="618" text="&apos;filestamp&apos; is assigned the return value from function &apos;time_stamp&apos;." type="E" refId="1"/>
   <traceLine line="619" text="&apos;filestamp&apos; is dereferenced by passing argument 2 to function &apos;strcmp&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\vers_ts.c" method="time_stamp" id="1">
   <traceLine line="411" text="mtime is false" type="C"/>
   <traceLine line="411" text="&apos;...?entries_time(mtime):0&apos; has been assigned a NULL value." type="E"/>
   <traceLine line="411" text="&apos;...?entries_time(mtime):0&apos; is returned by &apos;time_stamp&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329148090940</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=535</url>
</problem>
<problem>
 <problemID>844</problemID>
 <file>cvs\src\subr.c</file>
 <method>format_cmdline</method>
 <line>1744</line>
 <column>25</column>
 <code>VA_UNUSED.GEN</code>
 <message>Value of &apos;q&apos; is never used after assignment. Also there are 2 similar errors on line(s) 1797, 1807.</message>
 <anchor>113</anchor>
 <prefix>ce.weknowthat^alwaysadds1extra*/</prefix>
 <postfix>}else{/*gotaflatitem*/char*outst</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC13-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=844</url>
</problem>
<problem>
 <problemID>846</problemID>
 <file>cvs\src\subr.c</file>
 <method>previous_rev</method>
 <line>405</line>
 <column>44</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;tmp&apos; returned from call to function &apos;Xstrdup&apos; at line 380 may be NULL and may be dereferenced at line 405. Also there is one similar error on line 409.</message>
 <anchor>1668261655</anchor>
 <prefix>runk.*/retval=NULL;else{*p=&apos;\0&apos;;</prefix>
 <postfix>}break;}sprintf(retval,&quot;%s.%ld&quot;,</postfix>
 <trace>
  <traceBlock file="cvs\src\subr.c" method="previous_rev" id="0">
   <traceLine line="380" text="&apos;tmp&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="390" text="--r1==0 is true" type="C"/>
   <traceLine line="405" text="&apos;tmp&apos; is dereferenced by formatted printing function &apos;sprintf&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=846</url>
</problem>
<problem>
 <problemID>539</problemID>
 <file>cvs\src\subr.c</file>
 <method>get_file</method>
 <line>701</line>
 <column>9</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from off_t to size_t may cause loss of data</message>
 <anchor>-140073794</anchor>
 <prefix>/*Convertfromsignedtounsigned.*/</prefix>
 <postfix>e=open_file(name,mode);}if(*buf=</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=539</url>
</problem>
<problem>
 <problemID>845</problemID>
 <file>cvs\src\subr.c</file>
 <method>format_cmdline</method>
 <line>1165</line>
 <column>9</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;b-&gt;data&apos; allocated through function &apos;Xasprintf&apos; at line 1290 can be lost at line 1165. Also there are 15 similar errors on line(s) 1165, 1514.</message>
 <anchor>-1718147110</anchor>
 <prefix>0;/*allocatespacetosaveourdata*/</prefix>
 <postfix>/*wheredidyouthinkweweregoingtos</postfix>
 <trace>
  <traceBlock file="cvs\src\subr.c" method="format_cmdline" id="0">
   <traceLine line="1287" text="length==sizeof(char) is true" type="C"/>
   <traceLine line="1290" text="Dynamic memory stored in &apos;b-&gt;data&apos; is allocated by calling function &apos;Xasprintf&apos;." type="E" refId="1"/>
   <traceLine line="1462" text="Not entering loop, because *q is false" type="C"/>
   <traceLine line="1154" text="Continue loop iteration, while (pfmt= ( (char* )__kw_va_arg(args) ) ) != ( (void* )0) is true" type="C"/>
   <traceLine line="1165" text="Dynamic memory stored in &apos;b-&gt;data&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xasprintf" id="1">
   <traceLine line="1914" text="&apos;result&apos; is allocated by calling function &apos;vasprintf&apos;." type="E"/>
   <traceLine line="1914" text="vasprintf( &amp;result, format, args) &lt;0 is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=845</url>
</problem>
<problem>
 <problemID>841</problemID>
 <file>cvs\src\subr.c</file>
 <method>format_cmdline</method>
 <line>1283</line>
 <column>21</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-219124614</anchor>
 <prefix>n_error=1;break;}if(length==-1){</prefix>
 <postfix>}switch(length){casesizeof(char)</postfix>
 <trace>
  <traceBlock file="cvs\src\subr.c" method="format_cmdline" id="0">
   <traceLine line="1281" text="Infeasible condition: &apos;length== -1&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="1283" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="format_cmdline" id="1">
   <traceLine line="1281" text="Inferred value &apos;length&apos; is &apos;[0, 2] EQ(4) EQ(8) EQ(4294967295)&apos;" type="E"/>
   <traceLine line="1281" text="Result of expression &apos;length == -1&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=841</url>
</problem>
<problem>
 <problemID>842</problemID>
 <file>cvs\src\subr.c</file>
 <method>format_cmdline</method>
 <line>1382</line>
 <column>21</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-219124614</anchor>
 <prefix>n_error=1;break;}if(length==-1){</prefix>
 <postfix>}switch(length){casesizeof(doubl</postfix>
 <trace>
  <traceBlock file="cvs\src\subr.c" method="format_cmdline" id="0">
   <traceLine line="1380" text="Infeasible condition: &apos;length== -1&apos; cannot be true." type="E" refId="1"/>
   <traceLine line="1382" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="format_cmdline" id="1">
   <traceLine line="1380" text="Inferred value &apos;length&apos; is &apos;[0, 2] EQ(4) EQ(8) EQ(4294967295)&apos;" type="E"/>
   <traceLine line="1380" text="Result of expression &apos;length == -1&apos; is &apos;== 0&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=842</url>
</problem>
<problem>
 <problemID>843</problemID>
 <file>cvs\src\subr.c</file>
 <method>format_cmdline</method>
 <line>1434</line>
 <column>17</column>
 <code>UNREACH.GEN</code>
 <message>Code is unreachable</message>
 <anchor>-219124614</anchor>
 <prefix>!=-1){conversion_error=1;break;}</prefix>
 <postfix>b-&gt;convproc=va_arg(args,CONVPROC</postfix>
 <trace>
  <traceBlock file="cvs\src\subr.c" method="format_cmdline" id="0">
   <traceLine line="1429" text="Infeasible condition: &apos;length!= -1&apos; cannot be false." type="E" refId="1"/>
   <traceLine line="1434" text="The code is unreachable." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="format_cmdline" id="1">
   <traceLine line="1429" text="Inferred value &apos;length&apos; is &apos;[0, 2] EQ(4) EQ(8) EQ(4294967295)&apos;" type="E"/>
   <traceLine line="1429" text="Result of expression &apos;length != -1&apos; is &apos;== 1&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Warning</severity>
 <severitylevel>3</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MSC07-C"/>
  <taxonomy name="CWE" metaInf="561"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=843</url>
</problem>
<problem>
 <problemID>536</problemID>
 <file>cvs\src\subr.c</file>
 <method>get_file</method>
 <line>739</line>
 <column>13</column>
 <code>PRECISION.LOSS</code>
 <message>Conversion from int to char may cause loss of data</message>
 <anchor>517317363</anchor>
 <prefix>ze,*bufsize+100);tobuf=*buf+off;</prefix>
 <postfix>++nread;}}if(e!=stdin&amp;&amp;fclose(e)</postfix>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Review</severity>
 <severitylevel>4</severitylevel>
 <displayAs>Warning</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="INT31-C"/>
  <taxonomy name="CWE" metaInf="197"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=536</url>
</problem>
<problem>
 <problemID>545</problemID>
 <file>cvs\src\subr.c</file>
 <method>get_file</method>
 <line>720</line>
 <column>13</column>
 <code>RH.LEAK</code>
 <message>Resource acquired to &apos;e&apos; at line 703 may be lost here. Also there are 3 similar errors on line(s) 720, 753.</message>
 <anchor>1120938594</anchor>
 <prefix>ze-(tobuf-*buf),e);if(ferror(e))</prefix>
 <postfix>nread+=got;tobuf+=got;if(feof(e)</postfix>
 <trace>
  <traceBlock file="cvs\src\subr.c" method="get_file" id="0">
   <traceLine line="703" text="Resource is acquired: &apos;e&apos; is assigned to return value of the call to function &apos;open_file&apos;." type="E" refId="1"/>
   <traceLine line="714" text="Entering loop, because 1 is true" type="C"/>
   <traceLine line="719" text="( ( (e) -&gt;_flags&amp;64) !=0) is true" type="C"/>
   <traceLine line="720" text="Resource is lost: &apos;e&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\filesubr.c" method="open_file" id="1">
   <traceLine line="275" text="Resource is acquired: &apos;fp&apos; is assigned to return value of the call to function &apos;fopen&apos;." type="E"/>
   <traceLine line="277" text="Resource descriptor is returned: &apos;fp&apos;" type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="FIO42-C"/>
  <taxonomy name="CWE" metaInf="403, 404"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=545</url>
</problem>
<problem>
 <problemID>544</problemID>
 <file>cvs\src\subr.c</file>
 <method>previous_rev</method>
 <line>387</line>
 <column>6</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;p&apos; returned from call to function &apos;strrchr&apos; at line 386 may be NULL and will be dereferenced at line 387.</message>
 <anchor>-1250227690</anchor>
 <prefix>rlen(rev)+1);p=strrchr(tmp,&apos;.&apos;);</prefix>
 <postfix>r1=strtol(p+1,NULL,10);do{if(--r</postfix>
 <trace>
  <traceBlock file="cvs\src\subr.c" method="previous_rev" id="0">
   <traceLine line="386" text="&apos;p&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="387" text="&apos;p&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=544</url>
</problem>
<problem>
 <problemID>540</problemID>
 <file>cvs\src\subr.c</file>
 <method>previous_rev</method>
 <line>401</line>
 <column>21</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;retval&apos; allocated through function &apos;xmalloc&apos; at line 385 can be lost at line 401</message>
 <anchor>1737014074</anchor>
 <prefix>;if(p==NULL)/*Weareonthetrunk.*/</prefix>
 <postfix>else{*p=&apos;\0&apos;;sprintf(retval,&quot;%s&quot;</postfix>
 <trace>
  <traceBlock file="cvs\src\subr.c" method="previous_rev" id="0">
   <traceLine line="385" text="Dynamic memory stored in &apos;retval&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="1"/>
   <traceLine line="390" text="--r1==0 is true" type="C"/>
   <traceLine line="401" text="Dynamic memory stored in &apos;retval&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="1">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="2">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=540</url>
</problem>
<problem>
 <problemID>542</problemID>
 <file>cvs\src\subr.c</file>
 <method>gca</method>
 <line>491</line>
 <column>10</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;g&apos; returned from call to function &apos;strrchr&apos; at line 490 may be NULL and will be dereferenced at line 491.</message>
 <anchor>1390399373</anchor>
 <prefix>tarevision.*/g=strrchr(gca,&apos;.&apos;);</prefix>
 <postfix>}retval=xstrdup(gca);free(gca);r</postfix>
 <trace>
  <traceBlock file="cvs\src\subr.c" method="gca" id="0">
   <traceLine line="490" text="&apos;g&apos; is assigned the return value from function &apos;strrchr&apos;." type="E"/>
   <traceLine line="491" text="&apos;g&apos; is explicitly dereferenced." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=542</url>
</problem>
<problem>
 <problemID>849</problemID>
 <file>cvs\src\tag.c</file>
 <method>tag_check_valid_join</method>
 <line>1624</line>
 <column>17</column>
 <code>NPD.FUNC.MUST</code>
 <message>Pointer &apos;c&apos; returned from call to function &apos;Xstrdup&apos; at line 1623 may be NULL and will be dereferenced at line 1624.</message>
 <anchor>1676498019</anchor>
 <prefix>){char*c,*s;c=xstrdup(join_tag);</prefix>
 <postfix>if(s!=NULL){if(isdigit((unsigned</postfix>
 <trace>
  <traceBlock file="cvs\src\tag.c" method="tag_check_valid_join" id="0">
   <traceLine line="1623" text="&apos;c&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="1624" text="&apos;c&apos; is dereferenced by passing argument 1 to function &apos;strchr&apos;." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=849</url>
</problem>
<problem>
 <problemID>576</problemID>
 <file>cvs\src\update.c</file>
 <method>update</method>
 <line>199</line>
 <column>17</column>
 <code>MLK.MIGHT</code>
 <message>Possible memory leak. Dynamic memory stored in &apos;date&apos; allocated through function &apos;Make_Date&apos; at line 199 can be lost at line 199</message>
 <anchor>-1921848057</anchor>
 <prefix>ase&apos;r&apos;:tag=optarg;break;case&apos;D&apos;:</prefix>
 <postfix>break;case&apos;P&apos;:update_prune_dirs=</postfix>
 <trace>
  <traceBlock file="cvs\src\update.c" method="update" id="0">
   <traceLine line="199" text="Dynamic memory stored in &apos;date&apos; is allocated by calling function &apos;Make_Date&apos;." type="E" refId="1"/>
   <traceLine line="151" text="Continue loop iteration, while (c=__GETOPT_PREFIXgetopt(argc, argv, &quot;+ApCPflRQqduk:r:D:j:I:W:&quot; ) ) != -1 is true" type="C"/>
   <traceLine line="199" text="Dynamic memory stored in &apos;date&apos; is lost." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="Make_Date" id="1">
   <traceLine line="1089" text="&apos;date_from_time_t(t.tv_sec)&apos; is allocated by calling function &apos;date_from_time_t&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\main.c" method="date_from_time_t" id="2">
   <traceLine line="1122" text="&apos;ret&apos; is allocated by calling function &apos;Xstrdup&apos;." type="E" refId="3"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="3">
   <traceLine line="1900" text="&apos;xmemdup(string, strlen(string) +1)&apos; is allocated by calling function &apos;xmemdup&apos;." type="E" refId="4"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmemdup" id="4">
   <traceLine line="220" text="&apos;xmalloc(s)&apos; is allocated by calling function &apos;xmalloc&apos;." type="E" refId="5"/>
   <traceLine line="220" text="memcpy(xmalloc(s), p, s): returns &apos;xmalloc(s)&apos;" type="E"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xmalloc" id="5">
   <traceLine line="56" text="&apos;xnmalloc_inline(n, 1)&apos; is allocated by calling function &apos;xnmalloc_inline&apos;." type="E" refId="6"/>
  </traceBlock>
  <traceBlock file="cvs\lib\xmalloc.c" method="xnmalloc_inline" id="6">
   <traceLine line="40" text="&apos;p&apos; is allocated by calling function &apos;malloc&apos;." type="E"/>
   <traceLine line="40" text="! (p=malloc(n*s) ) is false" type="C"/>
   <traceLine line="40" text="( (size_t) (sizeof(ptrdiff_t) &lt;=sizeof(size_t) ? -1: -2) / (s) &lt; (n) ) || ( ! (p=malloc(n*s) ) &amp;&amp;n!=0) is false" type="C"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Error</severity>
 <severitylevel>2</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="MEM31-C"/>
  <taxonomy name="CWE" metaInf="401"/>
 </taxonomies>
 <dateOriginated>1329145888629</dateOriginated>
 <dateFixed>1329146909167</dateFixed>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=576</url>
</problem>
<problem>
 <problemID>853</problemID>
 <file>cvs\src\update.c</file>
 <method>write_letter</method>
 <line>1881</line>
 <column>37</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 1881.</message>
 <anchor>-493709426</anchor>
 <prefix>g!=NULL){sprintf(buf,&quot;+%s&quot;,tag);</prefix>
 <postfix>}buf[0]=letter;buf[1]=&apos;&apos;;buf[2]=</postfix>
 <trace>
  <traceBlock file="cvs\src\update.c" method="write_letter" id="0">
   <traceLine line="1881" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=853</url>
</problem>
<problem>
 <problemID>854</problemID>
 <file>cvs\src\update.c</file>
 <method>write_letter</method>
 <line>1888</line>
 <column>39</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 1888.</message>
 <anchor>-493709426</anchor>
 <prefix>tagged(&quot;fname&quot;,finfo-&gt;fullname);</prefix>
 <postfix>if(tag!=NULL){sprintf(buf,&quot;-%s&quot;,</postfix>
 <trace>
  <traceBlock file="cvs\src\update.c" method="write_letter" id="0">
   <traceLine line="1888" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=854</url>
</problem>
<problem>
 <problemID>855</problemID>
 <file>cvs\src\update.c</file>
 <method>write_letter</method>
 <line>1892</line>
 <column>37</column>
 <code>NPD.CONST.CALL</code>
 <message>Constant NULL may be dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos; at line 1892.</message>
 <anchor>-493709426</anchor>
 <prefix>g!=NULL){sprintf(buf,&quot;-%s&quot;,tag);</prefix>
 <postfix>}}return;}/**Doallthemagicassoci</postfix>
 <trace>
  <traceBlock file="cvs\src\update.c" method="write_letter" id="0">
   <traceLine line="1892" text="NULL constant is dereferenced by passing argument 2 to function &apos;cvs_output_tagged&apos;." type="E" refId="1"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output_tagged" id="1">
   <traceLine line="7752" text="&apos;text&apos; is passed to function &apos;cvs_output_tagged&apos;." type="E"/>
   <traceLine line="7754" text="text!= ( (void* )0) &amp;&amp;strchr(text,  &apos;\n&apos; ) != ( (void* )0) is false" type="C"/>
   <traceLine line="7766" text="text== ( (void* )0) is true" type="C"/>
   <traceLine line="7804" text="&apos;text&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=855</url>
</problem>
<problem>
 <problemID>852</problemID>
 <file>cvs\src\update.c</file>
 <method>merge_file</method>
 <line>2050</line>
 <column>25</column>
 <code>NPD.FUNC.MIGHT</code>
 <message>Pointer &apos;vers-&gt;vn_user&apos; returned from call to function &apos;Xstrdup&apos; at line 2012 may be NULL and may be dereferenced at line 2050.</message>
 <anchor>1152844273</anchor>
 <prefix>ntainsthedifferencesbetween&quot;,0);</prefix>
 <postfix>cvs_output(&quot;and&quot;,0);cvs_output(v</postfix>
 <trace>
  <traceBlock file="cvs\src\update.c" method="merge_file" id="0">
   <traceLine line="2012" text="&apos;vers-&gt;vn_user&apos; is assigned the return value from function &apos;Xstrdup&apos;." type="E" refId="1"/>
   <traceLine line="2019" text="server_active is false" type="C"/>
   <traceLine line="2050" text="&apos;vers-&gt;vn_user&apos; is dereferenced by passing argument 1 to function &apos;cvs_output&apos;." type="E" refId="2"/>
  </traceBlock>
  <traceBlock file="cvs\src\subr.c" method="Xstrdup" id="1">
   <traceLine line="1897" text="Xstrdup" type="E"/>
   <traceLine line="1899" text="&apos;Xstrdup&apos; explicitly returns a NULL value." type="E"/>
  </traceBlock>
  <traceBlock file="cvs\src\server.c" method="cvs_output" id="2">
   <traceLine line="7470" text="&apos;str&apos; is passed to function &apos;cvs_output&apos;." type="E"/>
   <traceLine line="7473" text="&apos;str&apos; is dereferenced by passing argument 1 to function &apos;strlen&apos;." type="E"/>
  </traceBlock>
 </trace>
 <citingStatus>Analyze</citingStatus>
 <state>Existing</state>
 <owner>Smith</owner>
 <severity>Critical</severity>
 <severitylevel>1</severitylevel>
 <displayAs>Error</displayAs>
 <taxonomies>
  <taxonomy name="C and C++" metaInf=""/>
  <taxonomy name="CERT" metaInf="EXP34-C"/>
  <taxonomy name="CWE" metaInf="476"/>
 </taxonomies>
 <dateOriginated>1329149459558</dateOriginated>
 <url>http://localhost:8080/review/insight-review.html#goto:project=CVS,pid=852</url>
</problem>
</errorList>
